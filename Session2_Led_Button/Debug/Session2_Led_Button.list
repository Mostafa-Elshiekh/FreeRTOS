
Session2_Led_Button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fd4  08000130  08000130  00010130  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002104  08002104  00012104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002128  08002128  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08002128  08002128  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002128  08002128  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002128  08002128  00012128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800212c  0800212c  0001212c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08002130  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021c8  20000008  08002138  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200021d0  08002138  000221d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   000080f9  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000147b  00000000  00000000  0002812a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000508  00000000  00000000  000295a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000470  00000000  00000000  00029ab0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001bb6  00000000  00000000  00029f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004703  00000000  00000000  0002bad6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00013856  00000000  00000000  000301d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00043a2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001310  00000000  00000000  00043aac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000008 	.word	0x20000008
 800014c:	00000000 	.word	0x00000000
 8000150:	080020ec 	.word	0x080020ec

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000000c 	.word	0x2000000c
 800016c:	080020ec 	.word	0x080020ec

08000170 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	f103 0208 	add.w	r2, r3, #8
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f04f 32ff 	mov.w	r2, #4294967295
 8000188:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f103 0208 	add.w	r2, r3, #8
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	f103 0208 	add.w	r2, r3, #8
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	2200      	movs	r2, #0
 80001a2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80001a4:	bf00      	nop
 80001a6:	370c      	adds	r7, #12
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr

080001ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80001ae:	b480      	push	{r7}
 80001b0:	b083      	sub	sp, #12
 80001b2:	af00      	add	r7, sp, #0
 80001b4:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2200      	movs	r2, #0
 80001ba:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80001bc:	bf00      	nop
 80001be:	370c      	adds	r7, #12
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr

080001c6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80001c6:	b480      	push	{r7}
 80001c8:	b085      	sub	sp, #20
 80001ca:	af00      	add	r7, sp, #0
 80001cc:	6078      	str	r0, [r7, #4]
 80001ce:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80001d0:	683b      	ldr	r3, [r7, #0]
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80001d6:	68bb      	ldr	r3, [r7, #8]
 80001d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80001dc:	d103      	bne.n	80001e6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	691b      	ldr	r3, [r3, #16]
 80001e2:	60fb      	str	r3, [r7, #12]
 80001e4:	e00c      	b.n	8000200 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	3308      	adds	r3, #8
 80001ea:	60fb      	str	r3, [r7, #12]
 80001ec:	e002      	b.n	80001f4 <vListInsert+0x2e>
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	685b      	ldr	r3, [r3, #4]
 80001f2:	60fb      	str	r3, [r7, #12]
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	685b      	ldr	r3, [r3, #4]
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	68ba      	ldr	r2, [r7, #8]
 80001fc:	429a      	cmp	r2, r3
 80001fe:	d2f6      	bcs.n	80001ee <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	685a      	ldr	r2, [r3, #4]
 8000204:	683b      	ldr	r3, [r7, #0]
 8000206:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000208:	683b      	ldr	r3, [r7, #0]
 800020a:	685b      	ldr	r3, [r3, #4]
 800020c:	683a      	ldr	r2, [r7, #0]
 800020e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000210:	683b      	ldr	r3, [r7, #0]
 8000212:	68fa      	ldr	r2, [r7, #12]
 8000214:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000216:	68fb      	ldr	r3, [r7, #12]
 8000218:	683a      	ldr	r2, [r7, #0]
 800021a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800021c:	683b      	ldr	r3, [r7, #0]
 800021e:	687a      	ldr	r2, [r7, #4]
 8000220:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	1c5a      	adds	r2, r3, #1
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	601a      	str	r2, [r3, #0]
}
 800022c:	bf00      	nop
 800022e:	3714      	adds	r7, #20
 8000230:	46bd      	mov	sp, r7
 8000232:	bc80      	pop	{r7}
 8000234:	4770      	bx	lr

08000236 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000236:	b480      	push	{r7}
 8000238:	b085      	sub	sp, #20
 800023a:	af00      	add	r7, sp, #0
 800023c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	691b      	ldr	r3, [r3, #16]
 8000242:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	685b      	ldr	r3, [r3, #4]
 8000248:	687a      	ldr	r2, [r7, #4]
 800024a:	6892      	ldr	r2, [r2, #8]
 800024c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	689b      	ldr	r3, [r3, #8]
 8000252:	687a      	ldr	r2, [r7, #4]
 8000254:	6852      	ldr	r2, [r2, #4]
 8000256:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	685b      	ldr	r3, [r3, #4]
 800025c:	687a      	ldr	r2, [r7, #4]
 800025e:	429a      	cmp	r2, r3
 8000260:	d103      	bne.n	800026a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	689a      	ldr	r2, [r3, #8]
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	2200      	movs	r2, #0
 800026e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	1e5a      	subs	r2, r3, #1
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	681b      	ldr	r3, [r3, #0]
}
 800027e:	4618      	mov	r0, r3
 8000280:	3714      	adds	r7, #20
 8000282:	46bd      	mov	sp, r7
 8000284:	bc80      	pop	{r7}
 8000286:	4770      	bx	lr

08000288 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000288:	b590      	push	{r4, r7, lr}
 800028a:	b085      	sub	sp, #20
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
 8000290:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8000292:	2301      	movs	r3, #1
 8000294:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
 800029a:	68bb      	ldr	r3, [r7, #8]
 800029c:	2b00      	cmp	r3, #0
 800029e:	d063      	beq.n	8000368 <xQueueGenericReset+0xe0>
        ( pxQueue->uxLength >= 1U ) &&
 80002a0:	68bb      	ldr	r3, [r7, #8]
 80002a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d05f      	beq.n	8000368 <xQueueGenericReset+0xe0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80002a8:	68bb      	ldr	r3, [r7, #8]
 80002aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80002ac:	68bb      	ldr	r3, [r7, #8]
 80002ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80002b0:	2000      	movs	r0, #0
 80002b2:	fba2 1203 	umull	r1, r2, r2, r3
 80002b6:	f04f 0300 	mov.w	r3, #0
 80002ba:	f04f 0400 	mov.w	r4, #0
 80002be:	0013      	movs	r3, r2
 80002c0:	2400      	movs	r4, #0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d000      	beq.n	80002c8 <xQueueGenericReset+0x40>
 80002c6:	2001      	movs	r0, #1
 80002c8:	4603      	mov	r3, r0
        ( pxQueue->uxLength >= 1U ) &&
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14c      	bne.n	8000368 <xQueueGenericReset+0xe0>
    {
        taskENTER_CRITICAL();
 80002ce:	f001 f9d5 	bl	800167c <vPortEnterCritical>

        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80002d2:	68bb      	ldr	r3, [r7, #8]
 80002d4:	681a      	ldr	r2, [r3, #0]
 80002d6:	68bb      	ldr	r3, [r7, #8]
 80002d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80002da:	68b9      	ldr	r1, [r7, #8]
 80002dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80002de:	fb01 f303 	mul.w	r3, r1, r3
 80002e2:	441a      	add	r2, r3
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80002e8:	68bb      	ldr	r3, [r7, #8]
 80002ea:	2200      	movs	r2, #0
 80002ec:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80002ee:	68bb      	ldr	r3, [r7, #8]
 80002f0:	681a      	ldr	r2, [r3, #0]
 80002f2:	68bb      	ldr	r3, [r7, #8]
 80002f4:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80002f6:	68bb      	ldr	r3, [r7, #8]
 80002f8:	681a      	ldr	r2, [r3, #0]
 80002fa:	68bb      	ldr	r3, [r7, #8]
 80002fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80002fe:	3b01      	subs	r3, #1
 8000300:	68b9      	ldr	r1, [r7, #8]
 8000302:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000304:	fb01 f303 	mul.w	r3, r1, r3
 8000308:	441a      	add	r2, r3
 800030a:	68bb      	ldr	r3, [r7, #8]
 800030c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800030e:	68bb      	ldr	r3, [r7, #8]
 8000310:	22ff      	movs	r2, #255	; 0xff
 8000312:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8000316:	68bb      	ldr	r3, [r7, #8]
 8000318:	22ff      	movs	r2, #255	; 0xff
 800031a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800031e:	683b      	ldr	r3, [r7, #0]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d114      	bne.n	800034e <xQueueGenericReset+0xc6>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	691b      	ldr	r3, [r3, #16]
 8000328:	2b00      	cmp	r3, #0
 800032a:	d01a      	beq.n	8000362 <xQueueGenericReset+0xda>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800032c:	68bb      	ldr	r3, [r7, #8]
 800032e:	3310      	adds	r3, #16
 8000330:	4618      	mov	r0, r3
 8000332:	f000 feb1 	bl	8001098 <xTaskRemoveFromEventList>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d012      	beq.n	8000362 <xQueueGenericReset+0xda>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 800033c:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <xQueueGenericReset+0xf0>)
 800033e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000342:	601a      	str	r2, [r3, #0]
 8000344:	f3bf 8f4f 	dsb	sy
 8000348:	f3bf 8f6f 	isb	sy
 800034c:	e009      	b.n	8000362 <xQueueGenericReset+0xda>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800034e:	68bb      	ldr	r3, [r7, #8]
 8000350:	3310      	adds	r3, #16
 8000352:	4618      	mov	r0, r3
 8000354:	f7ff ff0c 	bl	8000170 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000358:	68bb      	ldr	r3, [r7, #8]
 800035a:	3324      	adds	r3, #36	; 0x24
 800035c:	4618      	mov	r0, r3
 800035e:	f7ff ff07 	bl	8000170 <vListInitialise>
        }
        taskEXIT_CRITICAL();
 8000362:	f001 f9a3 	bl	80016ac <vPortExitCritical>
 8000366:	e001      	b.n	800036c <xQueueGenericReset+0xe4>
    }
    else
    {
        xReturn = pdFAIL;
 8000368:	2300      	movs	r3, #0
 800036a:	60fb      	str	r3, [r7, #12]

    configASSERT( xReturn != pdFAIL );

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800036c:	68fb      	ldr	r3, [r7, #12]
}
 800036e:	4618      	mov	r0, r3
 8000370:	3714      	adds	r7, #20
 8000372:	46bd      	mov	sp, r7
 8000374:	bd90      	pop	{r4, r7, pc}
 8000376:	bf00      	nop
 8000378:	e000ed04 	.word	0xe000ed04

0800037c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800037c:	b590      	push	{r4, r7, lr}
 800037e:	b08b      	sub	sp, #44	; 0x2c
 8000380:	af02      	add	r7, sp, #8
 8000382:	60f8      	str	r0, [r7, #12]
 8000384:	60b9      	str	r1, [r7, #8]
 8000386:	4613      	mov	r3, r2
 8000388:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800038a:	2300      	movs	r3, #0
 800038c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	2b00      	cmp	r3, #0
 8000392:	d033      	beq.n	80003fc <xQueueGenericCreate+0x80>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000394:	2000      	movs	r0, #0
 8000396:	68ba      	ldr	r2, [r7, #8]
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	fba2 1203 	umull	r1, r2, r2, r3
 800039e:	f04f 0300 	mov.w	r3, #0
 80003a2:	f04f 0400 	mov.w	r4, #0
 80003a6:	0013      	movs	r3, r2
 80003a8:	2400      	movs	r4, #0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d000      	beq.n	80003b0 <xQueueGenericCreate+0x34>
 80003ae:	2001      	movs	r0, #1
 80003b0:	4603      	mov	r3, r0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d122      	bne.n	80003fc <xQueueGenericCreate+0x80>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	68ba      	ldr	r2, [r7, #8]
 80003ba:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80003be:	f113 0f49 	cmn.w	r3, #73	; 0x49
 80003c2:	d81b      	bhi.n	80003fc <xQueueGenericCreate+0x80>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	68ba      	ldr	r2, [r7, #8]
 80003c8:	fb02 f303 	mul.w	r3, r2, r3
 80003cc:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80003ce:	69bb      	ldr	r3, [r7, #24]
 80003d0:	3348      	adds	r3, #72	; 0x48
 80003d2:	4618      	mov	r0, r3
 80003d4:	f001 f9e2 	bl	800179c <pvPortMalloc>
 80003d8:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80003da:	69fb      	ldr	r3, [r7, #28]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d00d      	beq.n	80003fc <xQueueGenericCreate+0x80>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80003e0:	69fb      	ldr	r3, [r7, #28]
 80003e2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80003e4:	697b      	ldr	r3, [r7, #20]
 80003e6:	3348      	adds	r3, #72	; 0x48
 80003e8:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80003ea:	79fa      	ldrb	r2, [r7, #7]
 80003ec:	69fb      	ldr	r3, [r7, #28]
 80003ee:	9300      	str	r3, [sp, #0]
 80003f0:	4613      	mov	r3, r2
 80003f2:	697a      	ldr	r2, [r7, #20]
 80003f4:	68b9      	ldr	r1, [r7, #8]
 80003f6:	68f8      	ldr	r0, [r7, #12]
 80003f8:	f000 f805 	bl	8000406 <prvInitialiseNewQueue>
        {
            configASSERT( pxNewQueue );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80003fc:	69fb      	ldr	r3, [r7, #28]
    }
 80003fe:	4618      	mov	r0, r3
 8000400:	3724      	adds	r7, #36	; 0x24
 8000402:	46bd      	mov	sp, r7
 8000404:	bd90      	pop	{r4, r7, pc}

08000406 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000406:	b580      	push	{r7, lr}
 8000408:	b084      	sub	sp, #16
 800040a:	af00      	add	r7, sp, #0
 800040c:	60f8      	str	r0, [r7, #12]
 800040e:	60b9      	str	r1, [r7, #8]
 8000410:	607a      	str	r2, [r7, #4]
 8000412:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000414:	68bb      	ldr	r3, [r7, #8]
 8000416:	2b00      	cmp	r3, #0
 8000418:	d103      	bne.n	8000422 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800041a:	69bb      	ldr	r3, [r7, #24]
 800041c:	69ba      	ldr	r2, [r7, #24]
 800041e:	601a      	str	r2, [r3, #0]
 8000420:	e002      	b.n	8000428 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000422:	69bb      	ldr	r3, [r7, #24]
 8000424:	687a      	ldr	r2, [r7, #4]
 8000426:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000428:	69bb      	ldr	r3, [r7, #24]
 800042a:	68fa      	ldr	r2, [r7, #12]
 800042c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800042e:	69bb      	ldr	r3, [r7, #24]
 8000430:	68ba      	ldr	r2, [r7, #8]
 8000432:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000434:	2101      	movs	r1, #1
 8000436:	69b8      	ldr	r0, [r7, #24]
 8000438:	f7ff ff26 	bl	8000288 <xQueueGenericReset>
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800043c:	bf00      	nop
 800043e:	3710      	adds	r7, #16
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}

08000444 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b08a      	sub	sp, #40	; 0x28
 8000448:	af00      	add	r7, sp, #0
 800044a:	60f8      	str	r0, [r7, #12]
 800044c:	60b9      	str	r1, [r7, #8]
 800044e:	607a      	str	r2, [r7, #4]
 8000450:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000452:	2300      	movs	r3, #0
 8000454:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	623b      	str	r3, [r7, #32]
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800045a:	f001 f90f 	bl	800167c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800045e:	6a3b      	ldr	r3, [r7, #32]
 8000460:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000462:	6a3b      	ldr	r3, [r7, #32]
 8000464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000466:	429a      	cmp	r2, r3
 8000468:	d302      	bcc.n	8000470 <xQueueGenericSend+0x2c>
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	2b02      	cmp	r3, #2
 800046e:	d129      	bne.n	80004c4 <xQueueGenericSend+0x80>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000470:	683a      	ldr	r2, [r7, #0]
 8000472:	68b9      	ldr	r1, [r7, #8]
 8000474:	6a38      	ldr	r0, [r7, #32]
 8000476:	f000 f92d 	bl	80006d4 <prvCopyDataToQueue>
 800047a:	61f8      	str	r0, [r7, #28]

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800047c:	6a3b      	ldr	r3, [r7, #32]
 800047e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000480:	2b00      	cmp	r3, #0
 8000482:	d010      	beq.n	80004a6 <xQueueGenericSend+0x62>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000484:	6a3b      	ldr	r3, [r7, #32]
 8000486:	3324      	adds	r3, #36	; 0x24
 8000488:	4618      	mov	r0, r3
 800048a:	f000 fe05 	bl	8001098 <xTaskRemoveFromEventList>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d013      	beq.n	80004bc <xQueueGenericSend+0x78>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8000494:	4b3f      	ldr	r3, [pc, #252]	; (8000594 <xQueueGenericSend+0x150>)
 8000496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800049a:	601a      	str	r2, [r3, #0]
 800049c:	f3bf 8f4f 	dsb	sy
 80004a0:	f3bf 8f6f 	isb	sy
 80004a4:	e00a      	b.n	80004bc <xQueueGenericSend+0x78>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80004a6:	69fb      	ldr	r3, [r7, #28]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d007      	beq.n	80004bc <xQueueGenericSend+0x78>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80004ac:	4b39      	ldr	r3, [pc, #228]	; (8000594 <xQueueGenericSend+0x150>)
 80004ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80004b2:	601a      	str	r2, [r3, #0]
 80004b4:	f3bf 8f4f 	dsb	sy
 80004b8:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80004bc:	f001 f8f6 	bl	80016ac <vPortExitCritical>
                return pdPASS;
 80004c0:	2301      	movs	r3, #1
 80004c2:	e063      	b.n	800058c <xQueueGenericSend+0x148>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d103      	bne.n	80004d2 <xQueueGenericSend+0x8e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80004ca:	f001 f8ef 	bl	80016ac <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80004ce:	2300      	movs	r3, #0
 80004d0:	e05c      	b.n	800058c <xQueueGenericSend+0x148>
                }
                else if( xEntryTimeSet == pdFALSE )
 80004d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d106      	bne.n	80004e6 <xQueueGenericSend+0xa2>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80004d8:	f107 0314 	add.w	r3, r7, #20
 80004dc:	4618      	mov	r0, r3
 80004de:	f000 fea3 	bl	8001228 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80004e2:	2301      	movs	r3, #1
 80004e4:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80004e6:	f001 f8e1 	bl	80016ac <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80004ea:	f000 fb79 	bl	8000be0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80004ee:	f001 f8c5 	bl	800167c <vPortEnterCritical>
 80004f2:	6a3b      	ldr	r3, [r7, #32]
 80004f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80004f8:	b25b      	sxtb	r3, r3
 80004fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004fe:	d103      	bne.n	8000508 <xQueueGenericSend+0xc4>
 8000500:	6a3b      	ldr	r3, [r7, #32]
 8000502:	2200      	movs	r2, #0
 8000504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000508:	6a3b      	ldr	r3, [r7, #32]
 800050a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800050e:	b25b      	sxtb	r3, r3
 8000510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000514:	d103      	bne.n	800051e <xQueueGenericSend+0xda>
 8000516:	6a3b      	ldr	r3, [r7, #32]
 8000518:	2200      	movs	r2, #0
 800051a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800051e:	f001 f8c5 	bl	80016ac <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000522:	1d3a      	adds	r2, r7, #4
 8000524:	f107 0314 	add.w	r3, r7, #20
 8000528:	4611      	mov	r1, r2
 800052a:	4618      	mov	r0, r3
 800052c:	f000 fe92 	bl	8001254 <xTaskCheckForTimeOut>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d124      	bne.n	8000580 <xQueueGenericSend+0x13c>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000536:	6a38      	ldr	r0, [r7, #32]
 8000538:	f000 f990 	bl	800085c <prvIsQueueFull>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d018      	beq.n	8000574 <xQueueGenericSend+0x130>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000542:	6a3b      	ldr	r3, [r7, #32]
 8000544:	3310      	adds	r3, #16
 8000546:	687a      	ldr	r2, [r7, #4]
 8000548:	4611      	mov	r1, r2
 800054a:	4618      	mov	r0, r3
 800054c:	f000 fd8e 	bl	800106c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000550:	6a38      	ldr	r0, [r7, #32]
 8000552:	f000 f91b 	bl	800078c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000556:	f000 fb51 	bl	8000bfc <xTaskResumeAll>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	f47f af7c 	bne.w	800045a <xQueueGenericSend+0x16>
                {
                    portYIELD_WITHIN_API();
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <xQueueGenericSend+0x150>)
 8000564:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	f3bf 8f4f 	dsb	sy
 800056e:	f3bf 8f6f 	isb	sy
 8000572:	e772      	b.n	800045a <xQueueGenericSend+0x16>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000574:	6a38      	ldr	r0, [r7, #32]
 8000576:	f000 f909 	bl	800078c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800057a:	f000 fb3f 	bl	8000bfc <xTaskResumeAll>
 800057e:	e76c      	b.n	800045a <xQueueGenericSend+0x16>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000580:	6a38      	ldr	r0, [r7, #32]
 8000582:	f000 f903 	bl	800078c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000586:	f000 fb39 	bl	8000bfc <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800058a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800058c:	4618      	mov	r0, r3
 800058e:	3728      	adds	r7, #40	; 0x28
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	e000ed04 	.word	0xe000ed04

08000598 <xQueueSemaphoreTake>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b088      	sub	sp, #32
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 80005a2:	2300      	movs	r3, #0
 80005a4:	61fb      	str	r3, [r7, #28]
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	61bb      	str	r3, [r7, #24]
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80005aa:	f001 f867 	bl	800167c <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80005ae:	69bb      	ldr	r3, [r7, #24]
 80005b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005b2:	617b      	str	r3, [r7, #20]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d01b      	beq.n	80005f2 <xQueueSemaphoreTake+0x5a>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	1e5a      	subs	r2, r3, #1
 80005be:	69bb      	ldr	r3, [r7, #24]
 80005c0:	639a      	str	r2, [r3, #56]	; 0x38
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80005c2:	69bb      	ldr	r3, [r7, #24]
 80005c4:	691b      	ldr	r3, [r3, #16]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d00f      	beq.n	80005ea <xQueueSemaphoreTake+0x52>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80005ca:	69bb      	ldr	r3, [r7, #24]
 80005cc:	3310      	adds	r3, #16
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 fd62 	bl	8001098 <xTaskRemoveFromEventList>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d007      	beq.n	80005ea <xQueueSemaphoreTake+0x52>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80005da:	4b3d      	ldr	r3, [pc, #244]	; (80006d0 <xQueueSemaphoreTake+0x138>)
 80005dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	f3bf 8f4f 	dsb	sy
 80005e6:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80005ea:	f001 f85f 	bl	80016ac <vPortExitCritical>
                return pdPASS;
 80005ee:	2301      	movs	r3, #1
 80005f0:	e069      	b.n	80006c6 <xQueueSemaphoreTake+0x12e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d103      	bne.n	8000600 <xQueueSemaphoreTake+0x68>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80005f8:	f001 f858 	bl	80016ac <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80005fc:	2300      	movs	r3, #0
 80005fe:	e062      	b.n	80006c6 <xQueueSemaphoreTake+0x12e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000600:	69fb      	ldr	r3, [r7, #28]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d106      	bne.n	8000614 <xQueueSemaphoreTake+0x7c>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000606:	f107 030c 	add.w	r3, r7, #12
 800060a:	4618      	mov	r0, r3
 800060c:	f000 fe0c 	bl	8001228 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000610:	2301      	movs	r3, #1
 8000612:	61fb      	str	r3, [r7, #28]
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000614:	f001 f84a 	bl	80016ac <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000618:	f000 fae2 	bl	8000be0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800061c:	f001 f82e 	bl	800167c <vPortEnterCritical>
 8000620:	69bb      	ldr	r3, [r7, #24]
 8000622:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000626:	b25b      	sxtb	r3, r3
 8000628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800062c:	d103      	bne.n	8000636 <xQueueSemaphoreTake+0x9e>
 800062e:	69bb      	ldr	r3, [r7, #24]
 8000630:	2200      	movs	r2, #0
 8000632:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000636:	69bb      	ldr	r3, [r7, #24]
 8000638:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800063c:	b25b      	sxtb	r3, r3
 800063e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000642:	d103      	bne.n	800064c <xQueueSemaphoreTake+0xb4>
 8000644:	69bb      	ldr	r3, [r7, #24]
 8000646:	2200      	movs	r2, #0
 8000648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800064c:	f001 f82e 	bl	80016ac <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000650:	463a      	mov	r2, r7
 8000652:	f107 030c 	add.w	r3, r7, #12
 8000656:	4611      	mov	r1, r2
 8000658:	4618      	mov	r0, r3
 800065a:	f000 fdfb 	bl	8001254 <xTaskCheckForTimeOut>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d123      	bne.n	80006ac <xQueueSemaphoreTake+0x114>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000664:	69b8      	ldr	r0, [r7, #24]
 8000666:	f000 f8e3 	bl	8000830 <prvIsQueueEmpty>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d017      	beq.n	80006a0 <xQueueSemaphoreTake+0x108>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000670:	69bb      	ldr	r3, [r7, #24]
 8000672:	3324      	adds	r3, #36	; 0x24
 8000674:	683a      	ldr	r2, [r7, #0]
 8000676:	4611      	mov	r1, r2
 8000678:	4618      	mov	r0, r3
 800067a:	f000 fcf7 	bl	800106c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800067e:	69b8      	ldr	r0, [r7, #24]
 8000680:	f000 f884 	bl	800078c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000684:	f000 faba 	bl	8000bfc <xTaskResumeAll>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d18d      	bne.n	80005aa <xQueueSemaphoreTake+0x12>
                {
                    portYIELD_WITHIN_API();
 800068e:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <xQueueSemaphoreTake+0x138>)
 8000690:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	f3bf 8f4f 	dsb	sy
 800069a:	f3bf 8f6f 	isb	sy
 800069e:	e784      	b.n	80005aa <xQueueSemaphoreTake+0x12>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 80006a0:	69b8      	ldr	r0, [r7, #24]
 80006a2:	f000 f873 	bl	800078c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80006a6:	f000 faa9 	bl	8000bfc <xTaskResumeAll>
 80006aa:	e77e      	b.n	80005aa <xQueueSemaphoreTake+0x12>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80006ac:	69b8      	ldr	r0, [r7, #24]
 80006ae:	f000 f86d 	bl	800078c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80006b2:	f000 faa3 	bl	8000bfc <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80006b6:	69b8      	ldr	r0, [r7, #24]
 80006b8:	f000 f8ba 	bl	8000830 <prvIsQueueEmpty>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	f43f af73 	beq.w	80005aa <xQueueSemaphoreTake+0x12>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80006c4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3720      	adds	r7, #32
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	e000ed04 	.word	0xe000ed04

080006d4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b086      	sub	sp, #24
 80006d8:	af00      	add	r7, sp, #0
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	60b9      	str	r1, [r7, #8]
 80006de:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80006e0:	2300      	movs	r3, #0
 80006e2:	613b      	str	r3, [r7, #16]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006e8:	617b      	str	r3, [r7, #20]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d043      	beq.n	800077a <prvCopyDataToQueue+0xa6>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d119      	bne.n	800072c <prvCopyDataToQueue+0x58>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	6858      	ldr	r0, [r3, #4]
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	461a      	mov	r2, r3
 8000702:	68b9      	ldr	r1, [r7, #8]
 8000704:	f001 fcde 	bl	80020c4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	685a      	ldr	r2, [r3, #4]
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	441a      	add	r2, r3
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	685a      	ldr	r2, [r3, #4]
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	689b      	ldr	r3, [r3, #8]
 800071e:	429a      	cmp	r2, r3
 8000720:	d32b      	bcc.n	800077a <prvCopyDataToQueue+0xa6>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	e026      	b.n	800077a <prvCopyDataToQueue+0xa6>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	68d8      	ldr	r0, [r3, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000734:	461a      	mov	r2, r3
 8000736:	68b9      	ldr	r1, [r7, #8]
 8000738:	f001 fcc4 	bl	80020c4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	68da      	ldr	r2, [r3, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000744:	425b      	negs	r3, r3
 8000746:	441a      	add	r2, r3
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	68da      	ldr	r2, [r3, #12]
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	429a      	cmp	r2, r3
 8000756:	d207      	bcs.n	8000768 <prvCopyDataToQueue+0x94>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	689a      	ldr	r2, [r3, #8]
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000760:	425b      	negs	r3, r3
 8000762:	441a      	add	r2, r3
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2b02      	cmp	r3, #2
 800076c:	d105      	bne.n	800077a <prvCopyDataToQueue+0xa6>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800076e:	697b      	ldr	r3, [r7, #20]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d002      	beq.n	800077a <prvCopyDataToQueue+0xa6>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	3b01      	subs	r3, #1
 8000778:	617b      	str	r3, [r7, #20]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800077a:	697b      	ldr	r3, [r7, #20]
 800077c:	1c5a      	adds	r2, r3, #1
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8000782:	693b      	ldr	r3, [r7, #16]
}
 8000784:	4618      	mov	r0, r3
 8000786:	3718      	adds	r7, #24
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <prvUnlockQueue>:
    }
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000794:	f000 ff72 	bl	800167c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800079e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80007a0:	e011      	b.n	80007c6 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d012      	beq.n	80007d0 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	3324      	adds	r3, #36	; 0x24
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 fc72 	bl	8001098 <xTaskRemoveFromEventList>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80007ba:	f000 fd95 	bl	80012e8 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80007be:	7bfb      	ldrb	r3, [r7, #15]
 80007c0:	3b01      	subs	r3, #1
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80007c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	dce9      	bgt.n	80007a2 <prvUnlockQueue+0x16>
 80007ce:	e000      	b.n	80007d2 <prvUnlockQueue+0x46>
                        break;
 80007d0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	22ff      	movs	r2, #255	; 0xff
 80007d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80007da:	f000 ff67 	bl	80016ac <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80007de:	f000 ff4d 	bl	800167c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80007e8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80007ea:	e011      	b.n	8000810 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	691b      	ldr	r3, [r3, #16]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d012      	beq.n	800081a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	3310      	adds	r3, #16
 80007f8:	4618      	mov	r0, r3
 80007fa:	f000 fc4d 	bl	8001098 <xTaskRemoveFromEventList>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000804:	f000 fd70 	bl	80012e8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000808:	7bbb      	ldrb	r3, [r7, #14]
 800080a:	3b01      	subs	r3, #1
 800080c:	b2db      	uxtb	r3, r3
 800080e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000810:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000814:	2b00      	cmp	r3, #0
 8000816:	dce9      	bgt.n	80007ec <prvUnlockQueue+0x60>
 8000818:	e000      	b.n	800081c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800081a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	22ff      	movs	r2, #255	; 0xff
 8000820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000824:	f000 ff42 	bl	80016ac <vPortExitCritical>
}
 8000828:	bf00      	nop
 800082a:	3710      	adds	r7, #16
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000838:	f000 ff20 	bl	800167c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000840:	2b00      	cmp	r3, #0
 8000842:	d102      	bne.n	800084a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000844:	2301      	movs	r3, #1
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	e001      	b.n	800084e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800084e:	f000 ff2d 	bl	80016ac <vPortExitCritical>

    return xReturn;
 8000852:	68fb      	ldr	r3, [r7, #12]
}
 8000854:	4618      	mov	r0, r3
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000864:	f000 ff0a 	bl	800167c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000870:	429a      	cmp	r2, r3
 8000872:	d102      	bne.n	800087a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8000874:	2301      	movs	r3, #1
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	e001      	b.n	800087e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800087e:	f000 ff15 	bl	80016ac <vPortExitCritical>

    return xReturn;
 8000882:	68fb      	ldr	r3, [r7, #12]
}
 8000884:	4618      	mov	r0, r3
 8000886:	3710      	adds	r7, #16
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800088c:	b580      	push	{r7, lr}
 800088e:	b08c      	sub	sp, #48	; 0x30
 8000890:	af04      	add	r7, sp, #16
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	4613      	mov	r3, r2
 800089a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800089c:	88fb      	ldrh	r3, [r7, #6]
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	4618      	mov	r0, r3
 80008a2:	f000 ff7b 	bl	800179c <pvPortMalloc>
 80008a6:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d00e      	beq.n	80008cc <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80008ae:	204c      	movs	r0, #76	; 0x4c
 80008b0:	f000 ff74 	bl	800179c <pvPortMalloc>
 80008b4:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d003      	beq.n	80008c4 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80008bc:	69fb      	ldr	r3, [r7, #28]
 80008be:	697a      	ldr	r2, [r7, #20]
 80008c0:	631a      	str	r2, [r3, #48]	; 0x30
 80008c2:	e005      	b.n	80008d0 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 80008c4:	6978      	ldr	r0, [r7, #20]
 80008c6:	f001 f817 	bl	80018f8 <vPortFree>
 80008ca:	e001      	b.n	80008d0 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80008d0:	69fb      	ldr	r3, [r7, #28]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d013      	beq.n	80008fe <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80008d6:	88fa      	ldrh	r2, [r7, #6]
 80008d8:	2300      	movs	r3, #0
 80008da:	9303      	str	r3, [sp, #12]
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	9302      	str	r3, [sp, #8]
 80008e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008e2:	9301      	str	r3, [sp, #4]
 80008e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008e6:	9300      	str	r3, [sp, #0]
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	68b9      	ldr	r1, [r7, #8]
 80008ec:	68f8      	ldr	r0, [r7, #12]
 80008ee:	f000 f80e 	bl	800090e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80008f2:	69f8      	ldr	r0, [r7, #28]
 80008f4:	f000 f884 	bl	8000a00 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80008f8:	2301      	movs	r3, #1
 80008fa:	61bb      	str	r3, [r7, #24]
 80008fc:	e002      	b.n	8000904 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80008fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000902:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000904:	69bb      	ldr	r3, [r7, #24]
    }
 8000906:	4618      	mov	r0, r3
 8000908:	3720      	adds	r7, #32
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b086      	sub	sp, #24
 8000912:	af00      	add	r7, sp, #0
 8000914:	60f8      	str	r0, [r7, #12]
 8000916:	60b9      	str	r1, [r7, #8]
 8000918:	607a      	str	r2, [r7, #4]
 800091a:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800091c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800091e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000926:	3b01      	subs	r3, #1
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	4413      	add	r3, r2
 800092c:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	f023 0307 	bic.w	r3, r3, #7
 8000934:	613b      	str	r3, [r7, #16]
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d01f      	beq.n	800097c <prvInitialiseNewTask+0x6e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
 8000940:	e012      	b.n	8000968 <prvInitialiseNewTask+0x5a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000942:	68ba      	ldr	r2, [r7, #8]
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	4413      	add	r3, r2
 8000948:	7819      	ldrb	r1, [r3, #0]
 800094a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	4413      	add	r3, r2
 8000950:	3334      	adds	r3, #52	; 0x34
 8000952:	460a      	mov	r2, r1
 8000954:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000956:	68ba      	ldr	r2, [r7, #8]
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	4413      	add	r3, r2
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d006      	beq.n	8000970 <prvInitialiseNewTask+0x62>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	3301      	adds	r3, #1
 8000966:	617b      	str	r3, [r7, #20]
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	2b0f      	cmp	r3, #15
 800096c:	d9e9      	bls.n	8000942 <prvInitialiseNewTask+0x34>
 800096e:	e000      	b.n	8000972 <prvInitialiseNewTask+0x64>
            {
                break;
 8000970:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000974:	2200      	movs	r2, #0
 8000976:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800097a:	e003      	b.n	8000984 <prvInitialiseNewTask+0x76>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800097c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800097e:	2200      	movs	r2, #0
 8000980:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000984:	6a3b      	ldr	r3, [r7, #32]
 8000986:	2b04      	cmp	r3, #4
 8000988:	d901      	bls.n	800098e <prvInitialiseNewTask+0x80>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800098a:	2304      	movs	r3, #4
 800098c:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800098e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000990:	6a3a      	ldr	r2, [r7, #32]
 8000992:	62da      	str	r2, [r3, #44]	; 0x2c
            pxNewTCB->uxBasePriority = uxPriority;
            pxNewTCB->uxMutexesHeld = 0;
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000996:	3304      	adds	r3, #4
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff fc08 	bl	80001ae <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800099e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009a0:	3318      	adds	r3, #24
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff fc03 	bl	80001ae <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80009a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80009ac:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80009ae:	6a3b      	ldr	r3, [r7, #32]
 80009b0:	f1c3 0205 	rsb	r2, r3, #5
 80009b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009b6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80009b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80009bc:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80009be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009c0:	3344      	adds	r3, #68	; 0x44
 80009c2:	2204      	movs	r2, #4
 80009c4:	2100      	movs	r1, #0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f001 fb87 	bl	80020da <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80009cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ce:	3348      	adds	r3, #72	; 0x48
 80009d0:	2201      	movs	r2, #1
 80009d2:	2100      	movs	r1, #0
 80009d4:	4618      	mov	r0, r3
 80009d6:	f001 fb80 	bl	80020da <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80009da:	683a      	ldr	r2, [r7, #0]
 80009dc:	68f9      	ldr	r1, [r7, #12]
 80009de:	6938      	ldr	r0, [r7, #16]
 80009e0:	f000 fdbc 	bl	800155c <pxPortInitialiseStack>
 80009e4:	4602      	mov	r2, r0
 80009e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009e8:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80009ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d002      	beq.n	80009f6 <prvInitialiseNewTask+0xe8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80009f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80009f4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80009f6:	bf00      	nop
 80009f8:	3718      	adds	r7, #24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000a08:	f000 fe38 	bl	800167c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000a0c:	4b3e      	ldr	r3, [pc, #248]	; (8000b08 <prvAddNewTaskToReadyList+0x108>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	3301      	adds	r3, #1
 8000a12:	4a3d      	ldr	r2, [pc, #244]	; (8000b08 <prvAddNewTaskToReadyList+0x108>)
 8000a14:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000a16:	4b3d      	ldr	r3, [pc, #244]	; (8000b0c <prvAddNewTaskToReadyList+0x10c>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d109      	bne.n	8000a32 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000a1e:	4a3b      	ldr	r2, [pc, #236]	; (8000b0c <prvAddNewTaskToReadyList+0x10c>)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000a24:	4b38      	ldr	r3, [pc, #224]	; (8000b08 <prvAddNewTaskToReadyList+0x108>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d110      	bne.n	8000a4e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000a2c:	f000 fc80 	bl	8001330 <prvInitialiseTaskLists>
 8000a30:	e00d      	b.n	8000a4e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000a32:	4b37      	ldr	r3, [pc, #220]	; (8000b10 <prvAddNewTaskToReadyList+0x110>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d109      	bne.n	8000a4e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000a3a:	4b34      	ldr	r3, [pc, #208]	; (8000b0c <prvAddNewTaskToReadyList+0x10c>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d802      	bhi.n	8000a4e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000a48:	4a30      	ldr	r2, [pc, #192]	; (8000b0c <prvAddNewTaskToReadyList+0x10c>)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000a4e:	4b31      	ldr	r3, [pc, #196]	; (8000b14 <prvAddNewTaskToReadyList+0x114>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	3301      	adds	r3, #1
 8000a54:	4a2f      	ldr	r2, [pc, #188]	; (8000b14 <prvAddNewTaskToReadyList+0x114>)
 8000a56:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	409a      	lsls	r2, r3
 8000a60:	4b2d      	ldr	r3, [pc, #180]	; (8000b18 <prvAddNewTaskToReadyList+0x118>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	4a2c      	ldr	r2, [pc, #176]	; (8000b18 <prvAddNewTaskToReadyList+0x118>)
 8000a68:	6013      	str	r3, [r2, #0]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a6e:	492b      	ldr	r1, [pc, #172]	; (8000b1c <prvAddNewTaskToReadyList+0x11c>)
 8000a70:	4613      	mov	r3, r2
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	4413      	add	r3, r2
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	440b      	add	r3, r1
 8000a7a:	3304      	adds	r3, #4
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	68fa      	ldr	r2, [r7, #12]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	689a      	ldr	r2, [r3, #8]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	689b      	ldr	r3, [r3, #8]
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	3204      	adds	r2, #4
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	1d1a      	adds	r2, r3, #4
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	4413      	add	r3, r2
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	4a1b      	ldr	r2, [pc, #108]	; (8000b1c <prvAddNewTaskToReadyList+0x11c>)
 8000aae:	441a      	add	r2, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	615a      	str	r2, [r3, #20]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ab8:	4918      	ldr	r1, [pc, #96]	; (8000b1c <prvAddNewTaskToReadyList+0x11c>)
 8000aba:	4613      	mov	r3, r2
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	4413      	add	r3, r2
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	440b      	add	r3, r1
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	1c59      	adds	r1, r3, #1
 8000ac8:	4814      	ldr	r0, [pc, #80]	; (8000b1c <prvAddNewTaskToReadyList+0x11c>)
 8000aca:	4613      	mov	r3, r2
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	4413      	add	r3, r2
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	4403      	add	r3, r0
 8000ad4:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000ad6:	f000 fde9 	bl	80016ac <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000ada:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <prvAddNewTaskToReadyList+0x110>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d00e      	beq.n	8000b00 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <prvAddNewTaskToReadyList+0x10c>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d207      	bcs.n	8000b00 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000af0:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <prvAddNewTaskToReadyList+0x120>)
 8000af2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	f3bf 8f4f 	dsb	sy
 8000afc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000b00:	bf00      	nop
 8000b02:	3710      	adds	r7, #16
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	200000fc 	.word	0x200000fc
 8000b0c:	20000024 	.word	0x20000024
 8000b10:	20000108 	.word	0x20000108
 8000b14:	20000118 	.word	0x20000118
 8000b18:	20000104 	.word	0x20000104
 8000b1c:	20000028 	.word	0x20000028
 8000b20:	e000ed04 	.word	0xe000ed04

08000b24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d008      	beq.n	8000b48 <vTaskDelay+0x24>
        {
            configASSERT( uxSchedulerSuspended == 0 );
            vTaskSuspendAll();
 8000b36:	f000 f853 	bl	8000be0 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f000 fc8d 	bl	800145c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8000b42:	f000 f85b 	bl	8000bfc <xTaskResumeAll>
 8000b46:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d107      	bne.n	8000b5e <vTaskDelay+0x3a>
        {
            portYIELD_WITHIN_API();
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <vTaskDelay+0x44>)
 8000b50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	f3bf 8f4f 	dsb	sy
 8000b5a:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000b5e:	bf00      	nop
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	e000ed04 	.word	0xe000ed04

08000b6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8000b72:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <vTaskStartScheduler+0x58>)
 8000b74:	9301      	str	r3, [sp, #4]
 8000b76:	2300      	movs	r3, #0
 8000b78:	9300      	str	r3, [sp, #0]
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	2280      	movs	r2, #128	; 0x80
 8000b7e:	4912      	ldr	r1, [pc, #72]	; (8000bc8 <vTaskStartScheduler+0x5c>)
 8000b80:	4812      	ldr	r0, [pc, #72]	; (8000bcc <vTaskStartScheduler+0x60>)
 8000b82:	f7ff fe83 	bl	800088c <xTaskCreate>
 8000b86:	6078      	str	r0, [r7, #4]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d114      	bne.n	8000bb8 <vTaskStartScheduler+0x4c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000b8e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000b92:	f383 8811 	msr	BASEPRI, r3
 8000b96:	f3bf 8f6f 	isb	sy
 8000b9a:	f3bf 8f4f 	dsb	sy
 8000b9e:	603b      	str	r3, [r7, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <vTaskStartScheduler+0x64>)
 8000ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba6:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000ba8:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <vTaskStartScheduler+0x68>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000bae:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <vTaskStartScheduler+0x6c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8000bb4:	f000 fd42 	bl	800163c <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000bb8:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <vTaskStartScheduler+0x70>)
 8000bba:	681b      	ldr	r3, [r3, #0]
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000120 	.word	0x20000120
 8000bc8:	08002104 	.word	0x08002104
 8000bcc:	08001301 	.word	0x08001301
 8000bd0:	2000011c 	.word	0x2000011c
 8000bd4:	20000108 	.word	0x20000108
 8000bd8:	20000100 	.word	0x20000100
 8000bdc:	20000000 	.word	0x20000000

08000be0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000be4:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <vTaskSuspendAll+0x18>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	3301      	adds	r3, #1
 8000bea:	4a03      	ldr	r2, [pc, #12]	; (8000bf8 <vTaskSuspendAll+0x18>)
 8000bec:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bc80      	pop	{r7}
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	20000124 	.word	0x20000124

08000bfc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000c06:	2300      	movs	r3, #0
 8000c08:	613b      	str	r3, [r7, #16]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8000c0a:	f000 fd37 	bl	800167c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000c0e:	4b68      	ldr	r3, [pc, #416]	; (8000db0 <xTaskResumeAll+0x1b4>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	3b01      	subs	r3, #1
 8000c14:	4a66      	ldr	r2, [pc, #408]	; (8000db0 <xTaskResumeAll+0x1b4>)
 8000c16:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000c18:	4b65      	ldr	r3, [pc, #404]	; (8000db0 <xTaskResumeAll+0x1b4>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	f040 80c0 	bne.w	8000da2 <xTaskResumeAll+0x1a6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000c22:	4b64      	ldr	r3, [pc, #400]	; (8000db4 <xTaskResumeAll+0x1b8>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	f000 80bb 	beq.w	8000da2 <xTaskResumeAll+0x1a6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000c2c:	e08a      	b.n	8000d44 <xTaskResumeAll+0x148>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000c2e:	4b62      	ldr	r3, [pc, #392]	; (8000db8 <xTaskResumeAll+0x1bc>)
 8000c30:	68db      	ldr	r3, [r3, #12]
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c3a:	60bb      	str	r3, [r7, #8]
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	69db      	ldr	r3, [r3, #28]
 8000c40:	697a      	ldr	r2, [r7, #20]
 8000c42:	6a12      	ldr	r2, [r2, #32]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	6a1b      	ldr	r3, [r3, #32]
 8000c4a:	697a      	ldr	r2, [r7, #20]
 8000c4c:	69d2      	ldr	r2, [r2, #28]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	685a      	ldr	r2, [r3, #4]
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	3318      	adds	r3, #24
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d103      	bne.n	8000c64 <xTaskResumeAll+0x68>
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	6a1a      	ldr	r2, [r3, #32]
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	2200      	movs	r2, #0
 8000c68:	629a      	str	r2, [r3, #40]	; 0x28
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	1e5a      	subs	r2, r3, #1
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	695b      	ldr	r3, [r3, #20]
 8000c78:	607b      	str	r3, [r7, #4]
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	697a      	ldr	r2, [r7, #20]
 8000c80:	68d2      	ldr	r2, [r2, #12]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	697a      	ldr	r2, [r7, #20]
 8000c8a:	6892      	ldr	r2, [r2, #8]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	685a      	ldr	r2, [r3, #4]
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	3304      	adds	r3, #4
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d103      	bne.n	8000ca2 <xTaskResumeAll+0xa6>
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	68da      	ldr	r2, [r3, #12]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	615a      	str	r2, [r3, #20]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	1e5a      	subs	r2, r3, #1
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	409a      	lsls	r2, r3
 8000cba:	4b40      	ldr	r3, [pc, #256]	; (8000dbc <xTaskResumeAll+0x1c0>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	4a3e      	ldr	r2, [pc, #248]	; (8000dbc <xTaskResumeAll+0x1c0>)
 8000cc2:	6013      	str	r3, [r2, #0]
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cc8:	493d      	ldr	r1, [pc, #244]	; (8000dc0 <xTaskResumeAll+0x1c4>)
 8000cca:	4613      	mov	r3, r2
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	4413      	add	r3, r2
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	440b      	add	r3, r1
 8000cd4:	3304      	adds	r3, #4
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	603b      	str	r3, [r7, #0]
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	683a      	ldr	r2, [r7, #0]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	689a      	ldr	r2, [r3, #8]
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	60da      	str	r2, [r3, #12]
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	697a      	ldr	r2, [r7, #20]
 8000cee:	3204      	adds	r2, #4
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	1d1a      	adds	r2, r3, #4
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cfe:	4613      	mov	r3, r2
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	4413      	add	r3, r2
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	4a2e      	ldr	r2, [pc, #184]	; (8000dc0 <xTaskResumeAll+0x1c4>)
 8000d08:	441a      	add	r2, r3
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	615a      	str	r2, [r3, #20]
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d12:	492b      	ldr	r1, [pc, #172]	; (8000dc0 <xTaskResumeAll+0x1c4>)
 8000d14:	4613      	mov	r3, r2
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	4413      	add	r3, r2
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	440b      	add	r3, r1
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	1c59      	adds	r1, r3, #1
 8000d22:	4827      	ldr	r0, [pc, #156]	; (8000dc0 <xTaskResumeAll+0x1c4>)
 8000d24:	4613      	mov	r3, r2
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	4413      	add	r3, r2
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	4403      	add	r3, r0
 8000d2e:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d34:	4b23      	ldr	r3, [pc, #140]	; (8000dc4 <xTaskResumeAll+0x1c8>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d302      	bcc.n	8000d44 <xTaskResumeAll+0x148>
                    {
                        xYieldPending = pdTRUE;
 8000d3e:	4b22      	ldr	r3, [pc, #136]	; (8000dc8 <xTaskResumeAll+0x1cc>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000d44:	4b1c      	ldr	r3, [pc, #112]	; (8000db8 <xTaskResumeAll+0x1bc>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	f47f af70 	bne.w	8000c2e <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <xTaskResumeAll+0x15c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8000d54:	f000 fb68 	bl	8001428 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000d58:	4b1c      	ldr	r3, [pc, #112]	; (8000dcc <xTaskResumeAll+0x1d0>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d010      	beq.n	8000d86 <xTaskResumeAll+0x18a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8000d64:	f000 f836 	bl	8000dd4 <xTaskIncrementTick>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d002      	beq.n	8000d74 <xTaskResumeAll+0x178>
                            {
                                xYieldPending = pdTRUE;
 8000d6e:	4b16      	ldr	r3, [pc, #88]	; (8000dc8 <xTaskResumeAll+0x1cc>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d1f1      	bne.n	8000d64 <xTaskResumeAll+0x168>

                        xPendedTicks = 0;
 8000d80:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <xTaskResumeAll+0x1d0>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8000d86:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <xTaskResumeAll+0x1cc>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d009      	beq.n	8000da2 <xTaskResumeAll+0x1a6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	613b      	str	r3, [r7, #16]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8000d92:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <xTaskResumeAll+0x1d4>)
 8000d94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	f3bf 8f4f 	dsb	sy
 8000d9e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8000da2:	f000 fc83 	bl	80016ac <vPortExitCritical>

    return xAlreadyYielded;
 8000da6:	693b      	ldr	r3, [r7, #16]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3718      	adds	r7, #24
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20000124 	.word	0x20000124
 8000db4:	200000fc 	.word	0x200000fc
 8000db8:	200000bc 	.word	0x200000bc
 8000dbc:	20000104 	.word	0x20000104
 8000dc0:	20000028 	.word	0x20000028
 8000dc4:	20000024 	.word	0x20000024
 8000dc8:	20000110 	.word	0x20000110
 8000dcc:	2000010c 	.word	0x2000010c
 8000dd0:	e000ed04 	.word	0xe000ed04

08000dd4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b088      	sub	sp, #32
 8000dd8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000dde:	4b75      	ldr	r3, [pc, #468]	; (8000fb4 <xTaskIncrementTick+0x1e0>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f040 80dc 	bne.w	8000fa0 <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000de8:	4b73      	ldr	r3, [pc, #460]	; (8000fb8 <xTaskIncrementTick+0x1e4>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	3301      	adds	r3, #1
 8000dee:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000df0:	4a71      	ldr	r2, [pc, #452]	; (8000fb8 <xTaskIncrementTick+0x1e4>)
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d110      	bne.n	8000e1e <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 8000dfc:	4b6f      	ldr	r3, [pc, #444]	; (8000fbc <xTaskIncrementTick+0x1e8>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	617b      	str	r3, [r7, #20]
 8000e02:	4b6f      	ldr	r3, [pc, #444]	; (8000fc0 <xTaskIncrementTick+0x1ec>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a6d      	ldr	r2, [pc, #436]	; (8000fbc <xTaskIncrementTick+0x1e8>)
 8000e08:	6013      	str	r3, [r2, #0]
 8000e0a:	4a6d      	ldr	r2, [pc, #436]	; (8000fc0 <xTaskIncrementTick+0x1ec>)
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	6013      	str	r3, [r2, #0]
 8000e10:	4b6c      	ldr	r3, [pc, #432]	; (8000fc4 <xTaskIncrementTick+0x1f0>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	3301      	adds	r3, #1
 8000e16:	4a6b      	ldr	r2, [pc, #428]	; (8000fc4 <xTaskIncrementTick+0x1f0>)
 8000e18:	6013      	str	r3, [r2, #0]
 8000e1a:	f000 fb05 	bl	8001428 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000e1e:	4b6a      	ldr	r3, [pc, #424]	; (8000fc8 <xTaskIncrementTick+0x1f4>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	f0c0 80a6 	bcc.w	8000f76 <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000e2a:	4b64      	ldr	r3, [pc, #400]	; (8000fbc <xTaskIncrementTick+0x1e8>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d104      	bne.n	8000e3e <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000e34:	4b64      	ldr	r3, [pc, #400]	; (8000fc8 <xTaskIncrementTick+0x1f4>)
 8000e36:	f04f 32ff 	mov.w	r2, #4294967295
 8000e3a:	601a      	str	r2, [r3, #0]
                    break;
 8000e3c:	e09b      	b.n	8000f76 <xTaskIncrementTick+0x1a2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000e3e:	4b5f      	ldr	r3, [pc, #380]	; (8000fbc <xTaskIncrementTick+0x1e8>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	68db      	ldr	r3, [r3, #12]
 8000e46:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	429a      	cmp	r2, r3
 8000e54:	d203      	bcs.n	8000e5e <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000e56:	4a5c      	ldr	r2, [pc, #368]	; (8000fc8 <xTaskIncrementTick+0x1f4>)
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8000e5c:	e08b      	b.n	8000f76 <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	695b      	ldr	r3, [r3, #20]
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	68d2      	ldr	r2, [r2, #12]
 8000e6c:	609a      	str	r2, [r3, #8]
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	68db      	ldr	r3, [r3, #12]
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	6892      	ldr	r2, [r2, #8]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	685a      	ldr	r2, [r3, #4]
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	3304      	adds	r3, #4
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d103      	bne.n	8000e8c <xTaskIncrementTick+0xb8>
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	68da      	ldr	r2, [r3, #12]
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	615a      	str	r2, [r3, #20]
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	1e5a      	subs	r2, r3, #1
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d01e      	beq.n	8000ee2 <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	69db      	ldr	r3, [r3, #28]
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	6a12      	ldr	r2, [r2, #32]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	6a1b      	ldr	r3, [r3, #32]
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	69d2      	ldr	r2, [r2, #28]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	685a      	ldr	r2, [r3, #4]
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	3318      	adds	r3, #24
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d103      	bne.n	8000ed2 <xTaskIncrementTick+0xfe>
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	6a1a      	ldr	r2, [r3, #32]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	629a      	str	r2, [r3, #40]	; 0x28
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	1e5a      	subs	r2, r3, #1
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	409a      	lsls	r2, r3
 8000eea:	4b38      	ldr	r3, [pc, #224]	; (8000fcc <xTaskIncrementTick+0x1f8>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	4a36      	ldr	r2, [pc, #216]	; (8000fcc <xTaskIncrementTick+0x1f8>)
 8000ef2:	6013      	str	r3, [r2, #0]
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ef8:	4935      	ldr	r1, [pc, #212]	; (8000fd0 <xTaskIncrementTick+0x1fc>)
 8000efa:	4613      	mov	r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	4413      	add	r3, r2
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	440b      	add	r3, r1
 8000f04:	3304      	adds	r3, #4
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	603b      	str	r3, [r7, #0]
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	683a      	ldr	r2, [r7, #0]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	689a      	ldr	r2, [r3, #8]
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	60da      	str	r2, [r3, #12]
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	3204      	adds	r2, #4
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	1d1a      	adds	r2, r3, #4
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f2e:	4613      	mov	r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	4413      	add	r3, r2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	4a26      	ldr	r2, [pc, #152]	; (8000fd0 <xTaskIncrementTick+0x1fc>)
 8000f38:	441a      	add	r2, r3
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	615a      	str	r2, [r3, #20]
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f42:	4923      	ldr	r1, [pc, #140]	; (8000fd0 <xTaskIncrementTick+0x1fc>)
 8000f44:	4613      	mov	r3, r2
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	4413      	add	r3, r2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	440b      	add	r3, r1
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	1c59      	adds	r1, r3, #1
 8000f52:	481f      	ldr	r0, [pc, #124]	; (8000fd0 <xTaskIncrementTick+0x1fc>)
 8000f54:	4613      	mov	r3, r2
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	4413      	add	r3, r2
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	4403      	add	r3, r0
 8000f5e:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f64:	4b1b      	ldr	r3, [pc, #108]	; (8000fd4 <xTaskIncrementTick+0x200>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	f4ff af5d 	bcc.w	8000e2a <xTaskIncrementTick+0x56>
                            {
                                xSwitchRequired = pdTRUE;
 8000f70:	2301      	movs	r3, #1
 8000f72:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000f74:	e759      	b.n	8000e2a <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000f76:	4b17      	ldr	r3, [pc, #92]	; (8000fd4 <xTaskIncrementTick+0x200>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f7c:	4914      	ldr	r1, [pc, #80]	; (8000fd0 <xTaskIncrementTick+0x1fc>)
 8000f7e:	4613      	mov	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	4413      	add	r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	440b      	add	r3, r1
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d901      	bls.n	8000f92 <xTaskIncrementTick+0x1be>
                {
                    xSwitchRequired = pdTRUE;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	61fb      	str	r3, [r7, #28]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8000f92:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <xTaskIncrementTick+0x204>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d007      	beq.n	8000faa <xTaskIncrementTick+0x1d6>
                {
                    xSwitchRequired = pdTRUE;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	61fb      	str	r3, [r7, #28]
 8000f9e:	e004      	b.n	8000faa <xTaskIncrementTick+0x1d6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8000fa0:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <xTaskIncrementTick+0x208>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	4a0d      	ldr	r2, [pc, #52]	; (8000fdc <xTaskIncrementTick+0x208>)
 8000fa8:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8000faa:	69fb      	ldr	r3, [r7, #28]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3720      	adds	r7, #32
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000124 	.word	0x20000124
 8000fb8:	20000100 	.word	0x20000100
 8000fbc:	200000b4 	.word	0x200000b4
 8000fc0:	200000b8 	.word	0x200000b8
 8000fc4:	20000114 	.word	0x20000114
 8000fc8:	2000011c 	.word	0x2000011c
 8000fcc:	20000104 	.word	0x20000104
 8000fd0:	20000028 	.word	0x20000028
 8000fd4:	20000024 	.word	0x20000024
 8000fd8:	20000110 	.word	0x20000110
 8000fdc:	2000010c 	.word	0x2000010c

08000fe0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000fe6:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <vTaskSwitchContext+0x78>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d003      	beq.n	8000ff6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8000fee:	4b1b      	ldr	r3, [pc, #108]	; (800105c <vTaskSwitchContext+0x7c>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8000ff4:	e02a      	b.n	800104c <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 8000ff6:	4b19      	ldr	r3, [pc, #100]	; (800105c <vTaskSwitchContext+0x7c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000ffc:	4b18      	ldr	r3, [pc, #96]	; (8001060 <vTaskSwitchContext+0x80>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	fab3 f383 	clz	r3, r3
 8001008:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 800100a:	78fb      	ldrb	r3, [r7, #3]
 800100c:	f1c3 031f 	rsb	r3, r3, #31
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	4613      	mov	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	4413      	add	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	4a11      	ldr	r2, [pc, #68]	; (8001064 <vTaskSwitchContext+0x84>)
 800101e:	4413      	add	r3, r2
 8001020:	60bb      	str	r3, [r7, #8]
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	685a      	ldr	r2, [r3, #4]
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	685a      	ldr	r2, [r3, #4]
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	3308      	adds	r3, #8
 8001034:	429a      	cmp	r2, r3
 8001036:	d104      	bne.n	8001042 <vTaskSwitchContext+0x62>
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	685a      	ldr	r2, [r3, #4]
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	4a07      	ldr	r2, [pc, #28]	; (8001068 <vTaskSwitchContext+0x88>)
 800104a:	6013      	str	r3, [r2, #0]
}
 800104c:	bf00      	nop
 800104e:	3714      	adds	r7, #20
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	20000124 	.word	0x20000124
 800105c:	20000110 	.word	0x20000110
 8001060:	20000104 	.word	0x20000104
 8001064:	20000028 	.word	0x20000028
 8001068:	20000024 	.word	0x20000024

0800106c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001076:	4b07      	ldr	r3, [pc, #28]	; (8001094 <vTaskPlaceOnEventList+0x28>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	3318      	adds	r3, #24
 800107c:	4619      	mov	r1, r3
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff f8a1 	bl	80001c6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001084:	2101      	movs	r1, #1
 8001086:	6838      	ldr	r0, [r7, #0]
 8001088:	f000 f9e8 	bl	800145c <prvAddCurrentTaskToDelayedList>
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000024 	.word	0x20000024

08001098 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001098:	b480      	push	{r7}
 800109a:	b089      	sub	sp, #36	; 0x24
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ac:	617b      	str	r3, [r7, #20]
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	69db      	ldr	r3, [r3, #28]
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	6a12      	ldr	r2, [r2, #32]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	6a1b      	ldr	r3, [r3, #32]
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	69d2      	ldr	r2, [r2, #28]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	685a      	ldr	r2, [r3, #4]
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	3318      	adds	r3, #24
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d103      	bne.n	80010d6 <xTaskRemoveFromEventList+0x3e>
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	6a1a      	ldr	r2, [r3, #32]
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	2200      	movs	r2, #0
 80010da:	629a      	str	r2, [r3, #40]	; 0x28
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	1e5a      	subs	r2, r3, #1
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80010e6:	4b4a      	ldr	r3, [pc, #296]	; (8001210 <xTaskRemoveFromEventList+0x178>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d15e      	bne.n	80011ac <xTaskRemoveFromEventList+0x114>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	68d2      	ldr	r2, [r2, #12]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	68db      	ldr	r3, [r3, #12]
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	6892      	ldr	r2, [r2, #8]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	685a      	ldr	r2, [r3, #4]
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	3304      	adds	r3, #4
 8001110:	429a      	cmp	r2, r3
 8001112:	d103      	bne.n	800111c <xTaskRemoveFromEventList+0x84>
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	68da      	ldr	r2, [r3, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	2200      	movs	r2, #0
 8001120:	615a      	str	r2, [r3, #20]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	1e5a      	subs	r2, r3, #1
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001130:	2201      	movs	r2, #1
 8001132:	409a      	lsls	r2, r3
 8001134:	4b37      	ldr	r3, [pc, #220]	; (8001214 <xTaskRemoveFromEventList+0x17c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4313      	orrs	r3, r2
 800113a:	4a36      	ldr	r2, [pc, #216]	; (8001214 <xTaskRemoveFromEventList+0x17c>)
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001142:	4935      	ldr	r1, [pc, #212]	; (8001218 <xTaskRemoveFromEventList+0x180>)
 8001144:	4613      	mov	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	4413      	add	r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	440b      	add	r3, r1
 800114e:	3304      	adds	r3, #4
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	689a      	ldr	r2, [r3, #8]
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	3204      	adds	r2, #4
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	1d1a      	adds	r2, r3, #4
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001178:	4613      	mov	r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	4413      	add	r3, r2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4a25      	ldr	r2, [pc, #148]	; (8001218 <xTaskRemoveFromEventList+0x180>)
 8001182:	441a      	add	r2, r3
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	615a      	str	r2, [r3, #20]
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800118c:	4922      	ldr	r1, [pc, #136]	; (8001218 <xTaskRemoveFromEventList+0x180>)
 800118e:	4613      	mov	r3, r2
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	4413      	add	r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	440b      	add	r3, r1
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	1c59      	adds	r1, r3, #1
 800119c:	481e      	ldr	r0, [pc, #120]	; (8001218 <xTaskRemoveFromEventList+0x180>)
 800119e:	4613      	mov	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4413      	add	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	4403      	add	r3, r0
 80011a8:	6019      	str	r1, [r3, #0]
 80011aa:	e01b      	b.n	80011e4 <xTaskRemoveFromEventList+0x14c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80011ac:	4b1b      	ldr	r3, [pc, #108]	; (800121c <xTaskRemoveFromEventList+0x184>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	61da      	str	r2, [r3, #28]
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	689a      	ldr	r2, [r3, #8]
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	621a      	str	r2, [r3, #32]
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	3218      	adds	r2, #24
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	f103 0218 	add.w	r2, r3, #24
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	4a11      	ldr	r2, [pc, #68]	; (800121c <xTaskRemoveFromEventList+0x184>)
 80011d8:	629a      	str	r2, [r3, #40]	; 0x28
 80011da:	4b10      	ldr	r3, [pc, #64]	; (800121c <xTaskRemoveFromEventList+0x184>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	3301      	adds	r3, #1
 80011e0:	4a0e      	ldr	r2, [pc, #56]	; (800121c <xTaskRemoveFromEventList+0x184>)
 80011e2:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011e8:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <xTaskRemoveFromEventList+0x188>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d905      	bls.n	80011fe <xTaskRemoveFromEventList+0x166>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80011f2:	2301      	movs	r3, #1
 80011f4:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80011f6:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <xTaskRemoveFromEventList+0x18c>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	e001      	b.n	8001202 <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        xReturn = pdFALSE;
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8001202:	69fb      	ldr	r3, [r7, #28]
}
 8001204:	4618      	mov	r0, r3
 8001206:	3724      	adds	r7, #36	; 0x24
 8001208:	46bd      	mov	sp, r7
 800120a:	bc80      	pop	{r7}
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	20000124 	.word	0x20000124
 8001214:	20000104 	.word	0x20000104
 8001218:	20000028 	.word	0x20000028
 800121c:	200000bc 	.word	0x200000bc
 8001220:	20000024 	.word	0x20000024
 8001224:	20000110 	.word	0x20000110

08001228 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <vTaskInternalSetTimeOutState+0x24>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001238:	4b05      	ldr	r3, [pc, #20]	; (8001250 <vTaskInternalSetTimeOutState+0x28>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	605a      	str	r2, [r3, #4]
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	bc80      	pop	{r7}
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	20000114 	.word	0x20000114
 8001250:	20000100 	.word	0x20000100

08001254 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
 800125e:	f000 fa0d 	bl	800167c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001262:	4b1f      	ldr	r3, [pc, #124]	; (80012e0 <xTaskCheckForTimeOut+0x8c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800127a:	d102      	bne.n	8001282 <xTaskCheckForTimeOut+0x2e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
 8001280:	e026      	b.n	80012d0 <xTaskCheckForTimeOut+0x7c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <xTaskCheckForTimeOut+0x90>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	429a      	cmp	r2, r3
 800128c:	d00a      	beq.n	80012a4 <xTaskCheckForTimeOut+0x50>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	429a      	cmp	r2, r3
 8001296:	d305      	bcc.n	80012a4 <xTaskCheckForTimeOut+0x50>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001298:	2301      	movs	r3, #1
 800129a:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	e015      	b.n	80012d0 <xTaskCheckForTimeOut+0x7c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	68fa      	ldr	r2, [r7, #12]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d20b      	bcs.n	80012c6 <xTaskCheckForTimeOut+0x72>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	1ad2      	subs	r2, r2, r3
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff ffb4 	bl	8001228 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
 80012c4:	e004      	b.n	80012d0 <xTaskCheckForTimeOut+0x7c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80012cc:	2301      	movs	r3, #1
 80012ce:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 80012d0:	f000 f9ec 	bl	80016ac <vPortExitCritical>

    return xReturn;
 80012d4:	697b      	ldr	r3, [r7, #20]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3718      	adds	r7, #24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000100 	.word	0x20000100
 80012e4:	20000114 	.word	0x20000114

080012e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80012ec:	4b03      	ldr	r3, [pc, #12]	; (80012fc <vTaskMissedYield+0x14>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	601a      	str	r2, [r3, #0]
}
 80012f2:	bf00      	nop
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bc80      	pop	{r7}
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	20000110 	.word	0x20000110

08001300 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001308:	f000 f852 	bl	80013b0 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <prvIdleTask+0x28>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d9f9      	bls.n	8001308 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8001314:	4b05      	ldr	r3, [pc, #20]	; (800132c <prvIdleTask+0x2c>)
 8001316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	f3bf 8f4f 	dsb	sy
 8001320:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001324:	e7f0      	b.n	8001308 <prvIdleTask+0x8>
 8001326:	bf00      	nop
 8001328:	20000028 	.word	0x20000028
 800132c:	e000ed04 	.word	0xe000ed04

08001330 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001336:	2300      	movs	r3, #0
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	e00c      	b.n	8001356 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	4613      	mov	r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	4a12      	ldr	r2, [pc, #72]	; (8001390 <prvInitialiseTaskLists+0x60>)
 8001348:	4413      	add	r3, r2
 800134a:	4618      	mov	r0, r3
 800134c:	f7fe ff10 	bl	8000170 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3301      	adds	r3, #1
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2b04      	cmp	r3, #4
 800135a:	d9ef      	bls.n	800133c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800135c:	480d      	ldr	r0, [pc, #52]	; (8001394 <prvInitialiseTaskLists+0x64>)
 800135e:	f7fe ff07 	bl	8000170 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001362:	480d      	ldr	r0, [pc, #52]	; (8001398 <prvInitialiseTaskLists+0x68>)
 8001364:	f7fe ff04 	bl	8000170 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001368:	480c      	ldr	r0, [pc, #48]	; (800139c <prvInitialiseTaskLists+0x6c>)
 800136a:	f7fe ff01 	bl	8000170 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800136e:	480c      	ldr	r0, [pc, #48]	; (80013a0 <prvInitialiseTaskLists+0x70>)
 8001370:	f7fe fefe 	bl	8000170 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8001374:	480b      	ldr	r0, [pc, #44]	; (80013a4 <prvInitialiseTaskLists+0x74>)
 8001376:	f7fe fefb 	bl	8000170 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800137a:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <prvInitialiseTaskLists+0x78>)
 800137c:	4a05      	ldr	r2, [pc, #20]	; (8001394 <prvInitialiseTaskLists+0x64>)
 800137e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001380:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <prvInitialiseTaskLists+0x7c>)
 8001382:	4a05      	ldr	r2, [pc, #20]	; (8001398 <prvInitialiseTaskLists+0x68>)
 8001384:	601a      	str	r2, [r3, #0]
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000028 	.word	0x20000028
 8001394:	2000008c 	.word	0x2000008c
 8001398:	200000a0 	.word	0x200000a0
 800139c:	200000bc 	.word	0x200000bc
 80013a0:	200000d0 	.word	0x200000d0
 80013a4:	200000e8 	.word	0x200000e8
 80013a8:	200000b4 	.word	0x200000b4
 80013ac:	200000b8 	.word	0x200000b8

080013b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80013b6:	e019      	b.n	80013ec <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80013b8:	f000 f960 	bl	800167c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80013bc:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <prvCheckTasksWaitingTermination+0x4c>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3304      	adds	r3, #4
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7fe ff34 	bl	8000236 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80013ce:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <prvCheckTasksWaitingTermination+0x50>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <prvCheckTasksWaitingTermination+0x50>)
 80013d6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80013d8:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <prvCheckTasksWaitingTermination+0x54>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	3b01      	subs	r3, #1
 80013de:	4a09      	ldr	r2, [pc, #36]	; (8001404 <prvCheckTasksWaitingTermination+0x54>)
 80013e0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80013e2:	f000 f963 	bl	80016ac <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f000 f80e 	bl	8001408 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <prvCheckTasksWaitingTermination+0x54>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1e1      	bne.n	80013b8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80013f4:	bf00      	nop
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	200000d0 	.word	0x200000d0
 8001400:	200000fc 	.word	0x200000fc
 8001404:	200000e4 	.word	0x200000e4

08001408 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001414:	4618      	mov	r0, r3
 8001416:	f000 fa6f 	bl	80018f8 <vPortFree>
                vPortFree( pxTCB );
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f000 fa6c 	bl	80018f8 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <prvResetNextTaskUnblockTime+0x2c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d104      	bne.n	8001440 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001436:	4b08      	ldr	r3, [pc, #32]	; (8001458 <prvResetNextTaskUnblockTime+0x30>)
 8001438:	f04f 32ff 	mov.w	r2, #4294967295
 800143c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800143e:	e005      	b.n	800144c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001440:	4b04      	ldr	r3, [pc, #16]	; (8001454 <prvResetNextTaskUnblockTime+0x2c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a03      	ldr	r2, [pc, #12]	; (8001458 <prvResetNextTaskUnblockTime+0x30>)
 800144a:	6013      	str	r3, [r2, #0]
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr
 8001454:	200000b4 	.word	0x200000b4
 8001458:	2000011c 	.word	0x2000011c

0800145c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001466:	4b36      	ldr	r3, [pc, #216]	; (8001540 <prvAddCurrentTaskToDelayedList+0xe4>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800146c:	4b35      	ldr	r3, [pc, #212]	; (8001544 <prvAddCurrentTaskToDelayedList+0xe8>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	3304      	adds	r3, #4
 8001472:	4618      	mov	r0, r3
 8001474:	f7fe fedf 	bl	8000236 <uxListRemove>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d10b      	bne.n	8001496 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800147e:	4b31      	ldr	r3, [pc, #196]	; (8001544 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001484:	2201      	movs	r2, #1
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43da      	mvns	r2, r3
 800148c:	4b2e      	ldr	r3, [pc, #184]	; (8001548 <prvAddCurrentTaskToDelayedList+0xec>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4013      	ands	r3, r2
 8001492:	4a2d      	ldr	r2, [pc, #180]	; (8001548 <prvAddCurrentTaskToDelayedList+0xec>)
 8001494:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800149c:	d124      	bne.n	80014e8 <prvAddCurrentTaskToDelayedList+0x8c>
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d021      	beq.n	80014e8 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80014a4:	4b29      	ldr	r3, [pc, #164]	; (800154c <prvAddCurrentTaskToDelayedList+0xf0>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	4b26      	ldr	r3, [pc, #152]	; (8001544 <prvAddCurrentTaskToDelayedList+0xe8>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	4b24      	ldr	r3, [pc, #144]	; (8001544 <prvAddCurrentTaskToDelayedList+0xe8>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	6892      	ldr	r2, [r2, #8]
 80014ba:	60da      	str	r2, [r3, #12]
 80014bc:	4b21      	ldr	r3, [pc, #132]	; (8001544 <prvAddCurrentTaskToDelayedList+0xe8>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	3204      	adds	r2, #4
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	4b1e      	ldr	r3, [pc, #120]	; (8001544 <prvAddCurrentTaskToDelayedList+0xe8>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	1d1a      	adds	r2, r3, #4
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	609a      	str	r2, [r3, #8]
 80014d2:	4b1c      	ldr	r3, [pc, #112]	; (8001544 <prvAddCurrentTaskToDelayedList+0xe8>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a1d      	ldr	r2, [pc, #116]	; (800154c <prvAddCurrentTaskToDelayedList+0xf0>)
 80014d8:	615a      	str	r2, [r3, #20]
 80014da:	4b1c      	ldr	r3, [pc, #112]	; (800154c <prvAddCurrentTaskToDelayedList+0xf0>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	3301      	adds	r3, #1
 80014e0:	4a1a      	ldr	r2, [pc, #104]	; (800154c <prvAddCurrentTaskToDelayedList+0xf0>)
 80014e2:	6013      	str	r3, [r2, #0]
 80014e4:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80014e6:	e026      	b.n	8001536 <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80014e8:	697a      	ldr	r2, [r7, #20]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80014f0:	4b14      	ldr	r3, [pc, #80]	; (8001544 <prvAddCurrentTaskToDelayedList+0xe8>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	68fa      	ldr	r2, [r7, #12]
 80014f6:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80014f8:	68fa      	ldr	r2, [r7, #12]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d209      	bcs.n	8001514 <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001500:	4b13      	ldr	r3, [pc, #76]	; (8001550 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	3304      	adds	r3, #4
 800150a:	4619      	mov	r1, r3
 800150c:	4610      	mov	r0, r2
 800150e:	f7fe fe5a 	bl	80001c6 <vListInsert>
}
 8001512:	e010      	b.n	8001536 <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001514:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <prvAddCurrentTaskToDelayedList+0xf8>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <prvAddCurrentTaskToDelayedList+0xe8>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	3304      	adds	r3, #4
 800151e:	4619      	mov	r1, r3
 8001520:	4610      	mov	r0, r2
 8001522:	f7fe fe50 	bl	80001c6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8001526:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	429a      	cmp	r2, r3
 800152e:	d202      	bcs.n	8001536 <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 8001530:	4a09      	ldr	r2, [pc, #36]	; (8001558 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	6013      	str	r3, [r2, #0]
}
 8001536:	bf00      	nop
 8001538:	3718      	adds	r7, #24
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000100 	.word	0x20000100
 8001544:	20000024 	.word	0x20000024
 8001548:	20000104 	.word	0x20000104
 800154c:	200000e8 	.word	0x200000e8
 8001550:	200000b8 	.word	0x200000b8
 8001554:	200000b4 	.word	0x200000b4
 8001558:	2000011c 	.word	0x2000011c

0800155c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	3b04      	subs	r3, #4
 800156c:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001574:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	3b04      	subs	r3, #4
 800157a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	f023 0201 	bic.w	r2, r3, #1
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	3b04      	subs	r3, #4
 800158a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800158c:	4a08      	ldr	r2, [pc, #32]	; (80015b0 <pxPortInitialiseStack+0x54>)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	3b14      	subs	r3, #20
 8001596:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	3b20      	subs	r3, #32
 80015a2:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80015a4:	68fb      	ldr	r3, [r7, #12]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3714      	adds	r7, #20
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr
 80015b0:	080015b5 	.word	0x080015b5

080015b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	603b      	str	r3, [r7, #0]
        __asm volatile
 80015be:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80015c2:	f383 8811 	msr	BASEPRI, r3
 80015c6:	f3bf 8f6f 	isb	sy
 80015ca:	f3bf 8f4f 	dsb	sy
 80015ce:	607b      	str	r3, [r7, #4]
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80015d0:	bf00      	nop
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d0fc      	beq.n	80015d2 <prvTaskExitError+0x1e>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr
	...

080015f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80015f0:	4b07      	ldr	r3, [pc, #28]	; (8001610 <pxCurrentTCBConst2>)
 80015f2:	6819      	ldr	r1, [r3, #0]
 80015f4:	6808      	ldr	r0, [r1, #0]
 80015f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80015fa:	f380 8809 	msr	PSP, r0
 80015fe:	f3bf 8f6f 	isb	sy
 8001602:	f04f 0000 	mov.w	r0, #0
 8001606:	f380 8811 	msr	BASEPRI, r0
 800160a:	f04e 0e0d 	orr.w	lr, lr, #13
 800160e:	4770      	bx	lr

08001610 <pxCurrentTCBConst2>:
 8001610:	20000024 	.word	0x20000024
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001614:	bf00      	nop
 8001616:	bf00      	nop

08001618 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8001618:	4806      	ldr	r0, [pc, #24]	; (8001634 <prvPortStartFirstTask+0x1c>)
 800161a:	6800      	ldr	r0, [r0, #0]
 800161c:	6800      	ldr	r0, [r0, #0]
 800161e:	f380 8808 	msr	MSP, r0
 8001622:	b662      	cpsie	i
 8001624:	b661      	cpsie	f
 8001626:	f3bf 8f4f 	dsb	sy
 800162a:	f3bf 8f6f 	isb	sy
 800162e:	df00      	svc	0
 8001630:	bf00      	nop
 8001632:	0000      	.short	0x0000
 8001634:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001638:	bf00      	nop
 800163a:	bf00      	nop

0800163c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
            *pucFirstUserPriorityRegister = ulOriginalPriority;
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8001640:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <xPortStartScheduler+0x38>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a0b      	ldr	r2, [pc, #44]	; (8001674 <xPortStartScheduler+0x38>)
 8001646:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800164a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800164c:	4b09      	ldr	r3, [pc, #36]	; (8001674 <xPortStartScheduler+0x38>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a08      	ldr	r2, [pc, #32]	; (8001674 <xPortStartScheduler+0x38>)
 8001652:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001656:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001658:	f000 f886 	bl	8001768 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800165c:	4b06      	ldr	r3, [pc, #24]	; (8001678 <xPortStartScheduler+0x3c>)
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8001662:	f7ff ffd9 	bl	8001618 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001666:	f7ff fcbb 	bl	8000fe0 <vTaskSwitchContext>
    prvTaskExitError();
 800166a:	f7ff ffa3 	bl	80015b4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800166e:	2300      	movs	r3, #0
}
 8001670:	4618      	mov	r0, r3
 8001672:	bd80      	pop	{r7, pc}
 8001674:	e000ed20 	.word	0xe000ed20
 8001678:	20000004 	.word	0x20000004

0800167c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001686:	f383 8811 	msr	BASEPRI, r3
 800168a:	f3bf 8f6f 	isb	sy
 800168e:	f3bf 8f4f 	dsb	sy
 8001692:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8001694:	4b04      	ldr	r3, [pc, #16]	; (80016a8 <vPortEnterCritical+0x2c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	3301      	adds	r3, #1
 800169a:	4a03      	ldr	r2, [pc, #12]	; (80016a8 <vPortEnterCritical+0x2c>)
 800169c:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr
 80016a8:	20000004 	.word	0x20000004

080016ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 80016b2:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <vPortExitCritical+0x2c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	4a07      	ldr	r2, [pc, #28]	; (80016d8 <vPortExitCritical+0x2c>)
 80016ba:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <vPortExitCritical+0x2c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d104      	bne.n	80016ce <vPortExitCritical+0x22>
 80016c4:	2300      	movs	r3, #0
 80016c6:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr
 80016d8:	20000004 	.word	0x20000004
 80016dc:	00000000 	.word	0x00000000

080016e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80016e0:	f3ef 8009 	mrs	r0, PSP
 80016e4:	f3bf 8f6f 	isb	sy
 80016e8:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <pxCurrentTCBConst>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80016f0:	6010      	str	r0, [r2, #0]
 80016f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80016f6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 80016fa:	f380 8811 	msr	BASEPRI, r0
 80016fe:	f7ff fc6f 	bl	8000fe0 <vTaskSwitchContext>
 8001702:	f04f 0000 	mov.w	r0, #0
 8001706:	f380 8811 	msr	BASEPRI, r0
 800170a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800170e:	6819      	ldr	r1, [r3, #0]
 8001710:	6808      	ldr	r0, [r1, #0]
 8001712:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001716:	f380 8809 	msr	PSP, r0
 800171a:	f3bf 8f6f 	isb	sy
 800171e:	4770      	bx	lr

08001720 <pxCurrentTCBConst>:
 8001720:	20000024 	.word	0x20000024
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001724:	bf00      	nop
 8001726:	bf00      	nop

08001728 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
        __asm volatile
 800172e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001732:	f383 8811 	msr	BASEPRI, r3
 8001736:	f3bf 8f6f 	isb	sy
 800173a:	f3bf 8f4f 	dsb	sy
 800173e:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001740:	f7ff fb48 	bl	8000dd4 <xTaskIncrementTick>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <SysTick_Handler+0x3c>)
 800174c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	2300      	movs	r3, #0
 8001754:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	e000ed04 	.word	0xe000ed04

08001768 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800176c:	4b07      	ldr	r3, [pc, #28]	; (800178c <vPortSetupTimerInterrupt+0x24>)
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001772:	4b07      	ldr	r3, [pc, #28]	; (8001790 <vPortSetupTimerInterrupt+0x28>)
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <vPortSetupTimerInterrupt+0x2c>)
 800177a:	4a07      	ldr	r2, [pc, #28]	; (8001798 <vPortSetupTimerInterrupt+0x30>)
 800177c:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800177e:	4b03      	ldr	r3, [pc, #12]	; (800178c <vPortSetupTimerInterrupt+0x24>)
 8001780:	2207      	movs	r2, #7
 8001782:	601a      	str	r2, [r3, #0]
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr
 800178c:	e000e010 	.word	0xe000e010
 8001790:	e000e018 	.word	0xe000e018
 8001794:	e000e014 	.word	0xe000e014
 8001798:	0001193f 	.word	0x0001193f

0800179c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	60fb      	str	r3, [r7, #12]

    vTaskSuspendAll();
 80017a8:	f7ff fa1a 	bl	8000be0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80017ac:	4b4c      	ldr	r3, [pc, #304]	; (80018e0 <pvPortMalloc+0x144>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80017b4:	f000 f8e0 	bl	8001978 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80017b8:	4b4a      	ldr	r3, [pc, #296]	; (80018e4 <pvPortMalloc+0x148>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4013      	ands	r3, r2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	f040 8086 	bne.w	80018d2 <pvPortMalloc+0x136>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d01e      	beq.n	800180a <pvPortMalloc+0x6e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80017cc:	2208      	movs	r2, #8
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d218      	bcs.n	800180a <pvPortMalloc+0x6e>
            {
                xWantedSize += xHeapStructSize;
 80017d8:	2208      	movs	r2, #8
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4413      	add	r3, r2
 80017de:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d011      	beq.n	800180e <pvPortMalloc+0x72>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f023 0307 	bic.w	r3, r3, #7
 80017f0:	3308      	adds	r3, #8
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d205      	bcs.n	8001804 <pvPortMalloc+0x68>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f023 0307 	bic.w	r3, r3, #7
 80017fe:	3308      	adds	r3, #8
 8001800:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001802:	e004      	b.n	800180e <pvPortMalloc+0x72>
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
                    }
                    else
                    {
                        xWantedSize = 0;
 8001804:	2300      	movs	r3, #0
 8001806:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001808:	e001      	b.n	800180e <pvPortMalloc+0x72>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 800180a:	2300      	movs	r3, #0
 800180c:	607b      	str	r3, [r7, #4]
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d05e      	beq.n	80018d2 <pvPortMalloc+0x136>
 8001814:	4b34      	ldr	r3, [pc, #208]	; (80018e8 <pvPortMalloc+0x14c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	429a      	cmp	r2, r3
 800181c:	d859      	bhi.n	80018d2 <pvPortMalloc+0x136>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800181e:	4b33      	ldr	r3, [pc, #204]	; (80018ec <pvPortMalloc+0x150>)
 8001820:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 8001822:	4b32      	ldr	r3, [pc, #200]	; (80018ec <pvPortMalloc+0x150>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001828:	e004      	b.n	8001834 <pvPortMalloc+0x98>
                {
                    pxPreviousBlock = pxBlock;
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	429a      	cmp	r2, r3
 800183c:	d903      	bls.n	8001846 <pvPortMalloc+0xaa>
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1f1      	bne.n	800182a <pvPortMalloc+0x8e>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8001846:	4b26      	ldr	r3, [pc, #152]	; (80018e0 <pvPortMalloc+0x144>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	697a      	ldr	r2, [r7, #20]
 800184c:	429a      	cmp	r2, r3
 800184e:	d040      	beq.n	80018d2 <pvPortMalloc+0x136>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2208      	movs	r2, #8
 8001856:	4413      	add	r3, r2
 8001858:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	1ad2      	subs	r2, r2, r3
 800186a:	2308      	movs	r3, #8
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	429a      	cmp	r2, r3
 8001870:	d90f      	bls.n	8001892 <pvPortMalloc+0xf6>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4413      	add	r3, r2
 8001878:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	1ad2      	subs	r2, r2, r3
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800188c:	68b8      	ldr	r0, [r7, #8]
 800188e:	f000 f8d5 	bl	8001a3c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001892:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <pvPortMalloc+0x14c>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	4a12      	ldr	r2, [pc, #72]	; (80018e8 <pvPortMalloc+0x14c>)
 800189e:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80018a0:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <pvPortMalloc+0x14c>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <pvPortMalloc+0x154>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d203      	bcs.n	80018b4 <pvPortMalloc+0x118>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80018ac:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <pvPortMalloc+0x14c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a0f      	ldr	r2, [pc, #60]	; (80018f0 <pvPortMalloc+0x154>)
 80018b2:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	685a      	ldr	r2, [r3, #4]
 80018b8:	4b0a      	ldr	r3, [pc, #40]	; (80018e4 <pvPortMalloc+0x148>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	431a      	orrs	r2, r3
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80018c8:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <pvPortMalloc+0x158>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	3301      	adds	r3, #1
 80018ce:	4a09      	ldr	r2, [pc, #36]	; (80018f4 <pvPortMalloc+0x158>)
 80018d0:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80018d2:	f7ff f993 	bl	8000bfc <xTaskResumeAll>
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
 80018d6:	68fb      	ldr	r3, [r7, #12]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20002130 	.word	0x20002130
 80018e4:	20002144 	.word	0x20002144
 80018e8:	20002134 	.word	0x20002134
 80018ec:	20002128 	.word	0x20002128
 80018f0:	20002138 	.word	0x20002138
 80018f4:	2000213c 	.word	0x2000213c

080018f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d02c      	beq.n	8001964 <vPortFree+0x6c>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800190a:	2308      	movs	r3, #8
 800190c:	425b      	negs	r3, r3
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	4413      	add	r3, r2
 8001912:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	4b13      	ldr	r3, [pc, #76]	; (800196c <vPortFree+0x74>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4013      	ands	r3, r2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d01e      	beq.n	8001964 <vPortFree+0x6c>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d11a      	bne.n	8001964 <vPortFree+0x6c>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	685a      	ldr	r2, [r3, #4]
 8001932:	4b0e      	ldr	r3, [pc, #56]	; (800196c <vPortFree+0x74>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	43db      	mvns	r3, r3
 8001938:	401a      	ands	r2, r3
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 800193e:	f7ff f94f 	bl	8000be0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <vPortFree+0x78>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4413      	add	r3, r2
 800194c:	4a08      	ldr	r2, [pc, #32]	; (8001970 <vPortFree+0x78>)
 800194e:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001950:	68b8      	ldr	r0, [r7, #8]
 8001952:	f000 f873 	bl	8001a3c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8001956:	4b07      	ldr	r3, [pc, #28]	; (8001974 <vPortFree+0x7c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	3301      	adds	r3, #1
 800195c:	4a05      	ldr	r2, [pc, #20]	; (8001974 <vPortFree+0x7c>)
 800195e:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8001960:	f7ff f94c 	bl	8000bfc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8001964:	bf00      	nop
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20002144 	.word	0x20002144
 8001970:	20002134 	.word	0x20002134
 8001974:	20002140 	.word	0x20002140

08001978 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800197e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001982:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8001984:	4b27      	ldr	r3, [pc, #156]	; (8001a24 <prvHeapInit+0xac>)
 8001986:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	2b00      	cmp	r3, #0
 8001990:	d00c      	beq.n	80019ac <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	3307      	adds	r3, #7
 8001996:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f023 0307 	bic.w	r3, r3, #7
 800199e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80019a0:	68ba      	ldr	r2, [r7, #8]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	4a1f      	ldr	r2, [pc, #124]	; (8001a24 <prvHeapInit+0xac>)
 80019a8:	4413      	add	r3, r2
 80019aa:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80019b0:	4a1d      	ldr	r2, [pc, #116]	; (8001a28 <prvHeapInit+0xb0>)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80019b6:	4b1c      	ldr	r3, [pc, #112]	; (8001a28 <prvHeapInit+0xb0>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	68ba      	ldr	r2, [r7, #8]
 80019c0:	4413      	add	r3, r2
 80019c2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80019c4:	2208      	movs	r2, #8
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	1a9b      	subs	r3, r3, r2
 80019ca:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f023 0307 	bic.w	r3, r3, #7
 80019d2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4a15      	ldr	r2, [pc, #84]	; (8001a2c <prvHeapInit+0xb4>)
 80019d8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80019da:	4b14      	ldr	r3, [pc, #80]	; (8001a2c <prvHeapInit+0xb4>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2200      	movs	r2, #0
 80019e0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80019e2:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <prvHeapInit+0xb4>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	1ad2      	subs	r2, r2, r3
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80019f8:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <prvHeapInit+0xb4>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	4a0a      	ldr	r2, [pc, #40]	; (8001a30 <prvHeapInit+0xb8>)
 8001a06:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	4a09      	ldr	r2, [pc, #36]	; (8001a34 <prvHeapInit+0xbc>)
 8001a0e:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001a10:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <prvHeapInit+0xc0>)
 8001a12:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001a16:	601a      	str	r2, [r3, #0]
}
 8001a18:	bf00      	nop
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	20000128 	.word	0x20000128
 8001a28:	20002128 	.word	0x20002128
 8001a2c:	20002130 	.word	0x20002130
 8001a30:	20002138 	.word	0x20002138
 8001a34:	20002134 	.word	0x20002134
 8001a38:	20002144 	.word	0x20002144

08001a3c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001a44:	4b27      	ldr	r3, [pc, #156]	; (8001ae4 <prvInsertBlockIntoFreeList+0xa8>)
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	e002      	b.n	8001a50 <prvInsertBlockIntoFreeList+0x14>
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d8f7      	bhi.n	8001a4a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	4413      	add	r3, r2
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d108      	bne.n	8001a7e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	441a      	add	r2, r3
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	68ba      	ldr	r2, [r7, #8]
 8001a88:	441a      	add	r2, r3
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d118      	bne.n	8001ac4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	4b14      	ldr	r3, [pc, #80]	; (8001ae8 <prvInsertBlockIntoFreeList+0xac>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d00d      	beq.n	8001aba <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685a      	ldr	r2, [r3, #4]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	441a      	add	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	e008      	b.n	8001acc <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001aba:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <prvInsertBlockIntoFreeList+0xac>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	e003      	b.n	8001acc <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d002      	beq.n	8001ada <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001ada:	bf00      	nop
 8001adc:	3714      	adds	r7, #20
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr
 8001ae4:	20002128 	.word	0x20002128
 8001ae8:	20002130 	.word	0x20002130

08001aec <EXTI0_IRQHandler>:

/*==========================================================*/
/* ISR FUNCTIONS */
/*==========================================================*/
void EXTI0_IRQHandler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<0);
 8001af0:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <EXTI0_IRQHandler+0x1c>)
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	4a04      	ldr	r2, [pc, #16]	; (8001b08 <EXTI0_IRQHandler+0x1c>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[0]();
 8001afc:	4b03      	ldr	r3, [pc, #12]	; (8001b0c <EXTI0_IRQHandler+0x20>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4798      	blx	r3

}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40010400 	.word	0x40010400
 8001b0c:	20002158 	.word	0x20002158

08001b10 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<1);
 8001b14:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <EXTI1_IRQHandler+0x1c>)
 8001b16:	695b      	ldr	r3, [r3, #20]
 8001b18:	4a04      	ldr	r2, [pc, #16]	; (8001b2c <EXTI1_IRQHandler+0x1c>)
 8001b1a:	f043 0302 	orr.w	r3, r3, #2
 8001b1e:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[1]();
 8001b20:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <EXTI1_IRQHandler+0x20>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	4798      	blx	r3

}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40010400 	.word	0x40010400
 8001b30:	20002158 	.word	0x20002158

08001b34 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<2);
 8001b38:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <EXTI2_IRQHandler+0x1c>)
 8001b3a:	695b      	ldr	r3, [r3, #20]
 8001b3c:	4a04      	ldr	r2, [pc, #16]	; (8001b50 <EXTI2_IRQHandler+0x1c>)
 8001b3e:	f043 0304 	orr.w	r3, r3, #4
 8001b42:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[2]();
 8001b44:	4b03      	ldr	r3, [pc, #12]	; (8001b54 <EXTI2_IRQHandler+0x20>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	4798      	blx	r3
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40010400 	.word	0x40010400
 8001b54:	20002158 	.word	0x20002158

08001b58 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<3);
 8001b5c:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <EXTI3_IRQHandler+0x1c>)
 8001b5e:	695b      	ldr	r3, [r3, #20]
 8001b60:	4a04      	ldr	r2, [pc, #16]	; (8001b74 <EXTI3_IRQHandler+0x1c>)
 8001b62:	f043 0308 	orr.w	r3, r3, #8
 8001b66:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[3]();
 8001b68:	4b03      	ldr	r3, [pc, #12]	; (8001b78 <EXTI3_IRQHandler+0x20>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	4798      	blx	r3
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40010400 	.word	0x40010400
 8001b78:	20002158 	.word	0x20002158

08001b7c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<4);
 8001b80:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <EXTI4_IRQHandler+0x1c>)
 8001b82:	695b      	ldr	r3, [r3, #20]
 8001b84:	4a04      	ldr	r2, [pc, #16]	; (8001b98 <EXTI4_IRQHandler+0x1c>)
 8001b86:	f043 0310 	orr.w	r3, r3, #16
 8001b8a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[4]();
 8001b8c:	4b03      	ldr	r3, [pc, #12]	; (8001b9c <EXTI4_IRQHandler+0x20>)
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	4798      	blx	r3
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40010400 	.word	0x40010400
 8001b9c:	20002158 	.word	0x20002158

08001ba0 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	if(EXTI->PR & 1<<5) { EXTI->PR |=(1<<5) ; GP_IRQ_CALLBACK[5](); }
 8001ba4:	4b26      	ldr	r3, [pc, #152]	; (8001c40 <EXTI9_5_IRQHandler+0xa0>)
 8001ba6:	695b      	ldr	r3, [r3, #20]
 8001ba8:	f003 0320 	and.w	r3, r3, #32
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d008      	beq.n	8001bc2 <EXTI9_5_IRQHandler+0x22>
 8001bb0:	4b23      	ldr	r3, [pc, #140]	; (8001c40 <EXTI9_5_IRQHandler+0xa0>)
 8001bb2:	695b      	ldr	r3, [r3, #20]
 8001bb4:	4a22      	ldr	r2, [pc, #136]	; (8001c40 <EXTI9_5_IRQHandler+0xa0>)
 8001bb6:	f043 0320 	orr.w	r3, r3, #32
 8001bba:	6153      	str	r3, [r2, #20]
 8001bbc:	4b21      	ldr	r3, [pc, #132]	; (8001c44 <EXTI9_5_IRQHandler+0xa4>)
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	4798      	blx	r3
	if(EXTI->PR & 1<<6) { EXTI->PR |=(1<<6) ; GP_IRQ_CALLBACK[6](); }
 8001bc2:	4b1f      	ldr	r3, [pc, #124]	; (8001c40 <EXTI9_5_IRQHandler+0xa0>)
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d008      	beq.n	8001be0 <EXTI9_5_IRQHandler+0x40>
 8001bce:	4b1c      	ldr	r3, [pc, #112]	; (8001c40 <EXTI9_5_IRQHandler+0xa0>)
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	4a1b      	ldr	r2, [pc, #108]	; (8001c40 <EXTI9_5_IRQHandler+0xa0>)
 8001bd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bd8:	6153      	str	r3, [r2, #20]
 8001bda:	4b1a      	ldr	r3, [pc, #104]	; (8001c44 <EXTI9_5_IRQHandler+0xa4>)
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	4798      	blx	r3
	if(EXTI->PR & 1<<7) { EXTI->PR |=(1<<7) ; GP_IRQ_CALLBACK[7](); }
 8001be0:	4b17      	ldr	r3, [pc, #92]	; (8001c40 <EXTI9_5_IRQHandler+0xa0>)
 8001be2:	695b      	ldr	r3, [r3, #20]
 8001be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d008      	beq.n	8001bfe <EXTI9_5_IRQHandler+0x5e>
 8001bec:	4b14      	ldr	r3, [pc, #80]	; (8001c40 <EXTI9_5_IRQHandler+0xa0>)
 8001bee:	695b      	ldr	r3, [r3, #20]
 8001bf0:	4a13      	ldr	r2, [pc, #76]	; (8001c40 <EXTI9_5_IRQHandler+0xa0>)
 8001bf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bf6:	6153      	str	r3, [r2, #20]
 8001bf8:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <EXTI9_5_IRQHandler+0xa4>)
 8001bfa:	69db      	ldr	r3, [r3, #28]
 8001bfc:	4798      	blx	r3
	if(EXTI->PR & 1<<8) { EXTI->PR |=(1<<8) ; GP_IRQ_CALLBACK[8](); }
 8001bfe:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <EXTI9_5_IRQHandler+0xa0>)
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d008      	beq.n	8001c1c <EXTI9_5_IRQHandler+0x7c>
 8001c0a:	4b0d      	ldr	r3, [pc, #52]	; (8001c40 <EXTI9_5_IRQHandler+0xa0>)
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	4a0c      	ldr	r2, [pc, #48]	; (8001c40 <EXTI9_5_IRQHandler+0xa0>)
 8001c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c14:	6153      	str	r3, [r2, #20]
 8001c16:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <EXTI9_5_IRQHandler+0xa4>)
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	4798      	blx	r3
	if(EXTI->PR & 1<<9) { EXTI->PR |=(1<<9) ; GP_IRQ_CALLBACK[9](); }
 8001c1c:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <EXTI9_5_IRQHandler+0xa0>)
 8001c1e:	695b      	ldr	r3, [r3, #20]
 8001c20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d008      	beq.n	8001c3a <EXTI9_5_IRQHandler+0x9a>
 8001c28:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <EXTI9_5_IRQHandler+0xa0>)
 8001c2a:	695b      	ldr	r3, [r3, #20]
 8001c2c:	4a04      	ldr	r2, [pc, #16]	; (8001c40 <EXTI9_5_IRQHandler+0xa0>)
 8001c2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c32:	6153      	str	r3, [r2, #20]
 8001c34:	4b03      	ldr	r3, [pc, #12]	; (8001c44 <EXTI9_5_IRQHandler+0xa4>)
 8001c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c38:	4798      	blx	r3

}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40010400 	.word	0x40010400
 8001c44:	20002158 	.word	0x20002158

08001c48 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<0);
 8001c4c:	4b04      	ldr	r3, [pc, #16]	; (8001c60 <EXTI15_10_IRQHandler+0x18>)
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	4a03      	ldr	r2, [pc, #12]	; (8001c60 <EXTI15_10_IRQHandler+0x18>)
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	6153      	str	r3, [r2, #20]

}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr
 8001c60:	40010400 	.word	0x40010400

08001c64 <USART1_IRQHandler>:



//ISR
void USART1_IRQHandler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
	Global_UART_Config[0].P_IRQ_Call_Back ();
 8001c68:	4b02      	ldr	r3, [pc, #8]	; (8001c74 <USART1_IRQHandler+0x10>)
 8001c6a:	691b      	ldr	r3, [r3, #16]
 8001c6c:	4798      	blx	r3

}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20002194 	.word	0x20002194

08001c78 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
	Global_UART_Config[1].P_IRQ_Call_Back ();
 8001c7c:	4b02      	ldr	r3, [pc, #8]	; (8001c88 <USART2_IRQHandler+0x10>)
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c80:	4798      	blx	r3

}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20002194 	.word	0x20002194

08001c8c <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
	Global_UART_Config[2].P_IRQ_Call_Back ();
 8001c90:	4b02      	ldr	r3, [pc, #8]	; (8001c9c <USART3_IRQHandler+0x10>)
 8001c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c94:	4798      	blx	r3

}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20002194 	.word	0x20002194

08001ca0 <Get_CRLH_Postion>:

#include "STM32F103C6_GPIO_DRIVERS.h"


uint8_t Get_CRLH_Postion(uint16_t PinNumber)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 8001caa:	88fb      	ldrh	r3, [r7, #6]
 8001cac:	2b80      	cmp	r3, #128	; 0x80
 8001cae:	d042      	beq.n	8001d36 <Get_CRLH_Postion+0x96>
 8001cb0:	2b80      	cmp	r3, #128	; 0x80
 8001cb2:	dc11      	bgt.n	8001cd8 <Get_CRLH_Postion+0x38>
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	d036      	beq.n	8001d26 <Get_CRLH_Postion+0x86>
 8001cb8:	2b08      	cmp	r3, #8
 8001cba:	dc06      	bgt.n	8001cca <Get_CRLH_Postion+0x2a>
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d02e      	beq.n	8001d1e <Get_CRLH_Postion+0x7e>
 8001cc0:	2b04      	cmp	r3, #4
 8001cc2:	d02e      	beq.n	8001d22 <Get_CRLH_Postion+0x82>
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d028      	beq.n	8001d1a <Get_CRLH_Postion+0x7a>
 8001cc8:	e047      	b.n	8001d5a <Get_CRLH_Postion+0xba>
 8001cca:	2b20      	cmp	r3, #32
 8001ccc:	d02f      	beq.n	8001d2e <Get_CRLH_Postion+0x8e>
 8001cce:	2b40      	cmp	r3, #64	; 0x40
 8001cd0:	d02f      	beq.n	8001d32 <Get_CRLH_Postion+0x92>
 8001cd2:	2b10      	cmp	r3, #16
 8001cd4:	d029      	beq.n	8001d2a <Get_CRLH_Postion+0x8a>
 8001cd6:	e040      	b.n	8001d5a <Get_CRLH_Postion+0xba>
 8001cd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cdc:	d033      	beq.n	8001d46 <Get_CRLH_Postion+0xa6>
 8001cde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ce2:	dc09      	bgt.n	8001cf8 <Get_CRLH_Postion+0x58>
 8001ce4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ce8:	d029      	beq.n	8001d3e <Get_CRLH_Postion+0x9e>
 8001cea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cee:	d028      	beq.n	8001d42 <Get_CRLH_Postion+0xa2>
 8001cf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cf4:	d021      	beq.n	8001d3a <Get_CRLH_Postion+0x9a>
 8001cf6:	e030      	b.n	8001d5a <Get_CRLH_Postion+0xba>
 8001cf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cfc:	d027      	beq.n	8001d4e <Get_CRLH_Postion+0xae>
 8001cfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d02:	dc03      	bgt.n	8001d0c <Get_CRLH_Postion+0x6c>
 8001d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d08:	d01f      	beq.n	8001d4a <Get_CRLH_Postion+0xaa>
 8001d0a:	e026      	b.n	8001d5a <Get_CRLH_Postion+0xba>
 8001d0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d10:	d01f      	beq.n	8001d52 <Get_CRLH_Postion+0xb2>
 8001d12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d16:	d01e      	beq.n	8001d56 <Get_CRLH_Postion+0xb6>
 8001d18:	e01f      	b.n	8001d5a <Get_CRLH_Postion+0xba>
	{
	case GPIO_PIN_0:
		return 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	e01e      	b.n	8001d5c <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_1:
		return 4;
 8001d1e:	2304      	movs	r3, #4
 8001d20:	e01c      	b.n	8001d5c <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_2:
		return 8;
 8001d22:	2308      	movs	r3, #8
 8001d24:	e01a      	b.n	8001d5c <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_3:
		return 12;
 8001d26:	230c      	movs	r3, #12
 8001d28:	e018      	b.n	8001d5c <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_4:
		return 16;
 8001d2a:	2310      	movs	r3, #16
 8001d2c:	e016      	b.n	8001d5c <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_5:
		return 20;
 8001d2e:	2314      	movs	r3, #20
 8001d30:	e014      	b.n	8001d5c <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_6:
		return 24;
 8001d32:	2318      	movs	r3, #24
 8001d34:	e012      	b.n	8001d5c <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_7:
		return 28;
 8001d36:	231c      	movs	r3, #28
 8001d38:	e010      	b.n	8001d5c <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_8:
		return 0;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	e00e      	b.n	8001d5c <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_9:
		return 4;
 8001d3e:	2304      	movs	r3, #4
 8001d40:	e00c      	b.n	8001d5c <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_10:
		return 8;
 8001d42:	2308      	movs	r3, #8
 8001d44:	e00a      	b.n	8001d5c <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_11:
		return 12;
 8001d46:	230c      	movs	r3, #12
 8001d48:	e008      	b.n	8001d5c <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_12:
		return 16;
 8001d4a:	2310      	movs	r3, #16
 8001d4c:	e006      	b.n	8001d5c <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_13:
		return 20;
 8001d4e:	2314      	movs	r3, #20
 8001d50:	e004      	b.n	8001d5c <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_14:
		return 24;
 8001d52:	2318      	movs	r3, #24
 8001d54:	e002      	b.n	8001d5c <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_15:
		return 28;
 8001d56:	231c      	movs	r3, #28
 8001d58:	e000      	b.n	8001d5c <Get_CRLH_Postion+0xbc>
		break;
	default:
		return 0;
 8001d5a:	2300      	movs	r3, #0
		break;

	}
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bc80      	pop	{r7}
 8001d64:	4770      	bx	lr

08001d66 <MCAL_GPIO_Init>:
 * note -                   -stmf103c6 MCU has GPIO A,B,C,D,E Modules
 *                           but LQFP48 Package has only GPIO A,B, Part of C/D exported external pins
 */
/**================================================================= */
void MCAL_GPIO_Init( GPIO_TypeDef *GPIOx , GPIO_Pin_Configure_t *Pin_Config )
{
 8001d66:	b590      	push	{r4, r7, lr}
 8001d68:	b085      	sub	sp, #20
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
 8001d6e:	6039      	str	r1, [r7, #0]

	//To Init Any Pins Must Write On Port configuration register low (GPIOx_CRL) 0>>>7
	//Or register low (GPIOx_CRH) 8>>>15
	//We Determine The Position Should Write On It In  configuration register By Determine First Position Pin

	volatile uint32_t *ConfigureRegister = NULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	60bb      	str	r3, [r7, #8]
	uint8_t   ConfigurePin=0;     //In This Variable We Store The Configure Pin
 8001d74:	2300      	movs	r3, #0
 8001d76:	73fb      	strb	r3, [r7, #15]

	ConfigureRegister = (Pin_Config->GPIO_Pin_Number < GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH ;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	881b      	ldrh	r3, [r3, #0]
 8001d7c:	2bff      	cmp	r3, #255	; 0xff
 8001d7e:	d801      	bhi.n	8001d84 <MCAL_GPIO_Init+0x1e>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	e001      	b.n	8001d88 <MCAL_GPIO_Init+0x22>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3304      	adds	r3, #4
 8001d88:	60bb      	str	r3, [r7, #8]
	//Clear CNF & MODE
	*(ConfigureRegister) &=~(0xf<<Get_CRLH_Postion(Pin_Config->GPIO_Pin_Number));
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	881b      	ldrh	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff ff86 	bl	8001ca0 <Get_CRLH_Postion>
 8001d94:	4603      	mov	r3, r0
 8001d96:	461a      	mov	r2, r3
 8001d98:	230f      	movs	r3, #15
 8001d9a:	4093      	lsls	r3, r2
 8001d9c:	43da      	mvns	r2, r3
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	401a      	ands	r2, r3
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	601a      	str	r2, [r3, #0]

	if (Pin_Config->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD || Pin_Config->GPIO_MODE ==GPIO_MODE_OUTPUT_AF_PP || Pin_Config->GPIO_MODE ==GPIO_MODE_OUTPUT_OD || Pin_Config->GPIO_MODE ==GPIO_MODE_OUTPUT_PP)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	789b      	ldrb	r3, [r3, #2]
 8001dac:	2b07      	cmp	r3, #7
 8001dae:	d00b      	beq.n	8001dc8 <MCAL_GPIO_Init+0x62>
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	789b      	ldrb	r3, [r3, #2]
 8001db4:	2b06      	cmp	r3, #6
 8001db6:	d007      	beq.n	8001dc8 <MCAL_GPIO_Init+0x62>
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	789b      	ldrb	r3, [r3, #2]
 8001dbc:	2b05      	cmp	r3, #5
 8001dbe:	d003      	beq.n	8001dc8 <MCAL_GPIO_Init+0x62>
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	789b      	ldrb	r3, [r3, #2]
 8001dc4:	2b04      	cmp	r3, #4
 8001dc6:	d10e      	bne.n	8001de6 <MCAL_GPIO_Init+0x80>
	{

		//I sure The User Want Make The Pin As Output & in Case Output Should Configure Mode(Speed) & CNF(State)
		ConfigurePin = ((( (Pin_Config->GPIO_MODE - 4)<<2) |(Pin_Config->GPIO_OUTPUT_SPEED)) & 0x0f); //Shift 2 to Set The CNF Bits
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	789b      	ldrb	r3, [r3, #2]
 8001dcc:	3b04      	subs	r3, #4
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	b25a      	sxtb	r2, r3
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	78db      	ldrb	r3, [r3, #3]
 8001dd6:	b25b      	sxtb	r3, r3
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	b25b      	sxtb	r3, r3
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	f003 030f 	and.w	r3, r3, #15
 8001de2:	73fb      	strb	r3, [r7, #15]
 8001de4:	e028      	b.n	8001e38 <MCAL_GPIO_Init+0xd2>

	}

	else  //I sure The User Want Make The Pin As Input & in Case input Should Configure Mode(Speed)=00 & CNF(State)
	{
		if(Pin_Config->GPIO_MODE == GPIO_MODE_INPUT_FLO || GPIO_MODE_Analog)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	789b      	ldrb	r3, [r3, #2]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d107      	bne.n	8001dfe <MCAL_GPIO_Init+0x98>
		{
			ConfigurePin = (( ( (Pin_Config->GPIO_MODE) <<2) | 0x0) & 0x0F);      //Shift 2 to Set The CNF Bits
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	789b      	ldrb	r3, [r3, #2]
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	f003 030f 	and.w	r3, r3, #15
 8001dfa:	73fb      	strb	r3, [r7, #15]
 8001dfc:	e01c      	b.n	8001e38 <MCAL_GPIO_Init+0xd2>
		}

		else if(Pin_Config->GPIO_MODE == GPIO_MODE_AF_INPUT)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	789b      	ldrb	r3, [r3, #2]
 8001e02:	2b08      	cmp	r3, #8
 8001e04:	d102      	bne.n	8001e0c <MCAL_GPIO_Init+0xa6>
		{
			ConfigurePin = (( ( (GPIO_MODE_INPUT_FLO) <<2) | 0x0) & 0x0f);      //Shift 2 to Set The CNF Bits
 8001e06:	2304      	movs	r3, #4
 8001e08:	73fb      	strb	r3, [r7, #15]
 8001e0a:	e015      	b.n	8001e38 <MCAL_GPIO_Init+0xd2>
		}
		else  //PullUp Or PullDown
		{
			ConfigurePin = ( (((GPIO_MODE_INPUT_PU)<<2  ) |  0x0) & 0x0f);
 8001e0c:	2308      	movs	r3, #8
 8001e0e:	73fb      	strb	r3, [r7, #15]
			// 20. Port bit configuration table
			/*In Case GPIO_MODE_INPUT_PU OR GPIO_MODE_INPUT_PD We Put The Same Value 10 In CNF
			And Go To ODR IF GPIO_MODE_INPUT_PU Put 1 And If GPIO_MODE_INPUT_PD Put In ODR 0 Shifting By Bin Number*/
			if(Pin_Config->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	789b      	ldrb	r3, [r3, #2]
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d107      	bne.n	8001e28 <MCAL_GPIO_Init+0xc2>
			{
				GPIOx->ODR |=(Pin_Config->GPIO_Pin_Number); //Not Making Shifting because The Pin Number Already Shifted in Header
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	8812      	ldrh	r2, [r2, #0]
 8001e20:	431a      	orrs	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	60da      	str	r2, [r3, #12]
 8001e26:	e007      	b.n	8001e38 <MCAL_GPIO_Init+0xd2>
			}
			else //GPIO_MODE_INPUT_PD
			{
				GPIOx->ODR &=~(Pin_Config->GPIO_Pin_Number);//Not Making Shifting because The Pin Number Already Shifted in Header
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	8812      	ldrh	r2, [r2, #0]
 8001e30:	43d2      	mvns	r2, r2
 8001e32:	401a      	ands	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	60da      	str	r2, [r3, #12]
			}
		}
	}
	//Write On CRH Or CLH
	*(ConfigureRegister) |=( ConfigurePin << Get_CRLH_Postion(Pin_Config->GPIO_Pin_Number) );
 8001e38:	7bfc      	ldrb	r4, [r7, #15]
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	881b      	ldrh	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff ff2e 	bl	8001ca0 <Get_CRLH_Postion>
 8001e44:	4603      	mov	r3, r0
 8001e46:	fa04 f203 	lsl.w	r2, r4, r3
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	601a      	str	r2, [r3, #0]
}
 8001e54:	bf00      	nop
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd90      	pop	{r4, r7, pc}

08001e5c <MCAL_GPIO_Read_Pin>:
 * @retval -                -the input pin value (tow values based on @ref GPIO_PIN_State)
 * note -                   -none
 */
/**================================================================= */
uint8_t MCAL_GPIO_Read_Pin( GPIO_TypeDef *GPIOx , uint16_t Pin_Number )
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	460b      	mov	r3, r1
 8001e66:	807b      	strh	r3, [r7, #2]

	uint8_t PinState =0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	73fb      	strb	r3, [r7, #15]
	if( (GPIOx->IDR & Pin_Number) != (uint32_t)GPIO_PIN_FALSE )
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	887b      	ldrh	r3, [r7, #2]
 8001e72:	4013      	ands	r3, r2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d002      	beq.n	8001e7e <MCAL_GPIO_Read_Pin+0x22>
	{
		PinState = GPIO_PIN_TRUE;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	73fb      	strb	r3, [r7, #15]
 8001e7c:	e001      	b.n	8001e82 <MCAL_GPIO_Read_Pin+0x26>
	}
	else
	{
		PinState = GPIO_PIN_FALSE;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	73fb      	strb	r3, [r7, #15]
	}
	return PinState;
 8001e82:	7bfb      	ldrb	r3, [r7, #15]

}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr

08001e8e <MCAL_GPIO_WritePin>:
 * @retval -                -the input pin value (tow values based on @ref GPIO_PIN_State)
 * note -                   -none
 */
/**================================================================= */
void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx , uint16_t Pin_Number , uint8_t Value)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
 8001e96:	460b      	mov	r3, r1
 8001e98:	807b      	strh	r3, [r7, #2]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	707b      	strb	r3, [r7, #1]
	if(Value != GPIO_PIN_FALSE )
 8001e9e:	787b      	ldrb	r3, [r7, #1]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d006      	beq.n	8001eb2 <MCAL_GPIO_WritePin+0x24>
	{
		GPIOx->ODR |=(uint32_t) (Pin_Number);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68da      	ldr	r2, [r3, #12]
 8001ea8:	887b      	ldrh	r3, [r7, #2]
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	60da      	str	r2, [r3, #12]
	}
	else
	{
		GPIOx->ODR &=~(uint32_t)(Pin_Number);
	}
}
 8001eb0:	e006      	b.n	8001ec0 <MCAL_GPIO_WritePin+0x32>
		GPIOx->ODR &=~(uint32_t)(Pin_Number);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	68da      	ldr	r2, [r3, #12]
 8001eb6:	887b      	ldrh	r3, [r7, #2]
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	401a      	ands	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	60da      	str	r2, [r3, #12]
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr
	...

08001ecc <HW_Init>:

uint8_t Button_Curr_State = 0;
uint8_t Button_Prev_State=0;

void HW_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0

	//led pin init as output pin
	GPIO_Pin_Configure_t PINC13CFG;
	PINC13CFG.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8001ed2:	2304      	movs	r3, #4
 8001ed4:	71bb      	strb	r3, [r7, #6]
	PINC13CFG.GPIO_Pin_Number = GPIO_PIN_13;
 8001ed6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eda:	80bb      	strh	r3, [r7, #4]
	PINC13CFG.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8001edc:	2301      	movs	r3, #1
 8001ede:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOC, &PINC13CFG);
 8001ee0:	1d3b      	adds	r3, r7, #4
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4808      	ldr	r0, [pc, #32]	; (8001f08 <HW_Init+0x3c>)
 8001ee6:	f7ff ff3e 	bl	8001d66 <MCAL_GPIO_Init>

	//Button pin init as input pin
	GPIO_Pin_Configure_t PIN15CFG;
	PIN15CFG.GPIO_MODE = GPIO_MODE_INPUT_PD;
 8001eea:	2303      	movs	r3, #3
 8001eec:	70bb      	strb	r3, [r7, #2]
	PIN15CFG.GPIO_Pin_Number=GPIO_PIN_15;
 8001eee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ef2:	803b      	strh	r3, [r7, #0]
	MCAL_GPIO_Init(GPIOC, &PIN15CFG);
 8001ef4:	463b      	mov	r3, r7
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4803      	ldr	r0, [pc, #12]	; (8001f08 <HW_Init+0x3c>)
 8001efa:	f7ff ff34 	bl	8001d66 <MCAL_GPIO_Init>

}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40011000 	.word	0x40011000

08001f0c <main>:




int main(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af02      	add	r7, sp, #8

	RCC_GPIOC_CLOCK_EN();
 8001f12:	4b14      	ldr	r3, [pc, #80]	; (8001f64 <main+0x58>)
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	4a13      	ldr	r2, [pc, #76]	; (8001f64 <main+0x58>)
 8001f18:	f043 0310 	orr.w	r3, r3, #16
 8001f1c:	6193      	str	r3, [r2, #24]
	HW_Init();
 8001f1e:	f7ff ffd5 	bl	8001ecc <HW_Init>


	//tasks creation
	xTaskCreate(vTaskButtonHandler, "Monitor Button", 128, NULL, 1, vTaskButtonHandel);
 8001f22:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <main+0x5c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	9301      	str	r3, [sp, #4]
 8001f28:	2301      	movs	r3, #1
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	2280      	movs	r2, #128	; 0x80
 8001f30:	490e      	ldr	r1, [pc, #56]	; (8001f6c <main+0x60>)
 8001f32:	480f      	ldr	r0, [pc, #60]	; (8001f70 <main+0x64>)
 8001f34:	f7fe fcaa 	bl	800088c <xTaskCreate>
	xTaskCreate(vTaskLedHandler, "Led control", 128, NULL, 2, vTaskLedHandel);
 8001f38:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <main+0x68>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	9301      	str	r3, [sp, #4]
 8001f3e:	2302      	movs	r3, #2
 8001f40:	9300      	str	r3, [sp, #0]
 8001f42:	2300      	movs	r3, #0
 8001f44:	2280      	movs	r2, #128	; 0x80
 8001f46:	490c      	ldr	r1, [pc, #48]	; (8001f78 <main+0x6c>)
 8001f48:	480c      	ldr	r0, [pc, #48]	; (8001f7c <main+0x70>)
 8001f4a:	f7fe fc9f 	bl	800088c <xTaskCreate>
	xSemaphore = xSemaphoreCreateBinary();
 8001f4e:	2203      	movs	r2, #3
 8001f50:	2100      	movs	r1, #0
 8001f52:	2001      	movs	r0, #1
 8001f54:	f7fe fa12 	bl	800037c <xQueueGenericCreate>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <main+0x74>)
 8001f5c:	601a      	str	r2, [r3, #0]

	vTaskStartScheduler();
 8001f5e:	f7fe fe05 	bl	8000b6c <vTaskStartScheduler>


	while(1)
 8001f62:	e7fe      	b.n	8001f62 <main+0x56>
 8001f64:	40021000 	.word	0x40021000
 8001f68:	20002148 	.word	0x20002148
 8001f6c:	0800210c 	.word	0x0800210c
 8001f70:	08001f85 	.word	0x08001f85
 8001f74:	2000214c 	.word	0x2000214c
 8001f78:	0800211c 	.word	0x0800211c
 8001f7c:	08001fd9 	.word	0x08001fd9
 8001f80:	20002150 	.word	0x20002150

08001f84 <vTaskButtonHandler>:

}


void vTaskButtonHandler(void *par)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]

	while(1)
	{
		Button_Curr_State = MCAL_GPIO_Read_Pin(GPIOC, GPIO_PIN_15);
 8001f8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f90:	480d      	ldr	r0, [pc, #52]	; (8001fc8 <vTaskButtonHandler+0x44>)
 8001f92:	f7ff ff63 	bl	8001e5c <MCAL_GPIO_Read_Pin>
 8001f96:	4603      	mov	r3, r0
 8001f98:	461a      	mov	r2, r3
 8001f9a:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <vTaskButtonHandler+0x48>)
 8001f9c:	701a      	strb	r2, [r3, #0]

		if(Button_Curr_State != Button_Prev_State)
 8001f9e:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <vTaskButtonHandler+0x48>)
 8001fa0:	781a      	ldrb	r2, [r3, #0]
 8001fa2:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <vTaskButtonHandler+0x4c>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d006      	beq.n	8001fb8 <vTaskButtonHandler+0x34>
		{
			xSemaphoreGive(xSemaphore);
 8001faa:	4b0a      	ldr	r3, [pc, #40]	; (8001fd4 <vTaskButtonHandler+0x50>)
 8001fac:	6818      	ldr	r0, [r3, #0]
 8001fae:	2300      	movs	r3, #0
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	f7fe fa46 	bl	8000444 <xQueueGenericSend>
		}

		Button_Prev_State = Button_Curr_State;
 8001fb8:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <vTaskButtonHandler+0x48>)
 8001fba:	781a      	ldrb	r2, [r3, #0]
 8001fbc:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <vTaskButtonHandler+0x4c>)
 8001fbe:	701a      	strb	r2, [r3, #0]

		vTaskDelay(25);
 8001fc0:	2019      	movs	r0, #25
 8001fc2:	f7fe fdaf 	bl	8000b24 <vTaskDelay>
		Button_Curr_State = MCAL_GPIO_Read_Pin(GPIOC, GPIO_PIN_15);
 8001fc6:	e7e1      	b.n	8001f8c <vTaskButtonHandler+0x8>
 8001fc8:	40011000 	.word	0x40011000
 8001fcc:	20002154 	.word	0x20002154
 8001fd0:	20002155 	.word	0x20002155
 8001fd4:	20002150 	.word	0x20002150

08001fd8 <vTaskLedHandler>:
}



void vTaskLedHandler(void *par)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]

	while(1)
	{
		if(xSemaphoreTake(xSemaphore , (TickType_t)5)==pdTRUE)
 8001fe0:	4b0e      	ldr	r3, [pc, #56]	; (800201c <vTaskLedHandler+0x44>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2105      	movs	r1, #5
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7fe fad6 	bl	8000598 <xQueueSemaphoreTake>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d110      	bne.n	8002014 <vTaskLedHandler+0x3c>
		{
			if(Button_Curr_State == 1)
 8001ff2:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <vTaskLedHandler+0x48>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d106      	bne.n	8002008 <vTaskLedHandler+0x30>
			{
				MCAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002000:	4808      	ldr	r0, [pc, #32]	; (8002024 <vTaskLedHandler+0x4c>)
 8002002:	f7ff ff44 	bl	8001e8e <MCAL_GPIO_WritePin>
 8002006:	e005      	b.n	8002014 <vTaskLedHandler+0x3c>
			}
			else
			{
				MCAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8002008:	2200      	movs	r2, #0
 800200a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800200e:	4805      	ldr	r0, [pc, #20]	; (8002024 <vTaskLedHandler+0x4c>)
 8002010:	f7ff ff3d 	bl	8001e8e <MCAL_GPIO_WritePin>
			}
		}
		vTaskDelay(30);
 8002014:	201e      	movs	r0, #30
 8002016:	f7fe fd85 	bl	8000b24 <vTaskDelay>
		if(xSemaphoreTake(xSemaphore , (TickType_t)5)==pdTRUE)
 800201a:	e7e1      	b.n	8001fe0 <vTaskLedHandler+0x8>
 800201c:	20002150 	.word	0x20002150
 8002020:	20002154 	.word	0x20002154
 8002024:	40011000 	.word	0x40011000

08002028 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002028:	480d      	ldr	r0, [pc, #52]	; (8002060 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800202a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800202c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002030:	480c      	ldr	r0, [pc, #48]	; (8002064 <LoopForever+0x6>)
  ldr r1, =_edata
 8002032:	490d      	ldr	r1, [pc, #52]	; (8002068 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002034:	4a0d      	ldr	r2, [pc, #52]	; (800206c <LoopForever+0xe>)
  movs r3, #0
 8002036:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002038:	e002      	b.n	8002040 <LoopCopyDataInit>

0800203a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800203a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800203c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800203e:	3304      	adds	r3, #4

08002040 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002040:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002042:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002044:	d3f9      	bcc.n	800203a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002046:	4a0a      	ldr	r2, [pc, #40]	; (8002070 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002048:	4c0a      	ldr	r4, [pc, #40]	; (8002074 <LoopForever+0x16>)
  movs r3, #0
 800204a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800204c:	e001      	b.n	8002052 <LoopFillZerobss>

0800204e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800204e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002050:	3204      	adds	r2, #4

08002052 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002052:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002054:	d3fb      	bcc.n	800204e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002056:	f000 f811 	bl	800207c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800205a:	f7ff ff57 	bl	8001f0c <main>

0800205e <LoopForever>:

LoopForever:
    b LoopForever
 800205e:	e7fe      	b.n	800205e <LoopForever>
  ldr   r0, =_estack
 8002060:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8002064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002068:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 800206c:	08002130 	.word	0x08002130
  ldr r2, =_sbss
 8002070:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8002074:	200021d0 	.word	0x200021d0

08002078 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002078:	e7fe      	b.n	8002078 <ADC1_2_IRQHandler>
	...

0800207c <__libc_init_array>:
 800207c:	b570      	push	{r4, r5, r6, lr}
 800207e:	2500      	movs	r5, #0
 8002080:	4e0c      	ldr	r6, [pc, #48]	; (80020b4 <__libc_init_array+0x38>)
 8002082:	4c0d      	ldr	r4, [pc, #52]	; (80020b8 <__libc_init_array+0x3c>)
 8002084:	1ba4      	subs	r4, r4, r6
 8002086:	10a4      	asrs	r4, r4, #2
 8002088:	42a5      	cmp	r5, r4
 800208a:	d109      	bne.n	80020a0 <__libc_init_array+0x24>
 800208c:	f000 f82e 	bl	80020ec <_init>
 8002090:	2500      	movs	r5, #0
 8002092:	4e0a      	ldr	r6, [pc, #40]	; (80020bc <__libc_init_array+0x40>)
 8002094:	4c0a      	ldr	r4, [pc, #40]	; (80020c0 <__libc_init_array+0x44>)
 8002096:	1ba4      	subs	r4, r4, r6
 8002098:	10a4      	asrs	r4, r4, #2
 800209a:	42a5      	cmp	r5, r4
 800209c:	d105      	bne.n	80020aa <__libc_init_array+0x2e>
 800209e:	bd70      	pop	{r4, r5, r6, pc}
 80020a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020a4:	4798      	blx	r3
 80020a6:	3501      	adds	r5, #1
 80020a8:	e7ee      	b.n	8002088 <__libc_init_array+0xc>
 80020aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020ae:	4798      	blx	r3
 80020b0:	3501      	adds	r5, #1
 80020b2:	e7f2      	b.n	800209a <__libc_init_array+0x1e>
 80020b4:	08002128 	.word	0x08002128
 80020b8:	08002128 	.word	0x08002128
 80020bc:	08002128 	.word	0x08002128
 80020c0:	0800212c 	.word	0x0800212c

080020c4 <memcpy>:
 80020c4:	b510      	push	{r4, lr}
 80020c6:	1e43      	subs	r3, r0, #1
 80020c8:	440a      	add	r2, r1
 80020ca:	4291      	cmp	r1, r2
 80020cc:	d100      	bne.n	80020d0 <memcpy+0xc>
 80020ce:	bd10      	pop	{r4, pc}
 80020d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80020d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80020d8:	e7f7      	b.n	80020ca <memcpy+0x6>

080020da <memset>:
 80020da:	4603      	mov	r3, r0
 80020dc:	4402      	add	r2, r0
 80020de:	4293      	cmp	r3, r2
 80020e0:	d100      	bne.n	80020e4 <memset+0xa>
 80020e2:	4770      	bx	lr
 80020e4:	f803 1b01 	strb.w	r1, [r3], #1
 80020e8:	e7f9      	b.n	80020de <memset+0x4>
	...

080020ec <_init>:
 80020ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ee:	bf00      	nop
 80020f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020f2:	bc08      	pop	{r3}
 80020f4:	469e      	mov	lr, r3
 80020f6:	4770      	bx	lr

080020f8 <_fini>:
 80020f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020fa:	bf00      	nop
 80020fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020fe:	bc08      	pop	{r3}
 8002100:	469e      	mov	lr, r3
 8002102:	4770      	bx	lr
