
Session1_Blinking_Led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001630  08000130  08000130  00010130  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08001760  08001760  00011760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001774  08001774  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08001774  08001774  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001774  08001774  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001774  08001774  00011774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001778  08001778  00011778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  0800177c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021bc  20000008  08001784  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200021c4  08001784  000221c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006a68  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000011ef  00000000  00000000  00026a99  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000438  00000000  00000000  00027c88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000003b0  00000000  00000000  000280c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001828  00000000  00000000  00028470  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00003ced  00000000  00000000  00029c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000124dd  00000000  00000000  0002d985  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0003fe62  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f8c  00000000  00000000  0003fee0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000008 	.word	0x20000008
 800014c:	00000000 	.word	0x00000000
 8000150:	08001748 	.word	0x08001748

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000000c 	.word	0x2000000c
 800016c:	08001748 	.word	0x08001748

08000170 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	f103 0208 	add.w	r2, r3, #8
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f04f 32ff 	mov.w	r2, #4294967295
 8000188:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f103 0208 	add.w	r2, r3, #8
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	f103 0208 	add.w	r2, r3, #8
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	2200      	movs	r2, #0
 80001a2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80001a4:	bf00      	nop
 80001a6:	370c      	adds	r7, #12
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr

080001ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80001ae:	b480      	push	{r7}
 80001b0:	b083      	sub	sp, #12
 80001b2:	af00      	add	r7, sp, #0
 80001b4:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2200      	movs	r2, #0
 80001ba:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80001bc:	bf00      	nop
 80001be:	370c      	adds	r7, #12
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr

080001c6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80001c6:	b480      	push	{r7}
 80001c8:	b085      	sub	sp, #20
 80001ca:	af00      	add	r7, sp, #0
 80001cc:	6078      	str	r0, [r7, #4]
 80001ce:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80001d0:	683b      	ldr	r3, [r7, #0]
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80001d6:	68bb      	ldr	r3, [r7, #8]
 80001d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80001dc:	d103      	bne.n	80001e6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	691b      	ldr	r3, [r3, #16]
 80001e2:	60fb      	str	r3, [r7, #12]
 80001e4:	e00c      	b.n	8000200 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	3308      	adds	r3, #8
 80001ea:	60fb      	str	r3, [r7, #12]
 80001ec:	e002      	b.n	80001f4 <vListInsert+0x2e>
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	685b      	ldr	r3, [r3, #4]
 80001f2:	60fb      	str	r3, [r7, #12]
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	685b      	ldr	r3, [r3, #4]
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	68ba      	ldr	r2, [r7, #8]
 80001fc:	429a      	cmp	r2, r3
 80001fe:	d2f6      	bcs.n	80001ee <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	685a      	ldr	r2, [r3, #4]
 8000204:	683b      	ldr	r3, [r7, #0]
 8000206:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000208:	683b      	ldr	r3, [r7, #0]
 800020a:	685b      	ldr	r3, [r3, #4]
 800020c:	683a      	ldr	r2, [r7, #0]
 800020e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000210:	683b      	ldr	r3, [r7, #0]
 8000212:	68fa      	ldr	r2, [r7, #12]
 8000214:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000216:	68fb      	ldr	r3, [r7, #12]
 8000218:	683a      	ldr	r2, [r7, #0]
 800021a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800021c:	683b      	ldr	r3, [r7, #0]
 800021e:	687a      	ldr	r2, [r7, #4]
 8000220:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	1c5a      	adds	r2, r3, #1
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	601a      	str	r2, [r3, #0]
}
 800022c:	bf00      	nop
 800022e:	3714      	adds	r7, #20
 8000230:	46bd      	mov	sp, r7
 8000232:	bc80      	pop	{r7}
 8000234:	4770      	bx	lr

08000236 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000236:	b480      	push	{r7}
 8000238:	b085      	sub	sp, #20
 800023a:	af00      	add	r7, sp, #0
 800023c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	691b      	ldr	r3, [r3, #16]
 8000242:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	685b      	ldr	r3, [r3, #4]
 8000248:	687a      	ldr	r2, [r7, #4]
 800024a:	6892      	ldr	r2, [r2, #8]
 800024c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	689b      	ldr	r3, [r3, #8]
 8000252:	687a      	ldr	r2, [r7, #4]
 8000254:	6852      	ldr	r2, [r2, #4]
 8000256:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	685b      	ldr	r3, [r3, #4]
 800025c:	687a      	ldr	r2, [r7, #4]
 800025e:	429a      	cmp	r2, r3
 8000260:	d103      	bne.n	800026a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	689a      	ldr	r2, [r3, #8]
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	2200      	movs	r2, #0
 800026e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	1e5a      	subs	r2, r3, #1
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	681b      	ldr	r3, [r3, #0]
}
 800027e:	4618      	mov	r0, r3
 8000280:	3714      	adds	r7, #20
 8000282:	46bd      	mov	sp, r7
 8000284:	bc80      	pop	{r7}
 8000286:	4770      	bx	lr

08000288 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000288:	b580      	push	{r7, lr}
 800028a:	b08c      	sub	sp, #48	; 0x30
 800028c:	af04      	add	r7, sp, #16
 800028e:	60f8      	str	r0, [r7, #12]
 8000290:	60b9      	str	r1, [r7, #8]
 8000292:	603b      	str	r3, [r7, #0]
 8000294:	4613      	mov	r3, r2
 8000296:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000298:	88fb      	ldrh	r3, [r7, #6]
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	4618      	mov	r0, r3
 800029e:	f000 fe2d 	bl	8000efc <pvPortMalloc>
 80002a2:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80002a4:	697b      	ldr	r3, [r7, #20]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d00e      	beq.n	80002c8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80002aa:	204c      	movs	r0, #76	; 0x4c
 80002ac:	f000 fe26 	bl	8000efc <pvPortMalloc>
 80002b0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80002b2:	69fb      	ldr	r3, [r7, #28]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d003      	beq.n	80002c0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80002b8:	69fb      	ldr	r3, [r7, #28]
 80002ba:	697a      	ldr	r2, [r7, #20]
 80002bc:	631a      	str	r2, [r3, #48]	; 0x30
 80002be:	e005      	b.n	80002cc <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 80002c0:	6978      	ldr	r0, [r7, #20]
 80002c2:	f000 fec9 	bl	8001058 <vPortFree>
 80002c6:	e001      	b.n	80002cc <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80002c8:	2300      	movs	r3, #0
 80002ca:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80002cc:	69fb      	ldr	r3, [r7, #28]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d013      	beq.n	80002fa <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80002d2:	88fa      	ldrh	r2, [r7, #6]
 80002d4:	2300      	movs	r3, #0
 80002d6:	9303      	str	r3, [sp, #12]
 80002d8:	69fb      	ldr	r3, [r7, #28]
 80002da:	9302      	str	r3, [sp, #8]
 80002dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002e2:	9300      	str	r3, [sp, #0]
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	68b9      	ldr	r1, [r7, #8]
 80002e8:	68f8      	ldr	r0, [r7, #12]
 80002ea:	f000 f80e 	bl	800030a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80002ee:	69f8      	ldr	r0, [r7, #28]
 80002f0:	f000 f884 	bl	80003fc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80002f4:	2301      	movs	r3, #1
 80002f6:	61bb      	str	r3, [r7, #24]
 80002f8:	e002      	b.n	8000300 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80002fa:	f04f 33ff 	mov.w	r3, #4294967295
 80002fe:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000300:	69bb      	ldr	r3, [r7, #24]
    }
 8000302:	4618      	mov	r0, r3
 8000304:	3720      	adds	r7, #32
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}

0800030a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800030a:	b580      	push	{r7, lr}
 800030c:	b086      	sub	sp, #24
 800030e:	af00      	add	r7, sp, #0
 8000310:	60f8      	str	r0, [r7, #12]
 8000312:	60b9      	str	r1, [r7, #8]
 8000314:	607a      	str	r2, [r7, #4]
 8000316:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800031a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000322:	3b01      	subs	r3, #1
 8000324:	009b      	lsls	r3, r3, #2
 8000326:	4413      	add	r3, r2
 8000328:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800032a:	693b      	ldr	r3, [r7, #16]
 800032c:	f023 0307 	bic.w	r3, r3, #7
 8000330:	613b      	str	r3, [r7, #16]
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000332:	68bb      	ldr	r3, [r7, #8]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d01f      	beq.n	8000378 <prvInitialiseNewTask+0x6e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000338:	2300      	movs	r3, #0
 800033a:	617b      	str	r3, [r7, #20]
 800033c:	e012      	b.n	8000364 <prvInitialiseNewTask+0x5a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800033e:	68ba      	ldr	r2, [r7, #8]
 8000340:	697b      	ldr	r3, [r7, #20]
 8000342:	4413      	add	r3, r2
 8000344:	7819      	ldrb	r1, [r3, #0]
 8000346:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000348:	697b      	ldr	r3, [r7, #20]
 800034a:	4413      	add	r3, r2
 800034c:	3334      	adds	r3, #52	; 0x34
 800034e:	460a      	mov	r2, r1
 8000350:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000352:	68ba      	ldr	r2, [r7, #8]
 8000354:	697b      	ldr	r3, [r7, #20]
 8000356:	4413      	add	r3, r2
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	2b00      	cmp	r3, #0
 800035c:	d006      	beq.n	800036c <prvInitialiseNewTask+0x62>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800035e:	697b      	ldr	r3, [r7, #20]
 8000360:	3301      	adds	r3, #1
 8000362:	617b      	str	r3, [r7, #20]
 8000364:	697b      	ldr	r3, [r7, #20]
 8000366:	2b0f      	cmp	r3, #15
 8000368:	d9e9      	bls.n	800033e <prvInitialiseNewTask+0x34>
 800036a:	e000      	b.n	800036e <prvInitialiseNewTask+0x64>
            {
                break;
 800036c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800036e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000370:	2200      	movs	r2, #0
 8000372:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8000376:	e003      	b.n	8000380 <prvInitialiseNewTask+0x76>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800037a:	2200      	movs	r2, #0
 800037c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000380:	6a3b      	ldr	r3, [r7, #32]
 8000382:	2b04      	cmp	r3, #4
 8000384:	d901      	bls.n	800038a <prvInitialiseNewTask+0x80>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000386:	2304      	movs	r3, #4
 8000388:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800038a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800038c:	6a3a      	ldr	r2, [r7, #32]
 800038e:	62da      	str	r2, [r3, #44]	; 0x2c
            pxNewTCB->uxBasePriority = uxPriority;
            pxNewTCB->uxMutexesHeld = 0;
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000392:	3304      	adds	r3, #4
 8000394:	4618      	mov	r0, r3
 8000396:	f7ff ff0a 	bl	80001ae <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800039a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800039c:	3318      	adds	r3, #24
 800039e:	4618      	mov	r0, r3
 80003a0:	f7ff ff05 	bl	80001ae <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80003a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80003a8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80003aa:	6a3b      	ldr	r3, [r7, #32]
 80003ac:	f1c3 0205 	rsb	r2, r3, #5
 80003b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003b2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80003b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80003b8:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80003ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003bc:	3344      	adds	r3, #68	; 0x44
 80003be:	2204      	movs	r2, #4
 80003c0:	2100      	movs	r1, #0
 80003c2:	4618      	mov	r0, r3
 80003c4:	f001 f9b8 	bl	8001738 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80003c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003ca:	3348      	adds	r3, #72	; 0x48
 80003cc:	2201      	movs	r2, #1
 80003ce:	2100      	movs	r1, #0
 80003d0:	4618      	mov	r0, r3
 80003d2:	f001 f9b1 	bl	8001738 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80003d6:	683a      	ldr	r2, [r7, #0]
 80003d8:	68f9      	ldr	r1, [r7, #12]
 80003da:	6938      	ldr	r0, [r7, #16]
 80003dc:	f000 fc72 	bl	8000cc4 <pxPortInitialiseStack>
 80003e0:	4602      	mov	r2, r0
 80003e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003e4:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80003e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d002      	beq.n	80003f2 <prvInitialiseNewTask+0xe8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80003ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80003f0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80003f2:	bf00      	nop
 80003f4:	3718      	adds	r7, #24
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
	...

080003fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000404:	f000 fcea 	bl	8000ddc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000408:	4b3e      	ldr	r3, [pc, #248]	; (8000504 <prvAddNewTaskToReadyList+0x108>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	3301      	adds	r3, #1
 800040e:	4a3d      	ldr	r2, [pc, #244]	; (8000504 <prvAddNewTaskToReadyList+0x108>)
 8000410:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000412:	4b3d      	ldr	r3, [pc, #244]	; (8000508 <prvAddNewTaskToReadyList+0x10c>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	2b00      	cmp	r3, #0
 8000418:	d109      	bne.n	800042e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800041a:	4a3b      	ldr	r2, [pc, #236]	; (8000508 <prvAddNewTaskToReadyList+0x10c>)
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000420:	4b38      	ldr	r3, [pc, #224]	; (8000504 <prvAddNewTaskToReadyList+0x108>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	2b01      	cmp	r3, #1
 8000426:	d110      	bne.n	800044a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000428:	f000 fb36 	bl	8000a98 <prvInitialiseTaskLists>
 800042c:	e00d      	b.n	800044a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800042e:	4b37      	ldr	r3, [pc, #220]	; (800050c <prvAddNewTaskToReadyList+0x110>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	2b00      	cmp	r3, #0
 8000434:	d109      	bne.n	800044a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000436:	4b34      	ldr	r3, [pc, #208]	; (8000508 <prvAddNewTaskToReadyList+0x10c>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000440:	429a      	cmp	r2, r3
 8000442:	d802      	bhi.n	800044a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000444:	4a30      	ldr	r2, [pc, #192]	; (8000508 <prvAddNewTaskToReadyList+0x10c>)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800044a:	4b31      	ldr	r3, [pc, #196]	; (8000510 <prvAddNewTaskToReadyList+0x114>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	3301      	adds	r3, #1
 8000450:	4a2f      	ldr	r2, [pc, #188]	; (8000510 <prvAddNewTaskToReadyList+0x114>)
 8000452:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000458:	2201      	movs	r2, #1
 800045a:	409a      	lsls	r2, r3
 800045c:	4b2d      	ldr	r3, [pc, #180]	; (8000514 <prvAddNewTaskToReadyList+0x118>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4313      	orrs	r3, r2
 8000462:	4a2c      	ldr	r2, [pc, #176]	; (8000514 <prvAddNewTaskToReadyList+0x118>)
 8000464:	6013      	str	r3, [r2, #0]
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800046a:	492b      	ldr	r1, [pc, #172]	; (8000518 <prvAddNewTaskToReadyList+0x11c>)
 800046c:	4613      	mov	r3, r2
 800046e:	009b      	lsls	r3, r3, #2
 8000470:	4413      	add	r3, r2
 8000472:	009b      	lsls	r3, r3, #2
 8000474:	440b      	add	r3, r1
 8000476:	3304      	adds	r3, #4
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	60fb      	str	r3, [r7, #12]
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	68fa      	ldr	r2, [r7, #12]
 8000480:	609a      	str	r2, [r3, #8]
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	689a      	ldr	r2, [r3, #8]
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	60da      	str	r2, [r3, #12]
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	689b      	ldr	r3, [r3, #8]
 800048e:	687a      	ldr	r2, [r7, #4]
 8000490:	3204      	adds	r2, #4
 8000492:	605a      	str	r2, [r3, #4]
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	1d1a      	adds	r2, r3, #4
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	609a      	str	r2, [r3, #8]
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004a0:	4613      	mov	r3, r2
 80004a2:	009b      	lsls	r3, r3, #2
 80004a4:	4413      	add	r3, r2
 80004a6:	009b      	lsls	r3, r3, #2
 80004a8:	4a1b      	ldr	r2, [pc, #108]	; (8000518 <prvAddNewTaskToReadyList+0x11c>)
 80004aa:	441a      	add	r2, r3
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	615a      	str	r2, [r3, #20]
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004b4:	4918      	ldr	r1, [pc, #96]	; (8000518 <prvAddNewTaskToReadyList+0x11c>)
 80004b6:	4613      	mov	r3, r2
 80004b8:	009b      	lsls	r3, r3, #2
 80004ba:	4413      	add	r3, r2
 80004bc:	009b      	lsls	r3, r3, #2
 80004be:	440b      	add	r3, r1
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	1c59      	adds	r1, r3, #1
 80004c4:	4814      	ldr	r0, [pc, #80]	; (8000518 <prvAddNewTaskToReadyList+0x11c>)
 80004c6:	4613      	mov	r3, r2
 80004c8:	009b      	lsls	r3, r3, #2
 80004ca:	4413      	add	r3, r2
 80004cc:	009b      	lsls	r3, r3, #2
 80004ce:	4403      	add	r3, r0
 80004d0:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80004d2:	f000 fc9b 	bl	8000e0c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80004d6:	4b0d      	ldr	r3, [pc, #52]	; (800050c <prvAddNewTaskToReadyList+0x110>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d00e      	beq.n	80004fc <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80004de:	4b0a      	ldr	r3, [pc, #40]	; (8000508 <prvAddNewTaskToReadyList+0x10c>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004e8:	429a      	cmp	r2, r3
 80004ea:	d207      	bcs.n	80004fc <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80004ec:	4b0b      	ldr	r3, [pc, #44]	; (800051c <prvAddNewTaskToReadyList+0x120>)
 80004ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	f3bf 8f4f 	dsb	sy
 80004f8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80004fc:	bf00      	nop
 80004fe:	3710      	adds	r7, #16
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	200000fc 	.word	0x200000fc
 8000508:	20000024 	.word	0x20000024
 800050c:	20000108 	.word	0x20000108
 8000510:	20000118 	.word	0x20000118
 8000514:	20000104 	.word	0x20000104
 8000518:	20000028 	.word	0x20000028
 800051c:	e000ed04 	.word	0xe000ed04

08000520 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8000528:	2300      	movs	r3, #0
 800052a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d008      	beq.n	8000544 <vTaskDelay+0x24>
        {
            configASSERT( uxSchedulerSuspended == 0 );
            vTaskSuspendAll();
 8000532:	f000 f853 	bl	80005dc <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000536:	2100      	movs	r1, #0
 8000538:	6878      	ldr	r0, [r7, #4]
 800053a:	f000 fb43 	bl	8000bc4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800053e:	f000 f85b 	bl	80005f8 <xTaskResumeAll>
 8000542:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d107      	bne.n	800055a <vTaskDelay+0x3a>
        {
            portYIELD_WITHIN_API();
 800054a:	4b06      	ldr	r3, [pc, #24]	; (8000564 <vTaskDelay+0x44>)
 800054c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	f3bf 8f4f 	dsb	sy
 8000556:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800055a:	bf00      	nop
 800055c:	3710      	adds	r7, #16
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	e000ed04 	.word	0xe000ed04

08000568 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800056e:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <vTaskStartScheduler+0x58>)
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	2300      	movs	r3, #0
 8000574:	9300      	str	r3, [sp, #0]
 8000576:	2300      	movs	r3, #0
 8000578:	2280      	movs	r2, #128	; 0x80
 800057a:	4912      	ldr	r1, [pc, #72]	; (80005c4 <vTaskStartScheduler+0x5c>)
 800057c:	4812      	ldr	r0, [pc, #72]	; (80005c8 <vTaskStartScheduler+0x60>)
 800057e:	f7ff fe83 	bl	8000288 <xTaskCreate>
 8000582:	6078      	str	r0, [r7, #4]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2b01      	cmp	r3, #1
 8000588:	d114      	bne.n	80005b4 <vTaskStartScheduler+0x4c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800058a:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800058e:	f383 8811 	msr	BASEPRI, r3
 8000592:	f3bf 8f6f 	isb	sy
 8000596:	f3bf 8f4f 	dsb	sy
 800059a:	603b      	str	r3, [r7, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800059c:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <vTaskStartScheduler+0x64>)
 800059e:	f04f 32ff 	mov.w	r2, #4294967295
 80005a2:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80005a4:	4b0a      	ldr	r3, [pc, #40]	; (80005d0 <vTaskStartScheduler+0x68>)
 80005a6:	2201      	movs	r2, #1
 80005a8:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80005aa:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <vTaskStartScheduler+0x6c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80005b0:	f000 fbf4 	bl	8000d9c <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80005b4:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <vTaskStartScheduler+0x70>)
 80005b6:	681b      	ldr	r3, [r3, #0]
}
 80005b8:	bf00      	nop
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20000120 	.word	0x20000120
 80005c4:	08001760 	.word	0x08001760
 80005c8:	08000a69 	.word	0x08000a69
 80005cc:	2000011c 	.word	0x2000011c
 80005d0:	20000108 	.word	0x20000108
 80005d4:	20000100 	.word	0x20000100
 80005d8:	20000000 	.word	0x20000000

080005dc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80005e0:	4b04      	ldr	r3, [pc, #16]	; (80005f4 <vTaskSuspendAll+0x18>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	3301      	adds	r3, #1
 80005e6:	4a03      	ldr	r2, [pc, #12]	; (80005f4 <vTaskSuspendAll+0x18>)
 80005e8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80005ea:	bf00      	nop
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bc80      	pop	{r7}
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	20000124 	.word	0x20000124

080005f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000602:	2300      	movs	r3, #0
 8000604:	613b      	str	r3, [r7, #16]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8000606:	f000 fbe9 	bl	8000ddc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800060a:	4b68      	ldr	r3, [pc, #416]	; (80007ac <xTaskResumeAll+0x1b4>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	3b01      	subs	r3, #1
 8000610:	4a66      	ldr	r2, [pc, #408]	; (80007ac <xTaskResumeAll+0x1b4>)
 8000612:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000614:	4b65      	ldr	r3, [pc, #404]	; (80007ac <xTaskResumeAll+0x1b4>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	f040 80c0 	bne.w	800079e <xTaskResumeAll+0x1a6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800061e:	4b64      	ldr	r3, [pc, #400]	; (80007b0 <xTaskResumeAll+0x1b8>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2b00      	cmp	r3, #0
 8000624:	f000 80bb 	beq.w	800079e <xTaskResumeAll+0x1a6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000628:	e08a      	b.n	8000740 <xTaskResumeAll+0x148>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800062a:	4b62      	ldr	r3, [pc, #392]	; (80007b4 <xTaskResumeAll+0x1bc>)
 800062c:	68db      	ldr	r3, [r3, #12]
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	69db      	ldr	r3, [r3, #28]
 800063c:	697a      	ldr	r2, [r7, #20]
 800063e:	6a12      	ldr	r2, [r2, #32]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	697b      	ldr	r3, [r7, #20]
 8000644:	6a1b      	ldr	r3, [r3, #32]
 8000646:	697a      	ldr	r2, [r7, #20]
 8000648:	69d2      	ldr	r2, [r2, #28]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	685a      	ldr	r2, [r3, #4]
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	3318      	adds	r3, #24
 8000654:	429a      	cmp	r2, r3
 8000656:	d103      	bne.n	8000660 <xTaskResumeAll+0x68>
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	6a1a      	ldr	r2, [r3, #32]
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	2200      	movs	r2, #0
 8000664:	629a      	str	r2, [r3, #40]	; 0x28
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	1e5a      	subs	r2, r3, #1
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	697b      	ldr	r3, [r7, #20]
 8000678:	689b      	ldr	r3, [r3, #8]
 800067a:	697a      	ldr	r2, [r7, #20]
 800067c:	68d2      	ldr	r2, [r2, #12]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	68db      	ldr	r3, [r3, #12]
 8000684:	697a      	ldr	r2, [r7, #20]
 8000686:	6892      	ldr	r2, [r2, #8]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	685a      	ldr	r2, [r3, #4]
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	3304      	adds	r3, #4
 8000692:	429a      	cmp	r2, r3
 8000694:	d103      	bne.n	800069e <xTaskResumeAll+0xa6>
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	68da      	ldr	r2, [r3, #12]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	2200      	movs	r2, #0
 80006a2:	615a      	str	r2, [r3, #20]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	1e5a      	subs	r2, r3, #1
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80006ae:	697b      	ldr	r3, [r7, #20]
 80006b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006b2:	2201      	movs	r2, #1
 80006b4:	409a      	lsls	r2, r3
 80006b6:	4b40      	ldr	r3, [pc, #256]	; (80007b8 <xTaskResumeAll+0x1c0>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	4a3e      	ldr	r2, [pc, #248]	; (80007b8 <xTaskResumeAll+0x1c0>)
 80006be:	6013      	str	r3, [r2, #0]
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006c4:	493d      	ldr	r1, [pc, #244]	; (80007bc <xTaskResumeAll+0x1c4>)
 80006c6:	4613      	mov	r3, r2
 80006c8:	009b      	lsls	r3, r3, #2
 80006ca:	4413      	add	r3, r2
 80006cc:	009b      	lsls	r3, r3, #2
 80006ce:	440b      	add	r3, r1
 80006d0:	3304      	adds	r3, #4
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	683a      	ldr	r2, [r7, #0]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	689a      	ldr	r2, [r3, #8]
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	60da      	str	r2, [r3, #12]
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	689b      	ldr	r3, [r3, #8]
 80006e8:	697a      	ldr	r2, [r7, #20]
 80006ea:	3204      	adds	r2, #4
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	1d1a      	adds	r2, r3, #4
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006fa:	4613      	mov	r3, r2
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	4413      	add	r3, r2
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	4a2e      	ldr	r2, [pc, #184]	; (80007bc <xTaskResumeAll+0x1c4>)
 8000704:	441a      	add	r2, r3
 8000706:	697b      	ldr	r3, [r7, #20]
 8000708:	615a      	str	r2, [r3, #20]
 800070a:	697b      	ldr	r3, [r7, #20]
 800070c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800070e:	492b      	ldr	r1, [pc, #172]	; (80007bc <xTaskResumeAll+0x1c4>)
 8000710:	4613      	mov	r3, r2
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	4413      	add	r3, r2
 8000716:	009b      	lsls	r3, r3, #2
 8000718:	440b      	add	r3, r1
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	1c59      	adds	r1, r3, #1
 800071e:	4827      	ldr	r0, [pc, #156]	; (80007bc <xTaskResumeAll+0x1c4>)
 8000720:	4613      	mov	r3, r2
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	4413      	add	r3, r2
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	4403      	add	r3, r0
 800072a:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000730:	4b23      	ldr	r3, [pc, #140]	; (80007c0 <xTaskResumeAll+0x1c8>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000736:	429a      	cmp	r2, r3
 8000738:	d302      	bcc.n	8000740 <xTaskResumeAll+0x148>
                    {
                        xYieldPending = pdTRUE;
 800073a:	4b22      	ldr	r3, [pc, #136]	; (80007c4 <xTaskResumeAll+0x1cc>)
 800073c:	2201      	movs	r2, #1
 800073e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000740:	4b1c      	ldr	r3, [pc, #112]	; (80007b4 <xTaskResumeAll+0x1bc>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	f47f af70 	bne.w	800062a <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <xTaskResumeAll+0x15c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8000750:	f000 fa1e 	bl	8000b90 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000754:	4b1c      	ldr	r3, [pc, #112]	; (80007c8 <xTaskResumeAll+0x1d0>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d010      	beq.n	8000782 <xTaskResumeAll+0x18a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8000760:	f000 f836 	bl	80007d0 <xTaskIncrementTick>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d002      	beq.n	8000770 <xTaskResumeAll+0x178>
                            {
                                xYieldPending = pdTRUE;
 800076a:	4b16      	ldr	r3, [pc, #88]	; (80007c4 <xTaskResumeAll+0x1cc>)
 800076c:	2201      	movs	r2, #1
 800076e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	3b01      	subs	r3, #1
 8000774:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d1f1      	bne.n	8000760 <xTaskResumeAll+0x168>

                        xPendedTicks = 0;
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <xTaskResumeAll+0x1d0>)
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <xTaskResumeAll+0x1cc>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d009      	beq.n	800079e <xTaskResumeAll+0x1a6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800078a:	2301      	movs	r3, #1
 800078c:	613b      	str	r3, [r7, #16]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800078e:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <xTaskResumeAll+0x1d4>)
 8000790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	f3bf 8f4f 	dsb	sy
 800079a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800079e:	f000 fb35 	bl	8000e0c <vPortExitCritical>

    return xAlreadyYielded;
 80007a2:	693b      	ldr	r3, [r7, #16]
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3718      	adds	r7, #24
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000124 	.word	0x20000124
 80007b0:	200000fc 	.word	0x200000fc
 80007b4:	200000bc 	.word	0x200000bc
 80007b8:	20000104 	.word	0x20000104
 80007bc:	20000028 	.word	0x20000028
 80007c0:	20000024 	.word	0x20000024
 80007c4:	20000110 	.word	0x20000110
 80007c8:	2000010c 	.word	0x2000010c
 80007cc:	e000ed04 	.word	0xe000ed04

080007d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b088      	sub	sp, #32
 80007d4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80007da:	4b75      	ldr	r3, [pc, #468]	; (80009b0 <xTaskIncrementTick+0x1e0>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	f040 80dc 	bne.w	800099c <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80007e4:	4b73      	ldr	r3, [pc, #460]	; (80009b4 <xTaskIncrementTick+0x1e4>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	3301      	adds	r3, #1
 80007ea:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80007ec:	4a71      	ldr	r2, [pc, #452]	; (80009b4 <xTaskIncrementTick+0x1e4>)
 80007ee:	69bb      	ldr	r3, [r7, #24]
 80007f0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80007f2:	69bb      	ldr	r3, [r7, #24]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d110      	bne.n	800081a <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 80007f8:	4b6f      	ldr	r3, [pc, #444]	; (80009b8 <xTaskIncrementTick+0x1e8>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	617b      	str	r3, [r7, #20]
 80007fe:	4b6f      	ldr	r3, [pc, #444]	; (80009bc <xTaskIncrementTick+0x1ec>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a6d      	ldr	r2, [pc, #436]	; (80009b8 <xTaskIncrementTick+0x1e8>)
 8000804:	6013      	str	r3, [r2, #0]
 8000806:	4a6d      	ldr	r2, [pc, #436]	; (80009bc <xTaskIncrementTick+0x1ec>)
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	6013      	str	r3, [r2, #0]
 800080c:	4b6c      	ldr	r3, [pc, #432]	; (80009c0 <xTaskIncrementTick+0x1f0>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	3301      	adds	r3, #1
 8000812:	4a6b      	ldr	r2, [pc, #428]	; (80009c0 <xTaskIncrementTick+0x1f0>)
 8000814:	6013      	str	r3, [r2, #0]
 8000816:	f000 f9bb 	bl	8000b90 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800081a:	4b6a      	ldr	r3, [pc, #424]	; (80009c4 <xTaskIncrementTick+0x1f4>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	69ba      	ldr	r2, [r7, #24]
 8000820:	429a      	cmp	r2, r3
 8000822:	f0c0 80a6 	bcc.w	8000972 <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000826:	4b64      	ldr	r3, [pc, #400]	; (80009b8 <xTaskIncrementTick+0x1e8>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d104      	bne.n	800083a <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000830:	4b64      	ldr	r3, [pc, #400]	; (80009c4 <xTaskIncrementTick+0x1f4>)
 8000832:	f04f 32ff 	mov.w	r2, #4294967295
 8000836:	601a      	str	r2, [r3, #0]
                    break;
 8000838:	e09b      	b.n	8000972 <xTaskIncrementTick+0x1a2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800083a:	4b5f      	ldr	r3, [pc, #380]	; (80009b8 <xTaskIncrementTick+0x1e8>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	68db      	ldr	r3, [r3, #12]
 8000840:	68db      	ldr	r3, [r3, #12]
 8000842:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000844:	693b      	ldr	r3, [r7, #16]
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800084a:	69ba      	ldr	r2, [r7, #24]
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	429a      	cmp	r2, r3
 8000850:	d203      	bcs.n	800085a <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000852:	4a5c      	ldr	r2, [pc, #368]	; (80009c4 <xTaskIncrementTick+0x1f4>)
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8000858:	e08b      	b.n	8000972 <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800085a:	693b      	ldr	r3, [r7, #16]
 800085c:	695b      	ldr	r3, [r3, #20]
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	689b      	ldr	r3, [r3, #8]
 8000864:	693a      	ldr	r2, [r7, #16]
 8000866:	68d2      	ldr	r2, [r2, #12]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	693b      	ldr	r3, [r7, #16]
 800086c:	68db      	ldr	r3, [r3, #12]
 800086e:	693a      	ldr	r2, [r7, #16]
 8000870:	6892      	ldr	r2, [r2, #8]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	685a      	ldr	r2, [r3, #4]
 8000878:	693b      	ldr	r3, [r7, #16]
 800087a:	3304      	adds	r3, #4
 800087c:	429a      	cmp	r2, r3
 800087e:	d103      	bne.n	8000888 <xTaskIncrementTick+0xb8>
 8000880:	693b      	ldr	r3, [r7, #16]
 8000882:	68da      	ldr	r2, [r3, #12]
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	693b      	ldr	r3, [r7, #16]
 800088a:	2200      	movs	r2, #0
 800088c:	615a      	str	r2, [r3, #20]
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	1e5a      	subs	r2, r3, #1
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000898:	693b      	ldr	r3, [r7, #16]
 800089a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800089c:	2b00      	cmp	r3, #0
 800089e:	d01e      	beq.n	80008de <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80008a0:	693b      	ldr	r3, [r7, #16]
 80008a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	693b      	ldr	r3, [r7, #16]
 80008a8:	69db      	ldr	r3, [r3, #28]
 80008aa:	693a      	ldr	r2, [r7, #16]
 80008ac:	6a12      	ldr	r2, [r2, #32]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	693b      	ldr	r3, [r7, #16]
 80008b2:	6a1b      	ldr	r3, [r3, #32]
 80008b4:	693a      	ldr	r2, [r7, #16]
 80008b6:	69d2      	ldr	r2, [r2, #28]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	685a      	ldr	r2, [r3, #4]
 80008be:	693b      	ldr	r3, [r7, #16]
 80008c0:	3318      	adds	r3, #24
 80008c2:	429a      	cmp	r2, r3
 80008c4:	d103      	bne.n	80008ce <xTaskIncrementTick+0xfe>
 80008c6:	693b      	ldr	r3, [r7, #16]
 80008c8:	6a1a      	ldr	r2, [r3, #32]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	693b      	ldr	r3, [r7, #16]
 80008d0:	2200      	movs	r2, #0
 80008d2:	629a      	str	r2, [r3, #40]	; 0x28
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	1e5a      	subs	r2, r3, #1
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80008de:	693b      	ldr	r3, [r7, #16]
 80008e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008e2:	2201      	movs	r2, #1
 80008e4:	409a      	lsls	r2, r3
 80008e6:	4b38      	ldr	r3, [pc, #224]	; (80009c8 <xTaskIncrementTick+0x1f8>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4313      	orrs	r3, r2
 80008ec:	4a36      	ldr	r2, [pc, #216]	; (80009c8 <xTaskIncrementTick+0x1f8>)
 80008ee:	6013      	str	r3, [r2, #0]
 80008f0:	693b      	ldr	r3, [r7, #16]
 80008f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008f4:	4935      	ldr	r1, [pc, #212]	; (80009cc <xTaskIncrementTick+0x1fc>)
 80008f6:	4613      	mov	r3, r2
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	4413      	add	r3, r2
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	440b      	add	r3, r1
 8000900:	3304      	adds	r3, #4
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	603b      	str	r3, [r7, #0]
 8000906:	693b      	ldr	r3, [r7, #16]
 8000908:	683a      	ldr	r2, [r7, #0]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	689a      	ldr	r2, [r3, #8]
 8000910:	693b      	ldr	r3, [r7, #16]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	689b      	ldr	r3, [r3, #8]
 8000918:	693a      	ldr	r2, [r7, #16]
 800091a:	3204      	adds	r2, #4
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	693b      	ldr	r3, [r7, #16]
 8000920:	1d1a      	adds	r2, r3, #4
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	693b      	ldr	r3, [r7, #16]
 8000928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800092a:	4613      	mov	r3, r2
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	4413      	add	r3, r2
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	4a26      	ldr	r2, [pc, #152]	; (80009cc <xTaskIncrementTick+0x1fc>)
 8000934:	441a      	add	r2, r3
 8000936:	693b      	ldr	r3, [r7, #16]
 8000938:	615a      	str	r2, [r3, #20]
 800093a:	693b      	ldr	r3, [r7, #16]
 800093c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800093e:	4923      	ldr	r1, [pc, #140]	; (80009cc <xTaskIncrementTick+0x1fc>)
 8000940:	4613      	mov	r3, r2
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	4413      	add	r3, r2
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	440b      	add	r3, r1
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	1c59      	adds	r1, r3, #1
 800094e:	481f      	ldr	r0, [pc, #124]	; (80009cc <xTaskIncrementTick+0x1fc>)
 8000950:	4613      	mov	r3, r2
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	4413      	add	r3, r2
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	4403      	add	r3, r0
 800095a:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800095c:	693b      	ldr	r3, [r7, #16]
 800095e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000960:	4b1b      	ldr	r3, [pc, #108]	; (80009d0 <xTaskIncrementTick+0x200>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000966:	429a      	cmp	r2, r3
 8000968:	f4ff af5d 	bcc.w	8000826 <xTaskIncrementTick+0x56>
                            {
                                xSwitchRequired = pdTRUE;
 800096c:	2301      	movs	r3, #1
 800096e:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000970:	e759      	b.n	8000826 <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000972:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <xTaskIncrementTick+0x200>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000978:	4914      	ldr	r1, [pc, #80]	; (80009cc <xTaskIncrementTick+0x1fc>)
 800097a:	4613      	mov	r3, r2
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	4413      	add	r3, r2
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	440b      	add	r3, r1
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	2b01      	cmp	r3, #1
 8000988:	d901      	bls.n	800098e <xTaskIncrementTick+0x1be>
                {
                    xSwitchRequired = pdTRUE;
 800098a:	2301      	movs	r3, #1
 800098c:	61fb      	str	r3, [r7, #28]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800098e:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <xTaskIncrementTick+0x204>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d007      	beq.n	80009a6 <xTaskIncrementTick+0x1d6>
                {
                    xSwitchRequired = pdTRUE;
 8000996:	2301      	movs	r3, #1
 8000998:	61fb      	str	r3, [r7, #28]
 800099a:	e004      	b.n	80009a6 <xTaskIncrementTick+0x1d6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800099c:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <xTaskIncrementTick+0x208>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	3301      	adds	r3, #1
 80009a2:	4a0d      	ldr	r2, [pc, #52]	; (80009d8 <xTaskIncrementTick+0x208>)
 80009a4:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80009a6:	69fb      	ldr	r3, [r7, #28]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3720      	adds	r7, #32
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000124 	.word	0x20000124
 80009b4:	20000100 	.word	0x20000100
 80009b8:	200000b4 	.word	0x200000b4
 80009bc:	200000b8 	.word	0x200000b8
 80009c0:	20000114 	.word	0x20000114
 80009c4:	2000011c 	.word	0x2000011c
 80009c8:	20000104 	.word	0x20000104
 80009cc:	20000028 	.word	0x20000028
 80009d0:	20000024 	.word	0x20000024
 80009d4:	20000110 	.word	0x20000110
 80009d8:	2000010c 	.word	0x2000010c

080009dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80009e2:	4b1c      	ldr	r3, [pc, #112]	; (8000a54 <vTaskSwitchContext+0x78>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d003      	beq.n	80009f2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80009ea:	4b1b      	ldr	r3, [pc, #108]	; (8000a58 <vTaskSwitchContext+0x7c>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80009f0:	e02a      	b.n	8000a48 <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 80009f2:	4b19      	ldr	r3, [pc, #100]	; (8000a58 <vTaskSwitchContext+0x7c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80009f8:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <vTaskSwitchContext+0x80>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	fab3 f383 	clz	r3, r3
 8000a04:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 8000a06:	78fb      	ldrb	r3, [r7, #3]
 8000a08:	f1c3 031f 	rsb	r3, r3, #31
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	68fa      	ldr	r2, [r7, #12]
 8000a10:	4613      	mov	r3, r2
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	4413      	add	r3, r2
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	4a11      	ldr	r2, [pc, #68]	; (8000a60 <vTaskSwitchContext+0x84>)
 8000a1a:	4413      	add	r3, r2
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	685a      	ldr	r2, [r3, #4]
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	685a      	ldr	r2, [r3, #4]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	3308      	adds	r3, #8
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d104      	bne.n	8000a3e <vTaskSwitchContext+0x62>
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	685a      	ldr	r2, [r3, #4]
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	4a07      	ldr	r2, [pc, #28]	; (8000a64 <vTaskSwitchContext+0x88>)
 8000a46:	6013      	str	r3, [r2, #0]
}
 8000a48:	bf00      	nop
 8000a4a:	3714      	adds	r7, #20
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	20000124 	.word	0x20000124
 8000a58:	20000110 	.word	0x20000110
 8000a5c:	20000104 	.word	0x20000104
 8000a60:	20000028 	.word	0x20000028
 8000a64:	20000024 	.word	0x20000024

08000a68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8000a70:	f000 f852 	bl	8000b18 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <prvIdleTask+0x28>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d9f9      	bls.n	8000a70 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8000a7c:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <prvIdleTask+0x2c>)
 8000a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	f3bf 8f4f 	dsb	sy
 8000a88:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8000a8c:	e7f0      	b.n	8000a70 <prvIdleTask+0x8>
 8000a8e:	bf00      	nop
 8000a90:	20000028 	.word	0x20000028
 8000a94:	e000ed04 	.word	0xe000ed04

08000a98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	e00c      	b.n	8000abe <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000aa4:	687a      	ldr	r2, [r7, #4]
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	4413      	add	r3, r2
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	4a12      	ldr	r2, [pc, #72]	; (8000af8 <prvInitialiseTaskLists+0x60>)
 8000ab0:	4413      	add	r3, r2
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff fb5c 	bl	8000170 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	3301      	adds	r3, #1
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2b04      	cmp	r3, #4
 8000ac2:	d9ef      	bls.n	8000aa4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8000ac4:	480d      	ldr	r0, [pc, #52]	; (8000afc <prvInitialiseTaskLists+0x64>)
 8000ac6:	f7ff fb53 	bl	8000170 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8000aca:	480d      	ldr	r0, [pc, #52]	; (8000b00 <prvInitialiseTaskLists+0x68>)
 8000acc:	f7ff fb50 	bl	8000170 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8000ad0:	480c      	ldr	r0, [pc, #48]	; (8000b04 <prvInitialiseTaskLists+0x6c>)
 8000ad2:	f7ff fb4d 	bl	8000170 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8000ad6:	480c      	ldr	r0, [pc, #48]	; (8000b08 <prvInitialiseTaskLists+0x70>)
 8000ad8:	f7ff fb4a 	bl	8000170 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8000adc:	480b      	ldr	r0, [pc, #44]	; (8000b0c <prvInitialiseTaskLists+0x74>)
 8000ade:	f7ff fb47 	bl	8000170 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <prvInitialiseTaskLists+0x78>)
 8000ae4:	4a05      	ldr	r2, [pc, #20]	; (8000afc <prvInitialiseTaskLists+0x64>)
 8000ae6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000ae8:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <prvInitialiseTaskLists+0x7c>)
 8000aea:	4a05      	ldr	r2, [pc, #20]	; (8000b00 <prvInitialiseTaskLists+0x68>)
 8000aec:	601a      	str	r2, [r3, #0]
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000028 	.word	0x20000028
 8000afc:	2000008c 	.word	0x2000008c
 8000b00:	200000a0 	.word	0x200000a0
 8000b04:	200000bc 	.word	0x200000bc
 8000b08:	200000d0 	.word	0x200000d0
 8000b0c:	200000e8 	.word	0x200000e8
 8000b10:	200000b4 	.word	0x200000b4
 8000b14:	200000b8 	.word	0x200000b8

08000b18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000b1e:	e019      	b.n	8000b54 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8000b20:	f000 f95c 	bl	8000ddc <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000b24:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <prvCheckTasksWaitingTermination+0x4c>)
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	68db      	ldr	r3, [r3, #12]
 8000b2a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	3304      	adds	r3, #4
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fb80 	bl	8000236 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8000b36:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <prvCheckTasksWaitingTermination+0x50>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	4a0a      	ldr	r2, [pc, #40]	; (8000b68 <prvCheckTasksWaitingTermination+0x50>)
 8000b3e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8000b40:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <prvCheckTasksWaitingTermination+0x54>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	3b01      	subs	r3, #1
 8000b46:	4a09      	ldr	r2, [pc, #36]	; (8000b6c <prvCheckTasksWaitingTermination+0x54>)
 8000b48:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8000b4a:	f000 f95f 	bl	8000e0c <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f000 f80e 	bl	8000b70 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <prvCheckTasksWaitingTermination+0x54>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d1e1      	bne.n	8000b20 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8000b5c:	bf00      	nop
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	200000d0 	.word	0x200000d0
 8000b68:	200000fc 	.word	0x200000fc
 8000b6c:	200000e4 	.word	0x200000e4

08000b70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f000 fa6b 	bl	8001058 <vPortFree>
                vPortFree( pxTCB );
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f000 fa68 	bl	8001058 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000b94:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <prvResetNextTaskUnblockTime+0x2c>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d104      	bne.n	8000ba8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8000b9e:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <prvResetNextTaskUnblockTime+0x30>)
 8000ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8000ba6:	e005      	b.n	8000bb4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000ba8:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <prvResetNextTaskUnblockTime+0x2c>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	68db      	ldr	r3, [r3, #12]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a03      	ldr	r2, [pc, #12]	; (8000bc0 <prvResetNextTaskUnblockTime+0x30>)
 8000bb2:	6013      	str	r3, [r2, #0]
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr
 8000bbc:	200000b4 	.word	0x200000b4
 8000bc0:	2000011c 	.word	0x2000011c

08000bc4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8000bce:	4b36      	ldr	r3, [pc, #216]	; (8000ca8 <prvAddCurrentTaskToDelayedList+0xe4>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000bd4:	4b35      	ldr	r3, [pc, #212]	; (8000cac <prvAddCurrentTaskToDelayedList+0xe8>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	3304      	adds	r3, #4
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff fb2b 	bl	8000236 <uxListRemove>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d10b      	bne.n	8000bfe <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8000be6:	4b31      	ldr	r3, [pc, #196]	; (8000cac <prvAddCurrentTaskToDelayedList+0xe8>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bec:	2201      	movs	r2, #1
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	43da      	mvns	r2, r3
 8000bf4:	4b2e      	ldr	r3, [pc, #184]	; (8000cb0 <prvAddCurrentTaskToDelayedList+0xec>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	4a2d      	ldr	r2, [pc, #180]	; (8000cb0 <prvAddCurrentTaskToDelayedList+0xec>)
 8000bfc:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c04:	d124      	bne.n	8000c50 <prvAddCurrentTaskToDelayedList+0x8c>
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d021      	beq.n	8000c50 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000c0c:	4b29      	ldr	r3, [pc, #164]	; (8000cb4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	613b      	str	r3, [r7, #16]
 8000c12:	4b26      	ldr	r3, [pc, #152]	; (8000cac <prvAddCurrentTaskToDelayedList+0xe8>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	4b24      	ldr	r3, [pc, #144]	; (8000cac <prvAddCurrentTaskToDelayedList+0xe8>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	6892      	ldr	r2, [r2, #8]
 8000c22:	60da      	str	r2, [r3, #12]
 8000c24:	4b21      	ldr	r3, [pc, #132]	; (8000cac <prvAddCurrentTaskToDelayedList+0xe8>)
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	3204      	adds	r2, #4
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	4b1e      	ldr	r3, [pc, #120]	; (8000cac <prvAddCurrentTaskToDelayedList+0xe8>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	1d1a      	adds	r2, r3, #4
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	4b1c      	ldr	r3, [pc, #112]	; (8000cac <prvAddCurrentTaskToDelayedList+0xe8>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a1d      	ldr	r2, [pc, #116]	; (8000cb4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8000c40:	615a      	str	r2, [r3, #20]
 8000c42:	4b1c      	ldr	r3, [pc, #112]	; (8000cb4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	3301      	adds	r3, #1
 8000c48:	4a1a      	ldr	r2, [pc, #104]	; (8000cb4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8000c4a:	6013      	str	r3, [r2, #0]
 8000c4c:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8000c4e:	e026      	b.n	8000c9e <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8000c50:	697a      	ldr	r2, [r7, #20]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8000c58:	4b14      	ldr	r3, [pc, #80]	; (8000cac <prvAddCurrentTaskToDelayedList+0xe8>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	68fa      	ldr	r2, [r7, #12]
 8000c5e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8000c60:	68fa      	ldr	r2, [r7, #12]
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d209      	bcs.n	8000c7c <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000c68:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <prvAddCurrentTaskToDelayedList+0xe8>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	3304      	adds	r3, #4
 8000c72:	4619      	mov	r1, r3
 8000c74:	4610      	mov	r0, r2
 8000c76:	f7ff faa6 	bl	80001c6 <vListInsert>
}
 8000c7a:	e010      	b.n	8000c9e <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <prvAddCurrentTaskToDelayedList+0xf8>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <prvAddCurrentTaskToDelayedList+0xe8>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	3304      	adds	r3, #4
 8000c86:	4619      	mov	r1, r3
 8000c88:	4610      	mov	r0, r2
 8000c8a:	f7ff fa9c 	bl	80001c6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	68fa      	ldr	r2, [r7, #12]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d202      	bcs.n	8000c9e <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 8000c98:	4a09      	ldr	r2, [pc, #36]	; (8000cc0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	6013      	str	r3, [r2, #0]
}
 8000c9e:	bf00      	nop
 8000ca0:	3718      	adds	r7, #24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000100 	.word	0x20000100
 8000cac:	20000024 	.word	0x20000024
 8000cb0:	20000104 	.word	0x20000104
 8000cb4:	200000e8 	.word	0x200000e8
 8000cb8:	200000b8 	.word	0x200000b8
 8000cbc:	200000b4 	.word	0x200000b4
 8000cc0:	2000011c 	.word	0x2000011c

08000cc4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	3b04      	subs	r3, #4
 8000cd4:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000cdc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	3b04      	subs	r3, #4
 8000ce2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	f023 0201 	bic.w	r2, r3, #1
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	3b04      	subs	r3, #4
 8000cf2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8000cf4:	4a08      	ldr	r2, [pc, #32]	; (8000d18 <pxPortInitialiseStack+0x54>)
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	3b14      	subs	r3, #20
 8000cfe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	3b20      	subs	r3, #32
 8000d0a:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8000d0c:	68fb      	ldr	r3, [r7, #12]
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3714      	adds	r7, #20
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr
 8000d18:	08000d1d 	.word	0x08000d1d

08000d1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	603b      	str	r3, [r7, #0]
        __asm volatile
 8000d26:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000d2a:	f383 8811 	msr	BASEPRI, r3
 8000d2e:	f3bf 8f6f 	isb	sy
 8000d32:	f3bf 8f4f 	dsb	sy
 8000d36:	607b      	str	r3, [r7, #4]
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8000d38:	bf00      	nop
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d0fc      	beq.n	8000d3a <prvTaskExitError+0x1e>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bc80      	pop	{r7}
 8000d48:	4770      	bx	lr
 8000d4a:	0000      	movs	r0, r0
 8000d4c:	0000      	movs	r0, r0
	...

08000d50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <pxCurrentTCBConst2>)
 8000d52:	6819      	ldr	r1, [r3, #0]
 8000d54:	6808      	ldr	r0, [r1, #0]
 8000d56:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000d5a:	f380 8809 	msr	PSP, r0
 8000d5e:	f3bf 8f6f 	isb	sy
 8000d62:	f04f 0000 	mov.w	r0, #0
 8000d66:	f380 8811 	msr	BASEPRI, r0
 8000d6a:	f04e 0e0d 	orr.w	lr, lr, #13
 8000d6e:	4770      	bx	lr

08000d70 <pxCurrentTCBConst2>:
 8000d70:	20000024 	.word	0x20000024
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8000d74:	bf00      	nop
 8000d76:	bf00      	nop

08000d78 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8000d78:	4806      	ldr	r0, [pc, #24]	; (8000d94 <prvPortStartFirstTask+0x1c>)
 8000d7a:	6800      	ldr	r0, [r0, #0]
 8000d7c:	6800      	ldr	r0, [r0, #0]
 8000d7e:	f380 8808 	msr	MSP, r0
 8000d82:	b662      	cpsie	i
 8000d84:	b661      	cpsie	f
 8000d86:	f3bf 8f4f 	dsb	sy
 8000d8a:	f3bf 8f6f 	isb	sy
 8000d8e:	df00      	svc	0
 8000d90:	bf00      	nop
 8000d92:	0000      	.short	0x0000
 8000d94:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8000d98:	bf00      	nop
 8000d9a:	bf00      	nop

08000d9c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
            *pucFirstUserPriorityRegister = ulOriginalPriority;
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8000da0:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <xPortStartScheduler+0x38>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a0b      	ldr	r2, [pc, #44]	; (8000dd4 <xPortStartScheduler+0x38>)
 8000da6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8000daa:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8000dac:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <xPortStartScheduler+0x38>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a08      	ldr	r2, [pc, #32]	; (8000dd4 <xPortStartScheduler+0x38>)
 8000db2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000db6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8000db8:	f000 f886 	bl	8000ec8 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <xPortStartScheduler+0x3c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8000dc2:	f7ff ffd9 	bl	8000d78 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8000dc6:	f7ff fe09 	bl	80009dc <vTaskSwitchContext>
    prvTaskExitError();
 8000dca:	f7ff ffa7 	bl	8000d1c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8000dce:	2300      	movs	r3, #0
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	e000ed20 	.word	0xe000ed20
 8000dd8:	20000004 	.word	0x20000004

08000ddc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000de6:	f383 8811 	msr	BASEPRI, r3
 8000dea:	f3bf 8f6f 	isb	sy
 8000dee:	f3bf 8f4f 	dsb	sy
 8000df2:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8000df4:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <vPortEnterCritical+0x2c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	4a03      	ldr	r2, [pc, #12]	; (8000e08 <vPortEnterCritical+0x2c>)
 8000dfc:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr
 8000e08:	20000004 	.word	0x20000004

08000e0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8000e12:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <vPortExitCritical+0x2c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	3b01      	subs	r3, #1
 8000e18:	4a07      	ldr	r2, [pc, #28]	; (8000e38 <vPortExitCritical+0x2c>)
 8000e1a:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <vPortExitCritical+0x2c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d104      	bne.n	8000e2e <vPortExitCritical+0x22>
 8000e24:	2300      	movs	r3, #0
 8000e26:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr
 8000e38:	20000004 	.word	0x20000004
 8000e3c:	00000000 	.word	0x00000000

08000e40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8000e40:	f3ef 8009 	mrs	r0, PSP
 8000e44:	f3bf 8f6f 	isb	sy
 8000e48:	4b0d      	ldr	r3, [pc, #52]	; (8000e80 <pxCurrentTCBConst>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000e50:	6010      	str	r0, [r2, #0]
 8000e52:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000e56:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8000e5a:	f380 8811 	msr	BASEPRI, r0
 8000e5e:	f7ff fdbd 	bl	80009dc <vTaskSwitchContext>
 8000e62:	f04f 0000 	mov.w	r0, #0
 8000e66:	f380 8811 	msr	BASEPRI, r0
 8000e6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000e6e:	6819      	ldr	r1, [r3, #0]
 8000e70:	6808      	ldr	r0, [r1, #0]
 8000e72:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000e76:	f380 8809 	msr	PSP, r0
 8000e7a:	f3bf 8f6f 	isb	sy
 8000e7e:	4770      	bx	lr

08000e80 <pxCurrentTCBConst>:
 8000e80:	20000024 	.word	0x20000024
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8000e84:	bf00      	nop
 8000e86:	bf00      	nop

08000e88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
        __asm volatile
 8000e8e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000e92:	f383 8811 	msr	BASEPRI, r3
 8000e96:	f3bf 8f6f 	isb	sy
 8000e9a:	f3bf 8f4f 	dsb	sy
 8000e9e:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8000ea0:	f7ff fc96 	bl	80007d0 <xTaskIncrementTick>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d003      	beq.n	8000eb2 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <SysTick_Handler+0x3c>)
 8000eac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	e000ed04 	.word	0xe000ed04

08000ec8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000ecc:	4b07      	ldr	r3, [pc, #28]	; (8000eec <vPortSetupTimerInterrupt+0x24>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <vPortSetupTimerInterrupt+0x28>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <vPortSetupTimerInterrupt+0x2c>)
 8000eda:	4a07      	ldr	r2, [pc, #28]	; (8000ef8 <vPortSetupTimerInterrupt+0x30>)
 8000edc:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000ede:	4b03      	ldr	r3, [pc, #12]	; (8000eec <vPortSetupTimerInterrupt+0x24>)
 8000ee0:	2207      	movs	r2, #7
 8000ee2:	601a      	str	r2, [r3, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr
 8000eec:	e000e010 	.word	0xe000e010
 8000ef0:	e000e018 	.word	0xe000e018
 8000ef4:	e000e014 	.word	0xe000e014
 8000ef8:	0001193f 	.word	0x0001193f

08000efc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	60fb      	str	r3, [r7, #12]

    vTaskSuspendAll();
 8000f08:	f7ff fb68 	bl	80005dc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8000f0c:	4b4c      	ldr	r3, [pc, #304]	; (8001040 <pvPortMalloc+0x144>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d101      	bne.n	8000f18 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8000f14:	f000 f8e0 	bl	80010d8 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000f18:	4b4a      	ldr	r3, [pc, #296]	; (8001044 <pvPortMalloc+0x148>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	f040 8086 	bne.w	8001032 <pvPortMalloc+0x136>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d01e      	beq.n	8000f6a <pvPortMalloc+0x6e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8000f2c:	2208      	movs	r2, #8
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d218      	bcs.n	8000f6a <pvPortMalloc+0x6e>
            {
                xWantedSize += xHeapStructSize;
 8000f38:	2208      	movs	r2, #8
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d011      	beq.n	8000f6e <pvPortMalloc+0x72>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f023 0307 	bic.w	r3, r3, #7
 8000f50:	3308      	adds	r3, #8
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d205      	bcs.n	8000f64 <pvPortMalloc+0x68>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f023 0307 	bic.w	r3, r3, #7
 8000f5e:	3308      	adds	r3, #8
 8000f60:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000f62:	e004      	b.n	8000f6e <pvPortMalloc+0x72>
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
                    }
                    else
                    {
                        xWantedSize = 0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000f68:	e001      	b.n	8000f6e <pvPortMalloc+0x72>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	607b      	str	r3, [r7, #4]
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d05e      	beq.n	8001032 <pvPortMalloc+0x136>
 8000f74:	4b34      	ldr	r3, [pc, #208]	; (8001048 <pvPortMalloc+0x14c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d859      	bhi.n	8001032 <pvPortMalloc+0x136>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8000f7e:	4b33      	ldr	r3, [pc, #204]	; (800104c <pvPortMalloc+0x150>)
 8000f80:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 8000f82:	4b32      	ldr	r3, [pc, #200]	; (800104c <pvPortMalloc+0x150>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000f88:	e004      	b.n	8000f94 <pvPortMalloc+0x98>
                {
                    pxPreviousBlock = pxBlock;
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d903      	bls.n	8000fa6 <pvPortMalloc+0xaa>
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d1f1      	bne.n	8000f8a <pvPortMalloc+0x8e>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8000fa6:	4b26      	ldr	r3, [pc, #152]	; (8001040 <pvPortMalloc+0x144>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	697a      	ldr	r2, [r7, #20]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d040      	beq.n	8001032 <pvPortMalloc+0x136>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2208      	movs	r2, #8
 8000fb6:	4413      	add	r3, r2
 8000fb8:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	685a      	ldr	r2, [r3, #4]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	1ad2      	subs	r2, r2, r3
 8000fca:	2308      	movs	r3, #8
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d90f      	bls.n	8000ff2 <pvPortMalloc+0xf6>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000fd2:	697a      	ldr	r2, [r7, #20]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	685a      	ldr	r2, [r3, #4]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	1ad2      	subs	r2, r2, r3
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000fec:	68b8      	ldr	r0, [r7, #8]
 8000fee:	f000 f8d5 	bl	800119c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000ff2:	4b15      	ldr	r3, [pc, #84]	; (8001048 <pvPortMalloc+0x14c>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	4a12      	ldr	r2, [pc, #72]	; (8001048 <pvPortMalloc+0x14c>)
 8000ffe:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <pvPortMalloc+0x14c>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <pvPortMalloc+0x154>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	429a      	cmp	r2, r3
 800100a:	d203      	bcs.n	8001014 <pvPortMalloc+0x118>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800100c:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <pvPortMalloc+0x14c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a0f      	ldr	r2, [pc, #60]	; (8001050 <pvPortMalloc+0x154>)
 8001012:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	685a      	ldr	r2, [r3, #4]
 8001018:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <pvPortMalloc+0x148>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	431a      	orrs	r2, r3
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8001028:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <pvPortMalloc+0x158>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	3301      	adds	r3, #1
 800102e:	4a09      	ldr	r2, [pc, #36]	; (8001054 <pvPortMalloc+0x158>)
 8001030:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8001032:	f7ff fae1 	bl	80005f8 <xTaskResumeAll>
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
 8001036:	68fb      	ldr	r3, [r7, #12]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3718      	adds	r7, #24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20002130 	.word	0x20002130
 8001044:	20002144 	.word	0x20002144
 8001048:	20002134 	.word	0x20002134
 800104c:	20002128 	.word	0x20002128
 8001050:	20002138 	.word	0x20002138
 8001054:	2000213c 	.word	0x2000213c

08001058 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d02c      	beq.n	80010c4 <vPortFree+0x6c>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800106a:	2308      	movs	r3, #8
 800106c:	425b      	negs	r3, r3
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	4413      	add	r3, r2
 8001072:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	685a      	ldr	r2, [r3, #4]
 800107c:	4b13      	ldr	r3, [pc, #76]	; (80010cc <vPortFree+0x74>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4013      	ands	r3, r2
 8001082:	2b00      	cmp	r3, #0
 8001084:	d01e      	beq.n	80010c4 <vPortFree+0x6c>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d11a      	bne.n	80010c4 <vPortFree+0x6c>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	685a      	ldr	r2, [r3, #4]
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <vPortFree+0x74>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	43db      	mvns	r3, r3
 8001098:	401a      	ands	r2, r3
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 800109e:	f7ff fa9d 	bl	80005dc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	685a      	ldr	r2, [r3, #4]
 80010a6:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <vPortFree+0x78>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4413      	add	r3, r2
 80010ac:	4a08      	ldr	r2, [pc, #32]	; (80010d0 <vPortFree+0x78>)
 80010ae:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80010b0:	68b8      	ldr	r0, [r7, #8]
 80010b2:	f000 f873 	bl	800119c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80010b6:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <vPortFree+0x7c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	3301      	adds	r3, #1
 80010bc:	4a05      	ldr	r2, [pc, #20]	; (80010d4 <vPortFree+0x7c>)
 80010be:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80010c0:	f7ff fa9a 	bl	80005f8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80010c4:	bf00      	nop
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20002144 	.word	0x20002144
 80010d0:	20002134 	.word	0x20002134
 80010d4:	20002140 	.word	0x20002140

080010d8 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80010de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010e2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80010e4:	4b27      	ldr	r3, [pc, #156]	; (8001184 <prvHeapInit+0xac>)
 80010e6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d00c      	beq.n	800110c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	3307      	adds	r3, #7
 80010f6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f023 0307 	bic.w	r3, r3, #7
 80010fe:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001100:	68ba      	ldr	r2, [r7, #8]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	4a1f      	ldr	r2, [pc, #124]	; (8001184 <prvHeapInit+0xac>)
 8001108:	4413      	add	r3, r2
 800110a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001110:	4a1d      	ldr	r2, [pc, #116]	; (8001188 <prvHeapInit+0xb0>)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8001116:	4b1c      	ldr	r3, [pc, #112]	; (8001188 <prvHeapInit+0xb0>)
 8001118:	2200      	movs	r2, #0
 800111a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	68ba      	ldr	r2, [r7, #8]
 8001120:	4413      	add	r3, r2
 8001122:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8001124:	2208      	movs	r2, #8
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	1a9b      	subs	r3, r3, r2
 800112a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f023 0307 	bic.w	r3, r3, #7
 8001132:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	4a15      	ldr	r2, [pc, #84]	; (800118c <prvHeapInit+0xb4>)
 8001138:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800113a:	4b14      	ldr	r3, [pc, #80]	; (800118c <prvHeapInit+0xb4>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2200      	movs	r2, #0
 8001140:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8001142:	4b12      	ldr	r3, [pc, #72]	; (800118c <prvHeapInit+0xb4>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	68fa      	ldr	r2, [r7, #12]
 8001152:	1ad2      	subs	r2, r2, r3
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <prvHeapInit+0xb4>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <prvHeapInit+0xb8>)
 8001166:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	4a09      	ldr	r2, [pc, #36]	; (8001194 <prvHeapInit+0xbc>)
 800116e:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001170:	4b09      	ldr	r3, [pc, #36]	; (8001198 <prvHeapInit+0xc0>)
 8001172:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001176:	601a      	str	r2, [r3, #0]
}
 8001178:	bf00      	nop
 800117a:	3714      	adds	r7, #20
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	20000128 	.word	0x20000128
 8001188:	20002128 	.word	0x20002128
 800118c:	20002130 	.word	0x20002130
 8001190:	20002138 	.word	0x20002138
 8001194:	20002134 	.word	0x20002134
 8001198:	20002144 	.word	0x20002144

0800119c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80011a4:	4b27      	ldr	r3, [pc, #156]	; (8001244 <prvInsertBlockIntoFreeList+0xa8>)
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	e002      	b.n	80011b0 <prvInsertBlockIntoFreeList+0x14>
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d8f7      	bhi.n	80011aa <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	68ba      	ldr	r2, [r7, #8]
 80011c4:	4413      	add	r3, r2
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d108      	bne.n	80011de <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	441a      	add	r2, r3
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	441a      	add	r2, r3
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d118      	bne.n	8001224 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	4b14      	ldr	r3, [pc, #80]	; (8001248 <prvInsertBlockIntoFreeList+0xac>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d00d      	beq.n	800121a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685a      	ldr	r2, [r3, #4]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	441a      	add	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	e008      	b.n	800122c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800121a:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <prvInsertBlockIntoFreeList+0xac>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	e003      	b.n	800122c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800122c:	68fa      	ldr	r2, [r7, #12]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	429a      	cmp	r2, r3
 8001232:	d002      	beq.n	800123a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800123a:	bf00      	nop
 800123c:	3714      	adds	r7, #20
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr
 8001244:	20002128 	.word	0x20002128
 8001248:	20002130 	.word	0x20002130

0800124c <EXTI0_IRQHandler>:

/*==========================================================*/
/* ISR FUNCTIONS */
/*==========================================================*/
void EXTI0_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<0);
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <EXTI0_IRQHandler+0x1c>)
 8001252:	695b      	ldr	r3, [r3, #20]
 8001254:	4a04      	ldr	r2, [pc, #16]	; (8001268 <EXTI0_IRQHandler+0x1c>)
 8001256:	f043 0301 	orr.w	r3, r3, #1
 800125a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[0]();
 800125c:	4b03      	ldr	r3, [pc, #12]	; (800126c <EXTI0_IRQHandler+0x20>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4798      	blx	r3

}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40010400 	.word	0x40010400
 800126c:	2000214c 	.word	0x2000214c

08001270 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<1);
 8001274:	4b05      	ldr	r3, [pc, #20]	; (800128c <EXTI1_IRQHandler+0x1c>)
 8001276:	695b      	ldr	r3, [r3, #20]
 8001278:	4a04      	ldr	r2, [pc, #16]	; (800128c <EXTI1_IRQHandler+0x1c>)
 800127a:	f043 0302 	orr.w	r3, r3, #2
 800127e:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[1]();
 8001280:	4b03      	ldr	r3, [pc, #12]	; (8001290 <EXTI1_IRQHandler+0x20>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	4798      	blx	r3

}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40010400 	.word	0x40010400
 8001290:	2000214c 	.word	0x2000214c

08001294 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<2);
 8001298:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <EXTI2_IRQHandler+0x1c>)
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	4a04      	ldr	r2, [pc, #16]	; (80012b0 <EXTI2_IRQHandler+0x1c>)
 800129e:	f043 0304 	orr.w	r3, r3, #4
 80012a2:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[2]();
 80012a4:	4b03      	ldr	r3, [pc, #12]	; (80012b4 <EXTI2_IRQHandler+0x20>)
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	4798      	blx	r3
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40010400 	.word	0x40010400
 80012b4:	2000214c 	.word	0x2000214c

080012b8 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<3);
 80012bc:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <EXTI3_IRQHandler+0x1c>)
 80012be:	695b      	ldr	r3, [r3, #20]
 80012c0:	4a04      	ldr	r2, [pc, #16]	; (80012d4 <EXTI3_IRQHandler+0x1c>)
 80012c2:	f043 0308 	orr.w	r3, r3, #8
 80012c6:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[3]();
 80012c8:	4b03      	ldr	r3, [pc, #12]	; (80012d8 <EXTI3_IRQHandler+0x20>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	4798      	blx	r3
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40010400 	.word	0x40010400
 80012d8:	2000214c 	.word	0x2000214c

080012dc <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<4);
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <EXTI4_IRQHandler+0x1c>)
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	4a04      	ldr	r2, [pc, #16]	; (80012f8 <EXTI4_IRQHandler+0x1c>)
 80012e6:	f043 0310 	orr.w	r3, r3, #16
 80012ea:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[4]();
 80012ec:	4b03      	ldr	r3, [pc, #12]	; (80012fc <EXTI4_IRQHandler+0x20>)
 80012ee:	691b      	ldr	r3, [r3, #16]
 80012f0:	4798      	blx	r3
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40010400 	.word	0x40010400
 80012fc:	2000214c 	.word	0x2000214c

08001300 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	if(EXTI->PR & 1<<5) { EXTI->PR |=(1<<5) ; GP_IRQ_CALLBACK[5](); }
 8001304:	4b26      	ldr	r3, [pc, #152]	; (80013a0 <EXTI9_5_IRQHandler+0xa0>)
 8001306:	695b      	ldr	r3, [r3, #20]
 8001308:	f003 0320 	and.w	r3, r3, #32
 800130c:	2b00      	cmp	r3, #0
 800130e:	d008      	beq.n	8001322 <EXTI9_5_IRQHandler+0x22>
 8001310:	4b23      	ldr	r3, [pc, #140]	; (80013a0 <EXTI9_5_IRQHandler+0xa0>)
 8001312:	695b      	ldr	r3, [r3, #20]
 8001314:	4a22      	ldr	r2, [pc, #136]	; (80013a0 <EXTI9_5_IRQHandler+0xa0>)
 8001316:	f043 0320 	orr.w	r3, r3, #32
 800131a:	6153      	str	r3, [r2, #20]
 800131c:	4b21      	ldr	r3, [pc, #132]	; (80013a4 <EXTI9_5_IRQHandler+0xa4>)
 800131e:	695b      	ldr	r3, [r3, #20]
 8001320:	4798      	blx	r3
	if(EXTI->PR & 1<<6) { EXTI->PR |=(1<<6) ; GP_IRQ_CALLBACK[6](); }
 8001322:	4b1f      	ldr	r3, [pc, #124]	; (80013a0 <EXTI9_5_IRQHandler+0xa0>)
 8001324:	695b      	ldr	r3, [r3, #20]
 8001326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800132a:	2b00      	cmp	r3, #0
 800132c:	d008      	beq.n	8001340 <EXTI9_5_IRQHandler+0x40>
 800132e:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <EXTI9_5_IRQHandler+0xa0>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	4a1b      	ldr	r2, [pc, #108]	; (80013a0 <EXTI9_5_IRQHandler+0xa0>)
 8001334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001338:	6153      	str	r3, [r2, #20]
 800133a:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <EXTI9_5_IRQHandler+0xa4>)
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	4798      	blx	r3
	if(EXTI->PR & 1<<7) { EXTI->PR |=(1<<7) ; GP_IRQ_CALLBACK[7](); }
 8001340:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <EXTI9_5_IRQHandler+0xa0>)
 8001342:	695b      	ldr	r3, [r3, #20]
 8001344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001348:	2b00      	cmp	r3, #0
 800134a:	d008      	beq.n	800135e <EXTI9_5_IRQHandler+0x5e>
 800134c:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <EXTI9_5_IRQHandler+0xa0>)
 800134e:	695b      	ldr	r3, [r3, #20]
 8001350:	4a13      	ldr	r2, [pc, #76]	; (80013a0 <EXTI9_5_IRQHandler+0xa0>)
 8001352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001356:	6153      	str	r3, [r2, #20]
 8001358:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <EXTI9_5_IRQHandler+0xa4>)
 800135a:	69db      	ldr	r3, [r3, #28]
 800135c:	4798      	blx	r3
	if(EXTI->PR & 1<<8) { EXTI->PR |=(1<<8) ; GP_IRQ_CALLBACK[8](); }
 800135e:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <EXTI9_5_IRQHandler+0xa0>)
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001366:	2b00      	cmp	r3, #0
 8001368:	d008      	beq.n	800137c <EXTI9_5_IRQHandler+0x7c>
 800136a:	4b0d      	ldr	r3, [pc, #52]	; (80013a0 <EXTI9_5_IRQHandler+0xa0>)
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	4a0c      	ldr	r2, [pc, #48]	; (80013a0 <EXTI9_5_IRQHandler+0xa0>)
 8001370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001374:	6153      	str	r3, [r2, #20]
 8001376:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <EXTI9_5_IRQHandler+0xa4>)
 8001378:	6a1b      	ldr	r3, [r3, #32]
 800137a:	4798      	blx	r3
	if(EXTI->PR & 1<<9) { EXTI->PR |=(1<<9) ; GP_IRQ_CALLBACK[9](); }
 800137c:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <EXTI9_5_IRQHandler+0xa0>)
 800137e:	695b      	ldr	r3, [r3, #20]
 8001380:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001384:	2b00      	cmp	r3, #0
 8001386:	d008      	beq.n	800139a <EXTI9_5_IRQHandler+0x9a>
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <EXTI9_5_IRQHandler+0xa0>)
 800138a:	695b      	ldr	r3, [r3, #20]
 800138c:	4a04      	ldr	r2, [pc, #16]	; (80013a0 <EXTI9_5_IRQHandler+0xa0>)
 800138e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001392:	6153      	str	r3, [r2, #20]
 8001394:	4b03      	ldr	r3, [pc, #12]	; (80013a4 <EXTI9_5_IRQHandler+0xa4>)
 8001396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001398:	4798      	blx	r3

}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40010400 	.word	0x40010400
 80013a4:	2000214c 	.word	0x2000214c

080013a8 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<0);
 80013ac:	4b04      	ldr	r3, [pc, #16]	; (80013c0 <EXTI15_10_IRQHandler+0x18>)
 80013ae:	695b      	ldr	r3, [r3, #20]
 80013b0:	4a03      	ldr	r2, [pc, #12]	; (80013c0 <EXTI15_10_IRQHandler+0x18>)
 80013b2:	f043 0301 	orr.w	r3, r3, #1
 80013b6:	6153      	str	r3, [r2, #20]

}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr
 80013c0:	40010400 	.word	0x40010400

080013c4 <USART1_IRQHandler>:



//ISR
void USART1_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
	Global_UART_Config[0].P_IRQ_Call_Back ();
 80013c8:	4b02      	ldr	r3, [pc, #8]	; (80013d4 <USART1_IRQHandler+0x10>)
 80013ca:	691b      	ldr	r3, [r3, #16]
 80013cc:	4798      	blx	r3

}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20002188 	.word	0x20002188

080013d8 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
	Global_UART_Config[1].P_IRQ_Call_Back ();
 80013dc:	4b02      	ldr	r3, [pc, #8]	; (80013e8 <USART2_IRQHandler+0x10>)
 80013de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e0:	4798      	blx	r3

}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20002188 	.word	0x20002188

080013ec <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
	Global_UART_Config[2].P_IRQ_Call_Back ();
 80013f0:	4b02      	ldr	r3, [pc, #8]	; (80013fc <USART3_IRQHandler+0x10>)
 80013f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013f4:	4798      	blx	r3

}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20002188 	.word	0x20002188

08001400 <Get_CRLH_Postion>:

#include "STM32F103C6_GPIO_DRIVERS.h"


uint8_t Get_CRLH_Postion(uint16_t PinNumber)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 800140a:	88fb      	ldrh	r3, [r7, #6]
 800140c:	2b80      	cmp	r3, #128	; 0x80
 800140e:	d042      	beq.n	8001496 <Get_CRLH_Postion+0x96>
 8001410:	2b80      	cmp	r3, #128	; 0x80
 8001412:	dc11      	bgt.n	8001438 <Get_CRLH_Postion+0x38>
 8001414:	2b08      	cmp	r3, #8
 8001416:	d036      	beq.n	8001486 <Get_CRLH_Postion+0x86>
 8001418:	2b08      	cmp	r3, #8
 800141a:	dc06      	bgt.n	800142a <Get_CRLH_Postion+0x2a>
 800141c:	2b02      	cmp	r3, #2
 800141e:	d02e      	beq.n	800147e <Get_CRLH_Postion+0x7e>
 8001420:	2b04      	cmp	r3, #4
 8001422:	d02e      	beq.n	8001482 <Get_CRLH_Postion+0x82>
 8001424:	2b01      	cmp	r3, #1
 8001426:	d028      	beq.n	800147a <Get_CRLH_Postion+0x7a>
 8001428:	e047      	b.n	80014ba <Get_CRLH_Postion+0xba>
 800142a:	2b20      	cmp	r3, #32
 800142c:	d02f      	beq.n	800148e <Get_CRLH_Postion+0x8e>
 800142e:	2b40      	cmp	r3, #64	; 0x40
 8001430:	d02f      	beq.n	8001492 <Get_CRLH_Postion+0x92>
 8001432:	2b10      	cmp	r3, #16
 8001434:	d029      	beq.n	800148a <Get_CRLH_Postion+0x8a>
 8001436:	e040      	b.n	80014ba <Get_CRLH_Postion+0xba>
 8001438:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800143c:	d033      	beq.n	80014a6 <Get_CRLH_Postion+0xa6>
 800143e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001442:	dc09      	bgt.n	8001458 <Get_CRLH_Postion+0x58>
 8001444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001448:	d029      	beq.n	800149e <Get_CRLH_Postion+0x9e>
 800144a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800144e:	d028      	beq.n	80014a2 <Get_CRLH_Postion+0xa2>
 8001450:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001454:	d021      	beq.n	800149a <Get_CRLH_Postion+0x9a>
 8001456:	e030      	b.n	80014ba <Get_CRLH_Postion+0xba>
 8001458:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800145c:	d027      	beq.n	80014ae <Get_CRLH_Postion+0xae>
 800145e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001462:	dc03      	bgt.n	800146c <Get_CRLH_Postion+0x6c>
 8001464:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001468:	d01f      	beq.n	80014aa <Get_CRLH_Postion+0xaa>
 800146a:	e026      	b.n	80014ba <Get_CRLH_Postion+0xba>
 800146c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001470:	d01f      	beq.n	80014b2 <Get_CRLH_Postion+0xb2>
 8001472:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001476:	d01e      	beq.n	80014b6 <Get_CRLH_Postion+0xb6>
 8001478:	e01f      	b.n	80014ba <Get_CRLH_Postion+0xba>
	{
	case GPIO_PIN_0:
		return 0;
 800147a:	2300      	movs	r3, #0
 800147c:	e01e      	b.n	80014bc <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_1:
		return 4;
 800147e:	2304      	movs	r3, #4
 8001480:	e01c      	b.n	80014bc <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_2:
		return 8;
 8001482:	2308      	movs	r3, #8
 8001484:	e01a      	b.n	80014bc <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_3:
		return 12;
 8001486:	230c      	movs	r3, #12
 8001488:	e018      	b.n	80014bc <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_4:
		return 16;
 800148a:	2310      	movs	r3, #16
 800148c:	e016      	b.n	80014bc <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_5:
		return 20;
 800148e:	2314      	movs	r3, #20
 8001490:	e014      	b.n	80014bc <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_6:
		return 24;
 8001492:	2318      	movs	r3, #24
 8001494:	e012      	b.n	80014bc <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_7:
		return 28;
 8001496:	231c      	movs	r3, #28
 8001498:	e010      	b.n	80014bc <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_8:
		return 0;
 800149a:	2300      	movs	r3, #0
 800149c:	e00e      	b.n	80014bc <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_9:
		return 4;
 800149e:	2304      	movs	r3, #4
 80014a0:	e00c      	b.n	80014bc <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_10:
		return 8;
 80014a2:	2308      	movs	r3, #8
 80014a4:	e00a      	b.n	80014bc <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_11:
		return 12;
 80014a6:	230c      	movs	r3, #12
 80014a8:	e008      	b.n	80014bc <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_12:
		return 16;
 80014aa:	2310      	movs	r3, #16
 80014ac:	e006      	b.n	80014bc <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_13:
		return 20;
 80014ae:	2314      	movs	r3, #20
 80014b0:	e004      	b.n	80014bc <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_14:
		return 24;
 80014b2:	2318      	movs	r3, #24
 80014b4:	e002      	b.n	80014bc <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_15:
		return 28;
 80014b6:	231c      	movs	r3, #28
 80014b8:	e000      	b.n	80014bc <Get_CRLH_Postion+0xbc>
		break;
	default:
		return 0;
 80014ba:	2300      	movs	r3, #0
		break;

	}
}
 80014bc:	4618      	mov	r0, r3
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr

080014c6 <MCAL_GPIO_Init>:
 * note -                   -stmf103c6 MCU has GPIO A,B,C,D,E Modules
 *                           but LQFP48 Package has only GPIO A,B, Part of C/D exported external pins
 */
/**================================================================= */
void MCAL_GPIO_Init( GPIO_TypeDef *GPIOx , GPIO_Pin_Configure_t *Pin_Config )
{
 80014c6:	b590      	push	{r4, r7, lr}
 80014c8:	b085      	sub	sp, #20
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
 80014ce:	6039      	str	r1, [r7, #0]

	//To Init Any Pins Must Write On Port configuration register low (GPIOx_CRL) 0>>>7
	//Or register low (GPIOx_CRH) 8>>>15
	//We Determine The Position Should Write On It In  configuration register By Determine First Position Pin

	volatile uint32_t *ConfigureRegister = NULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60bb      	str	r3, [r7, #8]
	uint8_t   ConfigurePin=0;     //In This Variable We Store The Configure Pin
 80014d4:	2300      	movs	r3, #0
 80014d6:	73fb      	strb	r3, [r7, #15]

	ConfigureRegister = (Pin_Config->GPIO_Pin_Number < GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH ;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	881b      	ldrh	r3, [r3, #0]
 80014dc:	2bff      	cmp	r3, #255	; 0xff
 80014de:	d801      	bhi.n	80014e4 <MCAL_GPIO_Init+0x1e>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	e001      	b.n	80014e8 <MCAL_GPIO_Init+0x22>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3304      	adds	r3, #4
 80014e8:	60bb      	str	r3, [r7, #8]
	//Clear CNF & MODE
	*(ConfigureRegister) &=~(0xf<<Get_CRLH_Postion(Pin_Config->GPIO_Pin_Number));
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff ff86 	bl	8001400 <Get_CRLH_Postion>
 80014f4:	4603      	mov	r3, r0
 80014f6:	461a      	mov	r2, r3
 80014f8:	230f      	movs	r3, #15
 80014fa:	4093      	lsls	r3, r2
 80014fc:	43da      	mvns	r2, r3
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	401a      	ands	r2, r3
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	601a      	str	r2, [r3, #0]

	if (Pin_Config->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD || Pin_Config->GPIO_MODE ==GPIO_MODE_OUTPUT_AF_PP || Pin_Config->GPIO_MODE ==GPIO_MODE_OUTPUT_OD || Pin_Config->GPIO_MODE ==GPIO_MODE_OUTPUT_PP)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	789b      	ldrb	r3, [r3, #2]
 800150c:	2b07      	cmp	r3, #7
 800150e:	d00b      	beq.n	8001528 <MCAL_GPIO_Init+0x62>
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	789b      	ldrb	r3, [r3, #2]
 8001514:	2b06      	cmp	r3, #6
 8001516:	d007      	beq.n	8001528 <MCAL_GPIO_Init+0x62>
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	789b      	ldrb	r3, [r3, #2]
 800151c:	2b05      	cmp	r3, #5
 800151e:	d003      	beq.n	8001528 <MCAL_GPIO_Init+0x62>
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	789b      	ldrb	r3, [r3, #2]
 8001524:	2b04      	cmp	r3, #4
 8001526:	d10e      	bne.n	8001546 <MCAL_GPIO_Init+0x80>
	{

		//I sure The User Want Make The Pin As Output & in Case Output Should Configure Mode(Speed) & CNF(State)
		ConfigurePin = ((( (Pin_Config->GPIO_MODE - 4)<<2) |(Pin_Config->GPIO_OUTPUT_SPEED)) & 0x0f); //Shift 2 to Set The CNF Bits
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	789b      	ldrb	r3, [r3, #2]
 800152c:	3b04      	subs	r3, #4
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	b25a      	sxtb	r2, r3
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	78db      	ldrb	r3, [r3, #3]
 8001536:	b25b      	sxtb	r3, r3
 8001538:	4313      	orrs	r3, r2
 800153a:	b25b      	sxtb	r3, r3
 800153c:	b2db      	uxtb	r3, r3
 800153e:	f003 030f 	and.w	r3, r3, #15
 8001542:	73fb      	strb	r3, [r7, #15]
 8001544:	e028      	b.n	8001598 <MCAL_GPIO_Init+0xd2>

	}

	else  //I sure The User Want Make The Pin As Input & in Case input Should Configure Mode(Speed)=00 & CNF(State)
	{
		if(Pin_Config->GPIO_MODE == GPIO_MODE_INPUT_FLO || GPIO_MODE_Analog)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	789b      	ldrb	r3, [r3, #2]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d107      	bne.n	800155e <MCAL_GPIO_Init+0x98>
		{
			ConfigurePin = (( ( (Pin_Config->GPIO_MODE) <<2) | 0x0) & 0x0F);      //Shift 2 to Set The CNF Bits
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	789b      	ldrb	r3, [r3, #2]
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	b2db      	uxtb	r3, r3
 8001556:	f003 030f 	and.w	r3, r3, #15
 800155a:	73fb      	strb	r3, [r7, #15]
 800155c:	e01c      	b.n	8001598 <MCAL_GPIO_Init+0xd2>
		}

		else if(Pin_Config->GPIO_MODE == GPIO_MODE_AF_INPUT)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	789b      	ldrb	r3, [r3, #2]
 8001562:	2b08      	cmp	r3, #8
 8001564:	d102      	bne.n	800156c <MCAL_GPIO_Init+0xa6>
		{
			ConfigurePin = (( ( (GPIO_MODE_INPUT_FLO) <<2) | 0x0) & 0x0f);      //Shift 2 to Set The CNF Bits
 8001566:	2304      	movs	r3, #4
 8001568:	73fb      	strb	r3, [r7, #15]
 800156a:	e015      	b.n	8001598 <MCAL_GPIO_Init+0xd2>
		}
		else  //PullUp Or PullDown
		{
			ConfigurePin = ( (((GPIO_MODE_INPUT_PU)<<2  ) |  0x0) & 0x0f);
 800156c:	2308      	movs	r3, #8
 800156e:	73fb      	strb	r3, [r7, #15]
			// 20. Port bit configuration table
			/*In Case GPIO_MODE_INPUT_PU OR GPIO_MODE_INPUT_PD We Put The Same Value 10 In CNF
			And Go To ODR IF GPIO_MODE_INPUT_PU Put 1 And If GPIO_MODE_INPUT_PD Put In ODR 0 Shifting By Bin Number*/
			if(Pin_Config->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	789b      	ldrb	r3, [r3, #2]
 8001574:	2b02      	cmp	r3, #2
 8001576:	d107      	bne.n	8001588 <MCAL_GPIO_Init+0xc2>
			{
				GPIOx->ODR |=(Pin_Config->GPIO_Pin_Number); //Not Making Shifting because The Pin Number Already Shifted in Header
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	8812      	ldrh	r2, [r2, #0]
 8001580:	431a      	orrs	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	e007      	b.n	8001598 <MCAL_GPIO_Init+0xd2>
			}
			else //GPIO_MODE_INPUT_PD
			{
				GPIOx->ODR &=~(Pin_Config->GPIO_Pin_Number);//Not Making Shifting because The Pin Number Already Shifted in Header
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	8812      	ldrh	r2, [r2, #0]
 8001590:	43d2      	mvns	r2, r2
 8001592:	401a      	ands	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	60da      	str	r2, [r3, #12]
			}
		}
	}
	//Write On CRH Or CLH
	*(ConfigureRegister) |=( ConfigurePin << Get_CRLH_Postion(Pin_Config->GPIO_Pin_Number) );
 8001598:	7bfc      	ldrb	r4, [r7, #15]
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	881b      	ldrh	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff ff2e 	bl	8001400 <Get_CRLH_Postion>
 80015a4:	4603      	mov	r3, r0
 80015a6:	fa04 f203 	lsl.w	r2, r4, r3
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	431a      	orrs	r2, r3
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	601a      	str	r2, [r3, #0]
}
 80015b4:	bf00      	nop
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd90      	pop	{r4, r7, pc}

080015bc <MCAL_GPIO_WritePin>:
 * @retval -                -the input pin value (tow values based on @ref GPIO_PIN_State)
 * note -                   -none
 */
/**================================================================= */
void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx , uint16_t Pin_Number , uint8_t Value)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	807b      	strh	r3, [r7, #2]
 80015c8:	4613      	mov	r3, r2
 80015ca:	707b      	strb	r3, [r7, #1]
	if(Value != GPIO_PIN_FALSE )
 80015cc:	787b      	ldrb	r3, [r7, #1]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d006      	beq.n	80015e0 <MCAL_GPIO_WritePin+0x24>
	{
		GPIOx->ODR |=(uint32_t) (Pin_Number);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	68da      	ldr	r2, [r3, #12]
 80015d6:	887b      	ldrh	r3, [r7, #2]
 80015d8:	431a      	orrs	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	60da      	str	r2, [r3, #12]
	}
	else
	{
		GPIOx->ODR &=~(uint32_t)(Pin_Number);
	}
}
 80015de:	e006      	b.n	80015ee <MCAL_GPIO_WritePin+0x32>
		GPIOx->ODR &=~(uint32_t)(Pin_Number);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	68da      	ldr	r2, [r3, #12]
 80015e4:	887b      	ldrh	r3, [r7, #2]
 80015e6:	43db      	mvns	r3, r3
 80015e8:	401a      	ands	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	60da      	str	r2, [r3, #12]
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr

080015f8 <HW_Init>:
/***Task prototype****/
void vHelloBlinkingLedHandler(void *parms);


void HW_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
	GPIO_Pin_Configure_t PIN13CFG;
	PIN13CFG.GPIO_Pin_Number = GPIO_PIN_13;
 80015fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001602:	80bb      	strh	r3, [r7, #4]
	PIN13CFG.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8001604:	2304      	movs	r3, #4
 8001606:	71bb      	strb	r3, [r7, #6]
	PIN13CFG.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8001608:	2301      	movs	r3, #1
 800160a:	71fb      	strb	r3, [r7, #7]

	MCAL_GPIO_Init(GPIOC, &PIN13CFG);
 800160c:	1d3b      	adds	r3, r7, #4
 800160e:	4619      	mov	r1, r3
 8001610:	4803      	ldr	r0, [pc, #12]	; (8001620 <HW_Init+0x28>)
 8001612:	f7ff ff58 	bl	80014c6 <MCAL_GPIO_Init>
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40011000 	.word	0x40011000

08001624 <main>:

int main(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af02      	add	r7, sp, #8
	RCC_GPIOC_CLOCK_EN();
 800162a:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <main+0x34>)
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	4a0a      	ldr	r2, [pc, #40]	; (8001658 <main+0x34>)
 8001630:	f043 0310 	orr.w	r3, r3, #16
 8001634:	6193      	str	r3, [r2, #24]
	HW_Init();
 8001636:	f7ff ffdf 	bl	80015f8 <HW_Init>


	/******tasks creation******/
	xTaskCreate(vHelloBlinkingLedHandler, "BlinkingLed", 128, NULL, 1, vHelloBlinkingLed);
 800163a:	4b08      	ldr	r3, [pc, #32]	; (800165c <main+0x38>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	9301      	str	r3, [sp, #4]
 8001640:	2301      	movs	r3, #1
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	2300      	movs	r3, #0
 8001646:	2280      	movs	r2, #128	; 0x80
 8001648:	4905      	ldr	r1, [pc, #20]	; (8001660 <main+0x3c>)
 800164a:	4806      	ldr	r0, [pc, #24]	; (8001664 <main+0x40>)
 800164c:	f7fe fe1c 	bl	8000288 <xTaskCreate>


	vTaskStartScheduler();
 8001650:	f7fe ff8a 	bl	8000568 <vTaskStartScheduler>



	while(1)
 8001654:	e7fe      	b.n	8001654 <main+0x30>
 8001656:	bf00      	nop
 8001658:	40021000 	.word	0x40021000
 800165c:	20002148 	.word	0x20002148
 8001660:	08001768 	.word	0x08001768
 8001664:	08001669 	.word	0x08001669

08001668 <vHelloBlinkingLedHandler>:
	return 0;

}

void vHelloBlinkingLedHandler(void *parms)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]

	while(1)
	{
		MCAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001670:	2200      	movs	r2, #0
 8001672:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001676:	4808      	ldr	r0, [pc, #32]	; (8001698 <vHelloBlinkingLedHandler+0x30>)
 8001678:	f7ff ffa0 	bl	80015bc <MCAL_GPIO_WritePin>
		vTaskDelay(50);
 800167c:	2032      	movs	r0, #50	; 0x32
 800167e:	f7fe ff4f 	bl	8000520 <vTaskDelay>
		MCAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8001682:	2201      	movs	r2, #1
 8001684:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001688:	4803      	ldr	r0, [pc, #12]	; (8001698 <vHelloBlinkingLedHandler+0x30>)
 800168a:	f7ff ff97 	bl	80015bc <MCAL_GPIO_WritePin>
		vTaskDelay(50);
 800168e:	2032      	movs	r0, #50	; 0x32
 8001690:	f7fe ff46 	bl	8000520 <vTaskDelay>
		MCAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001694:	e7ec      	b.n	8001670 <vHelloBlinkingLedHandler+0x8>
 8001696:	bf00      	nop
 8001698:	40011000 	.word	0x40011000

0800169c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800169c:	480d      	ldr	r0, [pc, #52]	; (80016d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800169e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80016a0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016a4:	480c      	ldr	r0, [pc, #48]	; (80016d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80016a6:	490d      	ldr	r1, [pc, #52]	; (80016dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80016a8:	4a0d      	ldr	r2, [pc, #52]	; (80016e0 <LoopForever+0xe>)
  movs r3, #0
 80016aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016ac:	e002      	b.n	80016b4 <LoopCopyDataInit>

080016ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016b2:	3304      	adds	r3, #4

080016b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016b8:	d3f9      	bcc.n	80016ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ba:	4a0a      	ldr	r2, [pc, #40]	; (80016e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016bc:	4c0a      	ldr	r4, [pc, #40]	; (80016e8 <LoopForever+0x16>)
  movs r3, #0
 80016be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016c0:	e001      	b.n	80016c6 <LoopFillZerobss>

080016c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016c4:	3204      	adds	r2, #4

080016c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016c8:	d3fb      	bcc.n	80016c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80016ca:	f000 f811 	bl	80016f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016ce:	f7ff ffa9 	bl	8001624 <main>

080016d2 <LoopForever>:

LoopForever:
    b LoopForever
 80016d2:	e7fe      	b.n	80016d2 <LoopForever>
  ldr   r0, =_estack
 80016d4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80016d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016dc:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 80016e0:	0800177c 	.word	0x0800177c
  ldr r2, =_sbss
 80016e4:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 80016e8:	200021c4 	.word	0x200021c4

080016ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016ec:	e7fe      	b.n	80016ec <ADC1_2_IRQHandler>
	...

080016f0 <__libc_init_array>:
 80016f0:	b570      	push	{r4, r5, r6, lr}
 80016f2:	2500      	movs	r5, #0
 80016f4:	4e0c      	ldr	r6, [pc, #48]	; (8001728 <__libc_init_array+0x38>)
 80016f6:	4c0d      	ldr	r4, [pc, #52]	; (800172c <__libc_init_array+0x3c>)
 80016f8:	1ba4      	subs	r4, r4, r6
 80016fa:	10a4      	asrs	r4, r4, #2
 80016fc:	42a5      	cmp	r5, r4
 80016fe:	d109      	bne.n	8001714 <__libc_init_array+0x24>
 8001700:	f000 f822 	bl	8001748 <_init>
 8001704:	2500      	movs	r5, #0
 8001706:	4e0a      	ldr	r6, [pc, #40]	; (8001730 <__libc_init_array+0x40>)
 8001708:	4c0a      	ldr	r4, [pc, #40]	; (8001734 <__libc_init_array+0x44>)
 800170a:	1ba4      	subs	r4, r4, r6
 800170c:	10a4      	asrs	r4, r4, #2
 800170e:	42a5      	cmp	r5, r4
 8001710:	d105      	bne.n	800171e <__libc_init_array+0x2e>
 8001712:	bd70      	pop	{r4, r5, r6, pc}
 8001714:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001718:	4798      	blx	r3
 800171a:	3501      	adds	r5, #1
 800171c:	e7ee      	b.n	80016fc <__libc_init_array+0xc>
 800171e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001722:	4798      	blx	r3
 8001724:	3501      	adds	r5, #1
 8001726:	e7f2      	b.n	800170e <__libc_init_array+0x1e>
 8001728:	08001774 	.word	0x08001774
 800172c:	08001774 	.word	0x08001774
 8001730:	08001774 	.word	0x08001774
 8001734:	08001778 	.word	0x08001778

08001738 <memset>:
 8001738:	4603      	mov	r3, r0
 800173a:	4402      	add	r2, r0
 800173c:	4293      	cmp	r3, r2
 800173e:	d100      	bne.n	8001742 <memset+0xa>
 8001740:	4770      	bx	lr
 8001742:	f803 1b01 	strb.w	r1, [r3], #1
 8001746:	e7f9      	b.n	800173c <memset+0x4>

08001748 <_init>:
 8001748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800174a:	bf00      	nop
 800174c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800174e:	bc08      	pop	{r3}
 8001750:	469e      	mov	lr, r3
 8001752:	4770      	bx	lr

08001754 <_fini>:
 8001754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001756:	bf00      	nop
 8001758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800175a:	bc08      	pop	{r3}
 800175c:	469e      	mov	lr, r3
 800175e:	4770      	bx	lr
