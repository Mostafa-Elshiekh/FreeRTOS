
Session4__Deadlock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028bc  08000130  08000130  00010130  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080029ec  080029ec  000129ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a7c  08002a7c  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08002a7c  08002a7c  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a7c  08002a7c  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a7c  08002a7c  00012a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a80  08002a80  00012a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08002a84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001600  20000008  08002a8c  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001608  08002a8c  00021608  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d29  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000164e  00000000  00000000  00028d5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000560  00000000  00000000  0002a3a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000004b8  00000000  00000000  0002a908  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001d5f  00000000  00000000  0002adc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004de9  00000000  00000000  0002cb1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0001399b  00000000  00000000  00031908  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000452a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001420  00000000  00000000  00045320  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000008 	.word	0x20000008
 800014c:	00000000 	.word	0x00000000
 8000150:	080029d4 	.word	0x080029d4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000000c 	.word	0x2000000c
 800016c:	080029d4 	.word	0x080029d4

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	f103 0208 	add.w	r2, r3, #8
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	f04f 32ff 	mov.w	r2, #4294967295
 8000198:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	f103 0208 	add.w	r2, r3, #8
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	f103 0208 	add.w	r2, r3, #8
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	2200      	movs	r2, #0
 80001b2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80001b4:	bf00      	nop
 80001b6:	370c      	adds	r7, #12
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bc80      	pop	{r7}
 80001bc:	4770      	bx	lr

080001be <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80001be:	b480      	push	{r7}
 80001c0:	b083      	sub	sp, #12
 80001c2:	af00      	add	r7, sp, #0
 80001c4:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	2200      	movs	r2, #0
 80001ca:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80001cc:	bf00      	nop
 80001ce:	370c      	adds	r7, #12
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bc80      	pop	{r7}
 80001d4:	4770      	bx	lr

080001d6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80001d6:	b480      	push	{r7}
 80001d8:	b085      	sub	sp, #20
 80001da:	af00      	add	r7, sp, #0
 80001dc:	6078      	str	r0, [r7, #4]
 80001de:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80001e0:	683b      	ldr	r3, [r7, #0]
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80001e6:	68bb      	ldr	r3, [r7, #8]
 80001e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80001ec:	d103      	bne.n	80001f6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	691b      	ldr	r3, [r3, #16]
 80001f2:	60fb      	str	r3, [r7, #12]
 80001f4:	e00c      	b.n	8000210 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	3308      	adds	r3, #8
 80001fa:	60fb      	str	r3, [r7, #12]
 80001fc:	e002      	b.n	8000204 <vListInsert+0x2e>
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	685b      	ldr	r3, [r3, #4]
 8000202:	60fb      	str	r3, [r7, #12]
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	685b      	ldr	r3, [r3, #4]
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	68ba      	ldr	r2, [r7, #8]
 800020c:	429a      	cmp	r2, r3
 800020e:	d2f6      	bcs.n	80001fe <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	685a      	ldr	r2, [r3, #4]
 8000214:	683b      	ldr	r3, [r7, #0]
 8000216:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	685b      	ldr	r3, [r3, #4]
 800021c:	683a      	ldr	r2, [r7, #0]
 800021e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000220:	683b      	ldr	r3, [r7, #0]
 8000222:	68fa      	ldr	r2, [r7, #12]
 8000224:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000226:	68fb      	ldr	r3, [r7, #12]
 8000228:	683a      	ldr	r2, [r7, #0]
 800022a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800022c:	683b      	ldr	r3, [r7, #0]
 800022e:	687a      	ldr	r2, [r7, #4]
 8000230:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	1c5a      	adds	r2, r3, #1
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	601a      	str	r2, [r3, #0]
}
 800023c:	bf00      	nop
 800023e:	3714      	adds	r7, #20
 8000240:	46bd      	mov	sp, r7
 8000242:	bc80      	pop	{r7}
 8000244:	4770      	bx	lr

08000246 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000246:	b480      	push	{r7}
 8000248:	b085      	sub	sp, #20
 800024a:	af00      	add	r7, sp, #0
 800024c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	691b      	ldr	r3, [r3, #16]
 8000252:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	685b      	ldr	r3, [r3, #4]
 8000258:	687a      	ldr	r2, [r7, #4]
 800025a:	6892      	ldr	r2, [r2, #8]
 800025c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	689b      	ldr	r3, [r3, #8]
 8000262:	687a      	ldr	r2, [r7, #4]
 8000264:	6852      	ldr	r2, [r2, #4]
 8000266:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	685b      	ldr	r3, [r3, #4]
 800026c:	687a      	ldr	r2, [r7, #4]
 800026e:	429a      	cmp	r2, r3
 8000270:	d103      	bne.n	800027a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	689a      	ldr	r2, [r3, #8]
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	2200      	movs	r2, #0
 800027e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	1e5a      	subs	r2, r3, #1
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	681b      	ldr	r3, [r3, #0]
}
 800028e:	4618      	mov	r0, r3
 8000290:	3714      	adds	r7, #20
 8000292:	46bd      	mov	sp, r7
 8000294:	bc80      	pop	{r7}
 8000296:	4770      	bx	lr

08000298 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000298:	b590      	push	{r4, r7, lr}
 800029a:	b085      	sub	sp, #20
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
 80002a0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80002a2:	2301      	movs	r3, #1
 80002a4:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
 80002aa:	68bb      	ldr	r3, [r7, #8]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d063      	beq.n	8000378 <xQueueGenericReset+0xe0>
        ( pxQueue->uxLength >= 1U ) &&
 80002b0:	68bb      	ldr	r3, [r7, #8]
 80002b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d05f      	beq.n	8000378 <xQueueGenericReset+0xe0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80002b8:	68bb      	ldr	r3, [r7, #8]
 80002ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80002bc:	68bb      	ldr	r3, [r7, #8]
 80002be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80002c0:	2000      	movs	r0, #0
 80002c2:	fba2 1203 	umull	r1, r2, r2, r3
 80002c6:	f04f 0300 	mov.w	r3, #0
 80002ca:	f04f 0400 	mov.w	r4, #0
 80002ce:	0013      	movs	r3, r2
 80002d0:	2400      	movs	r4, #0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d000      	beq.n	80002d8 <xQueueGenericReset+0x40>
 80002d6:	2001      	movs	r0, #1
 80002d8:	4603      	mov	r3, r0
        ( pxQueue->uxLength >= 1U ) &&
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14c      	bne.n	8000378 <xQueueGenericReset+0xe0>
    {
        taskENTER_CRITICAL();
 80002de:	f001 fa3d 	bl	800175c <vPortEnterCritical>

        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80002e2:	68bb      	ldr	r3, [r7, #8]
 80002e4:	681a      	ldr	r2, [r3, #0]
 80002e6:	68bb      	ldr	r3, [r7, #8]
 80002e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80002ea:	68b9      	ldr	r1, [r7, #8]
 80002ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80002ee:	fb01 f303 	mul.w	r3, r1, r3
 80002f2:	441a      	add	r2, r3
 80002f4:	68bb      	ldr	r3, [r7, #8]
 80002f6:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80002f8:	68bb      	ldr	r3, [r7, #8]
 80002fa:	2200      	movs	r2, #0
 80002fc:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80002fe:	68bb      	ldr	r3, [r7, #8]
 8000300:	681a      	ldr	r2, [r3, #0]
 8000302:	68bb      	ldr	r3, [r7, #8]
 8000304:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000306:	68bb      	ldr	r3, [r7, #8]
 8000308:	681a      	ldr	r2, [r3, #0]
 800030a:	68bb      	ldr	r3, [r7, #8]
 800030c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800030e:	3b01      	subs	r3, #1
 8000310:	68b9      	ldr	r1, [r7, #8]
 8000312:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000314:	fb01 f303 	mul.w	r3, r1, r3
 8000318:	441a      	add	r2, r3
 800031a:	68bb      	ldr	r3, [r7, #8]
 800031c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800031e:	68bb      	ldr	r3, [r7, #8]
 8000320:	22ff      	movs	r2, #255	; 0xff
 8000322:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8000326:	68bb      	ldr	r3, [r7, #8]
 8000328:	22ff      	movs	r2, #255	; 0xff
 800032a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d114      	bne.n	800035e <xQueueGenericReset+0xc6>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	691b      	ldr	r3, [r3, #16]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d01a      	beq.n	8000372 <xQueueGenericReset+0xda>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800033c:	68bb      	ldr	r3, [r7, #8]
 800033e:	3310      	adds	r3, #16
 8000340:	4618      	mov	r0, r3
 8000342:	f000 ff19 	bl	8001178 <xTaskRemoveFromEventList>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d012      	beq.n	8000372 <xQueueGenericReset+0xda>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 800034c:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <xQueueGenericReset+0xf0>)
 800034e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000352:	601a      	str	r2, [r3, #0]
 8000354:	f3bf 8f4f 	dsb	sy
 8000358:	f3bf 8f6f 	isb	sy
 800035c:	e009      	b.n	8000372 <xQueueGenericReset+0xda>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800035e:	68bb      	ldr	r3, [r7, #8]
 8000360:	3310      	adds	r3, #16
 8000362:	4618      	mov	r0, r3
 8000364:	f7ff ff0c 	bl	8000180 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000368:	68bb      	ldr	r3, [r7, #8]
 800036a:	3324      	adds	r3, #36	; 0x24
 800036c:	4618      	mov	r0, r3
 800036e:	f7ff ff07 	bl	8000180 <vListInitialise>
        }
        taskEXIT_CRITICAL();
 8000372:	f001 fa0b 	bl	800178c <vPortExitCritical>
 8000376:	e001      	b.n	800037c <xQueueGenericReset+0xe4>
    }
    else
    {
        xReturn = pdFAIL;
 8000378:	2300      	movs	r3, #0
 800037a:	60fb      	str	r3, [r7, #12]

    configASSERT( xReturn != pdFAIL );

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800037c:	68fb      	ldr	r3, [r7, #12]
}
 800037e:	4618      	mov	r0, r3
 8000380:	3714      	adds	r7, #20
 8000382:	46bd      	mov	sp, r7
 8000384:	bd90      	pop	{r4, r7, pc}
 8000386:	bf00      	nop
 8000388:	e000ed04 	.word	0xe000ed04

0800038c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800038c:	b590      	push	{r4, r7, lr}
 800038e:	b08b      	sub	sp, #44	; 0x2c
 8000390:	af02      	add	r7, sp, #8
 8000392:	60f8      	str	r0, [r7, #12]
 8000394:	60b9      	str	r1, [r7, #8]
 8000396:	4613      	mov	r3, r2
 8000398:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800039a:	2300      	movs	r3, #0
 800039c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d033      	beq.n	800040c <xQueueGenericCreate+0x80>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80003a4:	2000      	movs	r0, #0
 80003a6:	68ba      	ldr	r2, [r7, #8]
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	fba2 1203 	umull	r1, r2, r2, r3
 80003ae:	f04f 0300 	mov.w	r3, #0
 80003b2:	f04f 0400 	mov.w	r4, #0
 80003b6:	0013      	movs	r3, r2
 80003b8:	2400      	movs	r4, #0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d000      	beq.n	80003c0 <xQueueGenericCreate+0x34>
 80003be:	2001      	movs	r0, #1
 80003c0:	4603      	mov	r3, r0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d122      	bne.n	800040c <xQueueGenericCreate+0x80>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	68ba      	ldr	r2, [r7, #8]
 80003ca:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80003ce:	f113 0f49 	cmn.w	r3, #73	; 0x49
 80003d2:	d81b      	bhi.n	800040c <xQueueGenericCreate+0x80>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	68ba      	ldr	r2, [r7, #8]
 80003d8:	fb02 f303 	mul.w	r3, r2, r3
 80003dc:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80003de:	69bb      	ldr	r3, [r7, #24]
 80003e0:	3348      	adds	r3, #72	; 0x48
 80003e2:	4618      	mov	r0, r3
 80003e4:	f001 fa4a 	bl	800187c <pvPortMalloc>
 80003e8:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80003ea:	69fb      	ldr	r3, [r7, #28]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d00d      	beq.n	800040c <xQueueGenericCreate+0x80>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80003f0:	69fb      	ldr	r3, [r7, #28]
 80003f2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80003f4:	697b      	ldr	r3, [r7, #20]
 80003f6:	3348      	adds	r3, #72	; 0x48
 80003f8:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80003fa:	79fa      	ldrb	r2, [r7, #7]
 80003fc:	69fb      	ldr	r3, [r7, #28]
 80003fe:	9300      	str	r3, [sp, #0]
 8000400:	4613      	mov	r3, r2
 8000402:	697a      	ldr	r2, [r7, #20]
 8000404:	68b9      	ldr	r1, [r7, #8]
 8000406:	68f8      	ldr	r0, [r7, #12]
 8000408:	f000 f805 	bl	8000416 <prvInitialiseNewQueue>
        {
            configASSERT( pxNewQueue );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800040c:	69fb      	ldr	r3, [r7, #28]
    }
 800040e:	4618      	mov	r0, r3
 8000410:	3724      	adds	r7, #36	; 0x24
 8000412:	46bd      	mov	sp, r7
 8000414:	bd90      	pop	{r4, r7, pc}

08000416 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000416:	b580      	push	{r7, lr}
 8000418:	b084      	sub	sp, #16
 800041a:	af00      	add	r7, sp, #0
 800041c:	60f8      	str	r0, [r7, #12]
 800041e:	60b9      	str	r1, [r7, #8]
 8000420:	607a      	str	r2, [r7, #4]
 8000422:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000424:	68bb      	ldr	r3, [r7, #8]
 8000426:	2b00      	cmp	r3, #0
 8000428:	d103      	bne.n	8000432 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800042a:	69bb      	ldr	r3, [r7, #24]
 800042c:	69ba      	ldr	r2, [r7, #24]
 800042e:	601a      	str	r2, [r3, #0]
 8000430:	e002      	b.n	8000438 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000432:	69bb      	ldr	r3, [r7, #24]
 8000434:	687a      	ldr	r2, [r7, #4]
 8000436:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000438:	69bb      	ldr	r3, [r7, #24]
 800043a:	68fa      	ldr	r2, [r7, #12]
 800043c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800043e:	69bb      	ldr	r3, [r7, #24]
 8000440:	68ba      	ldr	r2, [r7, #8]
 8000442:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000444:	2101      	movs	r1, #1
 8000446:	69b8      	ldr	r0, [r7, #24]
 8000448:	f7ff ff26 	bl	8000298 <xQueueGenericReset>
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800044c:	bf00      	nop
 800044e:	3710      	adds	r7, #16
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}

08000454 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b08a      	sub	sp, #40	; 0x28
 8000458:	af00      	add	r7, sp, #0
 800045a:	60f8      	str	r0, [r7, #12]
 800045c:	60b9      	str	r1, [r7, #8]
 800045e:	607a      	str	r2, [r7, #4]
 8000460:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000462:	2300      	movs	r3, #0
 8000464:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	623b      	str	r3, [r7, #32]
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800046a:	f001 f977 	bl	800175c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800046e:	6a3b      	ldr	r3, [r7, #32]
 8000470:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000472:	6a3b      	ldr	r3, [r7, #32]
 8000474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000476:	429a      	cmp	r2, r3
 8000478:	d302      	bcc.n	8000480 <xQueueGenericSend+0x2c>
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	2b02      	cmp	r3, #2
 800047e:	d129      	bne.n	80004d4 <xQueueGenericSend+0x80>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000480:	683a      	ldr	r2, [r7, #0]
 8000482:	68b9      	ldr	r1, [r7, #8]
 8000484:	6a38      	ldr	r0, [r7, #32]
 8000486:	f000 f92d 	bl	80006e4 <prvCopyDataToQueue>
 800048a:	61f8      	str	r0, [r7, #28]

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800048c:	6a3b      	ldr	r3, [r7, #32]
 800048e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000490:	2b00      	cmp	r3, #0
 8000492:	d010      	beq.n	80004b6 <xQueueGenericSend+0x62>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000494:	6a3b      	ldr	r3, [r7, #32]
 8000496:	3324      	adds	r3, #36	; 0x24
 8000498:	4618      	mov	r0, r3
 800049a:	f000 fe6d 	bl	8001178 <xTaskRemoveFromEventList>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d013      	beq.n	80004cc <xQueueGenericSend+0x78>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80004a4:	4b3f      	ldr	r3, [pc, #252]	; (80005a4 <xQueueGenericSend+0x150>)
 80004a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80004aa:	601a      	str	r2, [r3, #0]
 80004ac:	f3bf 8f4f 	dsb	sy
 80004b0:	f3bf 8f6f 	isb	sy
 80004b4:	e00a      	b.n	80004cc <xQueueGenericSend+0x78>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80004b6:	69fb      	ldr	r3, [r7, #28]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d007      	beq.n	80004cc <xQueueGenericSend+0x78>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80004bc:	4b39      	ldr	r3, [pc, #228]	; (80005a4 <xQueueGenericSend+0x150>)
 80004be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	f3bf 8f4f 	dsb	sy
 80004c8:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80004cc:	f001 f95e 	bl	800178c <vPortExitCritical>
                return pdPASS;
 80004d0:	2301      	movs	r3, #1
 80004d2:	e063      	b.n	800059c <xQueueGenericSend+0x148>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d103      	bne.n	80004e2 <xQueueGenericSend+0x8e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80004da:	f001 f957 	bl	800178c <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80004de:	2300      	movs	r3, #0
 80004e0:	e05c      	b.n	800059c <xQueueGenericSend+0x148>
                }
                else if( xEntryTimeSet == pdFALSE )
 80004e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d106      	bne.n	80004f6 <xQueueGenericSend+0xa2>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80004e8:	f107 0314 	add.w	r3, r7, #20
 80004ec:	4618      	mov	r0, r3
 80004ee:	f000 ff0b 	bl	8001308 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80004f2:	2301      	movs	r3, #1
 80004f4:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80004f6:	f001 f949 	bl	800178c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80004fa:	f000 fbcb 	bl	8000c94 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80004fe:	f001 f92d 	bl	800175c <vPortEnterCritical>
 8000502:	6a3b      	ldr	r3, [r7, #32]
 8000504:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000508:	b25b      	sxtb	r3, r3
 800050a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800050e:	d103      	bne.n	8000518 <xQueueGenericSend+0xc4>
 8000510:	6a3b      	ldr	r3, [r7, #32]
 8000512:	2200      	movs	r2, #0
 8000514:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000518:	6a3b      	ldr	r3, [r7, #32]
 800051a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800051e:	b25b      	sxtb	r3, r3
 8000520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000524:	d103      	bne.n	800052e <xQueueGenericSend+0xda>
 8000526:	6a3b      	ldr	r3, [r7, #32]
 8000528:	2200      	movs	r2, #0
 800052a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800052e:	f001 f92d 	bl	800178c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000532:	1d3a      	adds	r2, r7, #4
 8000534:	f107 0314 	add.w	r3, r7, #20
 8000538:	4611      	mov	r1, r2
 800053a:	4618      	mov	r0, r3
 800053c:	f000 fefa 	bl	8001334 <xTaskCheckForTimeOut>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d124      	bne.n	8000590 <xQueueGenericSend+0x13c>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000546:	6a38      	ldr	r0, [r7, #32]
 8000548:	f000 f990 	bl	800086c <prvIsQueueFull>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d018      	beq.n	8000584 <xQueueGenericSend+0x130>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000552:	6a3b      	ldr	r3, [r7, #32]
 8000554:	3310      	adds	r3, #16
 8000556:	687a      	ldr	r2, [r7, #4]
 8000558:	4611      	mov	r1, r2
 800055a:	4618      	mov	r0, r3
 800055c:	f000 fdf6 	bl	800114c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000560:	6a38      	ldr	r0, [r7, #32]
 8000562:	f000 f91b 	bl	800079c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000566:	f000 fba3 	bl	8000cb0 <xTaskResumeAll>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	f47f af7c 	bne.w	800046a <xQueueGenericSend+0x16>
                {
                    portYIELD_WITHIN_API();
 8000572:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <xQueueGenericSend+0x150>)
 8000574:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	f3bf 8f4f 	dsb	sy
 800057e:	f3bf 8f6f 	isb	sy
 8000582:	e772      	b.n	800046a <xQueueGenericSend+0x16>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000584:	6a38      	ldr	r0, [r7, #32]
 8000586:	f000 f909 	bl	800079c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800058a:	f000 fb91 	bl	8000cb0 <xTaskResumeAll>
 800058e:	e76c      	b.n	800046a <xQueueGenericSend+0x16>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000590:	6a38      	ldr	r0, [r7, #32]
 8000592:	f000 f903 	bl	800079c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000596:	f000 fb8b 	bl	8000cb0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800059a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800059c:	4618      	mov	r0, r3
 800059e:	3728      	adds	r7, #40	; 0x28
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	e000ed04 	.word	0xe000ed04

080005a8 <xQueueSemaphoreTake>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b088      	sub	sp, #32
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 80005b2:	2300      	movs	r3, #0
 80005b4:	61fb      	str	r3, [r7, #28]
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	61bb      	str	r3, [r7, #24]
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80005ba:	f001 f8cf 	bl	800175c <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80005be:	69bb      	ldr	r3, [r7, #24]
 80005c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005c2:	617b      	str	r3, [r7, #20]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d01b      	beq.n	8000602 <xQueueSemaphoreTake+0x5a>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80005ca:	697b      	ldr	r3, [r7, #20]
 80005cc:	1e5a      	subs	r2, r3, #1
 80005ce:	69bb      	ldr	r3, [r7, #24]
 80005d0:	639a      	str	r2, [r3, #56]	; 0x38
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80005d2:	69bb      	ldr	r3, [r7, #24]
 80005d4:	691b      	ldr	r3, [r3, #16]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d00f      	beq.n	80005fa <xQueueSemaphoreTake+0x52>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80005da:	69bb      	ldr	r3, [r7, #24]
 80005dc:	3310      	adds	r3, #16
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 fdca 	bl	8001178 <xTaskRemoveFromEventList>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d007      	beq.n	80005fa <xQueueSemaphoreTake+0x52>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80005ea:	4b3d      	ldr	r3, [pc, #244]	; (80006e0 <xQueueSemaphoreTake+0x138>)
 80005ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	f3bf 8f4f 	dsb	sy
 80005f6:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80005fa:	f001 f8c7 	bl	800178c <vPortExitCritical>
                return pdPASS;
 80005fe:	2301      	movs	r3, #1
 8000600:	e069      	b.n	80006d6 <xQueueSemaphoreTake+0x12e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d103      	bne.n	8000610 <xQueueSemaphoreTake+0x68>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8000608:	f001 f8c0 	bl	800178c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800060c:	2300      	movs	r3, #0
 800060e:	e062      	b.n	80006d6 <xQueueSemaphoreTake+0x12e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000610:	69fb      	ldr	r3, [r7, #28]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d106      	bne.n	8000624 <xQueueSemaphoreTake+0x7c>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000616:	f107 030c 	add.w	r3, r7, #12
 800061a:	4618      	mov	r0, r3
 800061c:	f000 fe74 	bl	8001308 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000620:	2301      	movs	r3, #1
 8000622:	61fb      	str	r3, [r7, #28]
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000624:	f001 f8b2 	bl	800178c <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000628:	f000 fb34 	bl	8000c94 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800062c:	f001 f896 	bl	800175c <vPortEnterCritical>
 8000630:	69bb      	ldr	r3, [r7, #24]
 8000632:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000636:	b25b      	sxtb	r3, r3
 8000638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800063c:	d103      	bne.n	8000646 <xQueueSemaphoreTake+0x9e>
 800063e:	69bb      	ldr	r3, [r7, #24]
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000646:	69bb      	ldr	r3, [r7, #24]
 8000648:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800064c:	b25b      	sxtb	r3, r3
 800064e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000652:	d103      	bne.n	800065c <xQueueSemaphoreTake+0xb4>
 8000654:	69bb      	ldr	r3, [r7, #24]
 8000656:	2200      	movs	r2, #0
 8000658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800065c:	f001 f896 	bl	800178c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000660:	463a      	mov	r2, r7
 8000662:	f107 030c 	add.w	r3, r7, #12
 8000666:	4611      	mov	r1, r2
 8000668:	4618      	mov	r0, r3
 800066a:	f000 fe63 	bl	8001334 <xTaskCheckForTimeOut>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d123      	bne.n	80006bc <xQueueSemaphoreTake+0x114>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000674:	69b8      	ldr	r0, [r7, #24]
 8000676:	f000 f8e3 	bl	8000840 <prvIsQueueEmpty>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d017      	beq.n	80006b0 <xQueueSemaphoreTake+0x108>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000680:	69bb      	ldr	r3, [r7, #24]
 8000682:	3324      	adds	r3, #36	; 0x24
 8000684:	683a      	ldr	r2, [r7, #0]
 8000686:	4611      	mov	r1, r2
 8000688:	4618      	mov	r0, r3
 800068a:	f000 fd5f 	bl	800114c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800068e:	69b8      	ldr	r0, [r7, #24]
 8000690:	f000 f884 	bl	800079c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000694:	f000 fb0c 	bl	8000cb0 <xTaskResumeAll>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d18d      	bne.n	80005ba <xQueueSemaphoreTake+0x12>
                {
                    portYIELD_WITHIN_API();
 800069e:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <xQueueSemaphoreTake+0x138>)
 80006a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	f3bf 8f4f 	dsb	sy
 80006aa:	f3bf 8f6f 	isb	sy
 80006ae:	e784      	b.n	80005ba <xQueueSemaphoreTake+0x12>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 80006b0:	69b8      	ldr	r0, [r7, #24]
 80006b2:	f000 f873 	bl	800079c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80006b6:	f000 fafb 	bl	8000cb0 <xTaskResumeAll>
 80006ba:	e77e      	b.n	80005ba <xQueueSemaphoreTake+0x12>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80006bc:	69b8      	ldr	r0, [r7, #24]
 80006be:	f000 f86d 	bl	800079c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80006c2:	f000 faf5 	bl	8000cb0 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80006c6:	69b8      	ldr	r0, [r7, #24]
 80006c8:	f000 f8ba 	bl	8000840 <prvIsQueueEmpty>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	f43f af73 	beq.w	80005ba <xQueueSemaphoreTake+0x12>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80006d4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	3720      	adds	r7, #32
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	e000ed04 	.word	0xe000ed04

080006e4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80006f0:	2300      	movs	r3, #0
 80006f2:	613b      	str	r3, [r7, #16]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006f8:	617b      	str	r3, [r7, #20]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d043      	beq.n	800078a <prvCopyDataToQueue+0xa6>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d119      	bne.n	800073c <prvCopyDataToQueue+0x58>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	6858      	ldr	r0, [r3, #4]
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	461a      	mov	r2, r3
 8000712:	68b9      	ldr	r1, [r7, #8]
 8000714:	f002 f94a 	bl	80029ac <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	685a      	ldr	r2, [r3, #4]
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000720:	441a      	add	r2, r3
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	685a      	ldr	r2, [r3, #4]
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	689b      	ldr	r3, [r3, #8]
 800072e:	429a      	cmp	r2, r3
 8000730:	d32b      	bcc.n	800078a <prvCopyDataToQueue+0xa6>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	681a      	ldr	r2, [r3, #0]
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	e026      	b.n	800078a <prvCopyDataToQueue+0xa6>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	68d8      	ldr	r0, [r3, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000744:	461a      	mov	r2, r3
 8000746:	68b9      	ldr	r1, [r7, #8]
 8000748:	f002 f930 	bl	80029ac <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	68da      	ldr	r2, [r3, #12]
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000754:	425b      	negs	r3, r3
 8000756:	441a      	add	r2, r3
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	68da      	ldr	r2, [r3, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	429a      	cmp	r2, r3
 8000766:	d207      	bcs.n	8000778 <prvCopyDataToQueue+0x94>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	689a      	ldr	r2, [r3, #8]
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000770:	425b      	negs	r3, r3
 8000772:	441a      	add	r2, r3
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2b02      	cmp	r3, #2
 800077c:	d105      	bne.n	800078a <prvCopyDataToQueue+0xa6>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d002      	beq.n	800078a <prvCopyDataToQueue+0xa6>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	3b01      	subs	r3, #1
 8000788:	617b      	str	r3, [r7, #20]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	1c5a      	adds	r2, r3, #1
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8000792:	693b      	ldr	r3, [r7, #16]
}
 8000794:	4618      	mov	r0, r3
 8000796:	3718      	adds	r7, #24
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <prvUnlockQueue>:
    }
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80007a4:	f000 ffda 	bl	800175c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80007ae:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80007b0:	e011      	b.n	80007d6 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d012      	beq.n	80007e0 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	3324      	adds	r3, #36	; 0x24
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 fcda 	bl	8001178 <xTaskRemoveFromEventList>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80007ca:	f000 fdfd 	bl	80013c8 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	3b01      	subs	r3, #1
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80007d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	dce9      	bgt.n	80007b2 <prvUnlockQueue+0x16>
 80007de:	e000      	b.n	80007e2 <prvUnlockQueue+0x46>
                        break;
 80007e0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	22ff      	movs	r2, #255	; 0xff
 80007e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80007ea:	f000 ffcf 	bl	800178c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80007ee:	f000 ffb5 	bl	800175c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80007f8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80007fa:	e011      	b.n	8000820 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	691b      	ldr	r3, [r3, #16]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d012      	beq.n	800082a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	3310      	adds	r3, #16
 8000808:	4618      	mov	r0, r3
 800080a:	f000 fcb5 	bl	8001178 <xTaskRemoveFromEventList>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000814:	f000 fdd8 	bl	80013c8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000818:	7bbb      	ldrb	r3, [r7, #14]
 800081a:	3b01      	subs	r3, #1
 800081c:	b2db      	uxtb	r3, r3
 800081e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000820:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000824:	2b00      	cmp	r3, #0
 8000826:	dce9      	bgt.n	80007fc <prvUnlockQueue+0x60>
 8000828:	e000      	b.n	800082c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800082a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	22ff      	movs	r2, #255	; 0xff
 8000830:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000834:	f000 ffaa 	bl	800178c <vPortExitCritical>
}
 8000838:	bf00      	nop
 800083a:	3710      	adds	r7, #16
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000848:	f000 ff88 	bl	800175c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000850:	2b00      	cmp	r3, #0
 8000852:	d102      	bne.n	800085a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000854:	2301      	movs	r3, #1
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	e001      	b.n	800085e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800085e:	f000 ff95 	bl	800178c <vPortExitCritical>

    return xReturn;
 8000862:	68fb      	ldr	r3, [r7, #12]
}
 8000864:	4618      	mov	r0, r3
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000874:	f000 ff72 	bl	800175c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000880:	429a      	cmp	r2, r3
 8000882:	d102      	bne.n	800088a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8000884:	2301      	movs	r3, #1
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	e001      	b.n	800088e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800088e:	f000 ff7d 	bl	800178c <vPortExitCritical>

    return xReturn;
 8000892:	68fb      	ldr	r3, [r7, #12]
}
 8000894:	4618      	mov	r0, r3
 8000896:	3710      	adds	r7, #16
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800089c:	b580      	push	{r7, lr}
 800089e:	b08c      	sub	sp, #48	; 0x30
 80008a0:	af04      	add	r7, sp, #16
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	4613      	mov	r3, r2
 80008aa:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80008ac:	88fb      	ldrh	r3, [r7, #6]
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	4618      	mov	r0, r3
 80008b2:	f000 ffe3 	bl	800187c <pvPortMalloc>
 80008b6:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d00e      	beq.n	80008dc <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80008be:	204c      	movs	r0, #76	; 0x4c
 80008c0:	f000 ffdc 	bl	800187c <pvPortMalloc>
 80008c4:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d003      	beq.n	80008d4 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80008cc:	69fb      	ldr	r3, [r7, #28]
 80008ce:	697a      	ldr	r2, [r7, #20]
 80008d0:	631a      	str	r2, [r3, #48]	; 0x30
 80008d2:	e005      	b.n	80008e0 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 80008d4:	6978      	ldr	r0, [r7, #20]
 80008d6:	f001 f87f 	bl	80019d8 <vPortFree>
 80008da:	e001      	b.n	80008e0 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80008e0:	69fb      	ldr	r3, [r7, #28]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d013      	beq.n	800090e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80008e6:	88fa      	ldrh	r2, [r7, #6]
 80008e8:	2300      	movs	r3, #0
 80008ea:	9303      	str	r3, [sp, #12]
 80008ec:	69fb      	ldr	r3, [r7, #28]
 80008ee:	9302      	str	r3, [sp, #8]
 80008f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008f2:	9301      	str	r3, [sp, #4]
 80008f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008f6:	9300      	str	r3, [sp, #0]
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	68b9      	ldr	r1, [r7, #8]
 80008fc:	68f8      	ldr	r0, [r7, #12]
 80008fe:	f000 f80e 	bl	800091e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000902:	69f8      	ldr	r0, [r7, #28]
 8000904:	f000 f884 	bl	8000a10 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000908:	2301      	movs	r3, #1
 800090a:	61bb      	str	r3, [r7, #24]
 800090c:	e002      	b.n	8000914 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800090e:	f04f 33ff 	mov.w	r3, #4294967295
 8000912:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000914:	69bb      	ldr	r3, [r7, #24]
    }
 8000916:	4618      	mov	r0, r3
 8000918:	3720      	adds	r7, #32
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b086      	sub	sp, #24
 8000922:	af00      	add	r7, sp, #0
 8000924:	60f8      	str	r0, [r7, #12]
 8000926:	60b9      	str	r1, [r7, #8]
 8000928:	607a      	str	r2, [r7, #4]
 800092a:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800092c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800092e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000936:	3b01      	subs	r3, #1
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	4413      	add	r3, r2
 800093c:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800093e:	693b      	ldr	r3, [r7, #16]
 8000940:	f023 0307 	bic.w	r3, r3, #7
 8000944:	613b      	str	r3, [r7, #16]
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d01f      	beq.n	800098c <prvInitialiseNewTask+0x6e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]
 8000950:	e012      	b.n	8000978 <prvInitialiseNewTask+0x5a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000952:	68ba      	ldr	r2, [r7, #8]
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	4413      	add	r3, r2
 8000958:	7819      	ldrb	r1, [r3, #0]
 800095a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	4413      	add	r3, r2
 8000960:	3334      	adds	r3, #52	; 0x34
 8000962:	460a      	mov	r2, r1
 8000964:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000966:	68ba      	ldr	r2, [r7, #8]
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	4413      	add	r3, r2
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d006      	beq.n	8000980 <prvInitialiseNewTask+0x62>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	3301      	adds	r3, #1
 8000976:	617b      	str	r3, [r7, #20]
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	2b0f      	cmp	r3, #15
 800097c:	d9e9      	bls.n	8000952 <prvInitialiseNewTask+0x34>
 800097e:	e000      	b.n	8000982 <prvInitialiseNewTask+0x64>
            {
                break;
 8000980:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000984:	2200      	movs	r2, #0
 8000986:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800098a:	e003      	b.n	8000994 <prvInitialiseNewTask+0x76>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800098c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800098e:	2200      	movs	r2, #0
 8000990:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000994:	6a3b      	ldr	r3, [r7, #32]
 8000996:	2b04      	cmp	r3, #4
 8000998:	d901      	bls.n	800099e <prvInitialiseNewTask+0x80>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800099a:	2304      	movs	r3, #4
 800099c:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800099e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009a0:	6a3a      	ldr	r2, [r7, #32]
 80009a2:	62da      	str	r2, [r3, #44]	; 0x2c
            pxNewTCB->uxBasePriority = uxPriority;
            pxNewTCB->uxMutexesHeld = 0;
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80009a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009a6:	3304      	adds	r3, #4
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fc08 	bl	80001be <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80009ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009b0:	3318      	adds	r3, #24
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fc03 	bl	80001be <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80009b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80009bc:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80009be:	6a3b      	ldr	r3, [r7, #32]
 80009c0:	f1c3 0205 	rsb	r2, r3, #5
 80009c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009c6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80009c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80009cc:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80009ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009d0:	3344      	adds	r3, #68	; 0x44
 80009d2:	2204      	movs	r2, #4
 80009d4:	2100      	movs	r1, #0
 80009d6:	4618      	mov	r0, r3
 80009d8:	f001 fff3 	bl	80029c2 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80009dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009de:	3348      	adds	r3, #72	; 0x48
 80009e0:	2201      	movs	r2, #1
 80009e2:	2100      	movs	r1, #0
 80009e4:	4618      	mov	r0, r3
 80009e6:	f001 ffec 	bl	80029c2 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80009ea:	683a      	ldr	r2, [r7, #0]
 80009ec:	68f9      	ldr	r1, [r7, #12]
 80009ee:	6938      	ldr	r0, [r7, #16]
 80009f0:	f000 fe24 	bl	800163c <pxPortInitialiseStack>
 80009f4:	4602      	mov	r2, r0
 80009f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009f8:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80009fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d002      	beq.n	8000a06 <prvInitialiseNewTask+0xe8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a04:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000a06:	bf00      	nop
 8000a08:	3718      	adds	r7, #24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000a18:	f000 fea0 	bl	800175c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000a1c:	4b3e      	ldr	r3, [pc, #248]	; (8000b18 <prvAddNewTaskToReadyList+0x108>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	3301      	adds	r3, #1
 8000a22:	4a3d      	ldr	r2, [pc, #244]	; (8000b18 <prvAddNewTaskToReadyList+0x108>)
 8000a24:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000a26:	4b3d      	ldr	r3, [pc, #244]	; (8000b1c <prvAddNewTaskToReadyList+0x10c>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d109      	bne.n	8000a42 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000a2e:	4a3b      	ldr	r2, [pc, #236]	; (8000b1c <prvAddNewTaskToReadyList+0x10c>)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000a34:	4b38      	ldr	r3, [pc, #224]	; (8000b18 <prvAddNewTaskToReadyList+0x108>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d110      	bne.n	8000a5e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000a3c:	f000 fce8 	bl	8001410 <prvInitialiseTaskLists>
 8000a40:	e00d      	b.n	8000a5e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000a42:	4b37      	ldr	r3, [pc, #220]	; (8000b20 <prvAddNewTaskToReadyList+0x110>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d109      	bne.n	8000a5e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000a4a:	4b34      	ldr	r3, [pc, #208]	; (8000b1c <prvAddNewTaskToReadyList+0x10c>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d802      	bhi.n	8000a5e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000a58:	4a30      	ldr	r2, [pc, #192]	; (8000b1c <prvAddNewTaskToReadyList+0x10c>)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000a5e:	4b31      	ldr	r3, [pc, #196]	; (8000b24 <prvAddNewTaskToReadyList+0x114>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	3301      	adds	r3, #1
 8000a64:	4a2f      	ldr	r2, [pc, #188]	; (8000b24 <prvAddNewTaskToReadyList+0x114>)
 8000a66:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	409a      	lsls	r2, r3
 8000a70:	4b2d      	ldr	r3, [pc, #180]	; (8000b28 <prvAddNewTaskToReadyList+0x118>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	4a2c      	ldr	r2, [pc, #176]	; (8000b28 <prvAddNewTaskToReadyList+0x118>)
 8000a78:	6013      	str	r3, [r2, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a7e:	492b      	ldr	r1, [pc, #172]	; (8000b2c <prvAddNewTaskToReadyList+0x11c>)
 8000a80:	4613      	mov	r3, r2
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	4413      	add	r3, r2
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	440b      	add	r3, r1
 8000a8a:	3304      	adds	r3, #4
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	68fa      	ldr	r2, [r7, #12]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	689a      	ldr	r2, [r3, #8]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	3204      	adds	r2, #4
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	1d1a      	adds	r2, r3, #4
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ab4:	4613      	mov	r3, r2
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	4413      	add	r3, r2
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	4a1b      	ldr	r2, [pc, #108]	; (8000b2c <prvAddNewTaskToReadyList+0x11c>)
 8000abe:	441a      	add	r2, r3
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	615a      	str	r2, [r3, #20]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ac8:	4918      	ldr	r1, [pc, #96]	; (8000b2c <prvAddNewTaskToReadyList+0x11c>)
 8000aca:	4613      	mov	r3, r2
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	4413      	add	r3, r2
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	440b      	add	r3, r1
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	1c59      	adds	r1, r3, #1
 8000ad8:	4814      	ldr	r0, [pc, #80]	; (8000b2c <prvAddNewTaskToReadyList+0x11c>)
 8000ada:	4613      	mov	r3, r2
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	4413      	add	r3, r2
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	4403      	add	r3, r0
 8000ae4:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000ae6:	f000 fe51 	bl	800178c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000aea:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <prvAddNewTaskToReadyList+0x110>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d00e      	beq.n	8000b10 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000af2:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <prvAddNewTaskToReadyList+0x10c>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d207      	bcs.n	8000b10 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000b00:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <prvAddNewTaskToReadyList+0x120>)
 8000b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	f3bf 8f4f 	dsb	sy
 8000b0c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000b10:	bf00      	nop
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	200000fc 	.word	0x200000fc
 8000b1c:	20000024 	.word	0x20000024
 8000b20:	20000108 	.word	0x20000108
 8000b24:	20000118 	.word	0x20000118
 8000b28:	20000104 	.word	0x20000104
 8000b2c:	20000028 	.word	0x20000028
 8000b30:	e000ed04 	.word	0xe000ed04

08000b34 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	617b      	str	r3, [r7, #20]

        configASSERT( pxPreviousWakeTime );
        configASSERT( ( xTimeIncrement > 0U ) );
        configASSERT( uxSchedulerSuspended == 0 );

        vTaskSuspendAll();
 8000b42:	f000 f8a7 	bl	8000c94 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8000b46:	4b22      	ldr	r3, [pc, #136]	; (8000bd0 <xTaskDelayUntil+0x9c>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	613b      	str	r3, [r7, #16]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	683a      	ldr	r2, [r7, #0]
 8000b52:	4413      	add	r3, r2
 8000b54:	60fb      	str	r3, [r7, #12]

            if( xConstTickCount < *pxPreviousWakeTime )
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d20b      	bcs.n	8000b78 <xTaskDelayUntil+0x44>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	68fa      	ldr	r2, [r7, #12]
 8000b66:	429a      	cmp	r2, r3
 8000b68:	d211      	bcs.n	8000b8e <xTaskDelayUntil+0x5a>
 8000b6a:	68fa      	ldr	r2, [r7, #12]
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	d90d      	bls.n	8000b8e <xTaskDelayUntil+0x5a>
                {
                    xShouldDelay = pdTRUE;
 8000b72:	2301      	movs	r3, #1
 8000b74:	617b      	str	r3, [r7, #20]
 8000b76:	e00a      	b.n	8000b8e <xTaskDelayUntil+0x5a>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	68fa      	ldr	r2, [r7, #12]
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d303      	bcc.n	8000b8a <xTaskDelayUntil+0x56>
 8000b82:	68fa      	ldr	r2, [r7, #12]
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d901      	bls.n	8000b8e <xTaskDelayUntil+0x5a>
                {
                    xShouldDelay = pdTRUE;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	617b      	str	r3, [r7, #20]
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	68fa      	ldr	r2, [r7, #12]
 8000b92:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d006      	beq.n	8000ba8 <xTaskDelayUntil+0x74>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	693b      	ldr	r3, [r7, #16]
 8000b9e:	1ad3      	subs	r3, r2, r3
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 fcca 	bl	800153c <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8000ba8:	f000 f882 	bl	8000cb0 <xTaskResumeAll>
 8000bac:	60b8      	str	r0, [r7, #8]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d107      	bne.n	8000bc4 <xTaskDelayUntil+0x90>
        {
            portYIELD_WITHIN_API();
 8000bb4:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <xTaskDelayUntil+0xa0>)
 8000bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	f3bf 8f4f 	dsb	sy
 8000bc0:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8000bc4:	697b      	ldr	r3, [r7, #20]
    }
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3718      	adds	r7, #24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000100 	.word	0x20000100
 8000bd4:	e000ed04 	.word	0xe000ed04

08000bd8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d008      	beq.n	8000bfc <vTaskDelay+0x24>
        {
            configASSERT( uxSchedulerSuspended == 0 );
            vTaskSuspendAll();
 8000bea:	f000 f853 	bl	8000c94 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000bee:	2100      	movs	r1, #0
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f000 fca3 	bl	800153c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8000bf6:	f000 f85b 	bl	8000cb0 <xTaskResumeAll>
 8000bfa:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d107      	bne.n	8000c12 <vTaskDelay+0x3a>
        {
            portYIELD_WITHIN_API();
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <vTaskDelay+0x44>)
 8000c04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	f3bf 8f4f 	dsb	sy
 8000c0e:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000c12:	bf00      	nop
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	e000ed04 	.word	0xe000ed04

08000c20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8000c26:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <vTaskStartScheduler+0x58>)
 8000c28:	9301      	str	r3, [sp, #4]
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	9300      	str	r3, [sp, #0]
 8000c2e:	2300      	movs	r3, #0
 8000c30:	2280      	movs	r2, #128	; 0x80
 8000c32:	4912      	ldr	r1, [pc, #72]	; (8000c7c <vTaskStartScheduler+0x5c>)
 8000c34:	4812      	ldr	r0, [pc, #72]	; (8000c80 <vTaskStartScheduler+0x60>)
 8000c36:	f7ff fe31 	bl	800089c <xTaskCreate>
 8000c3a:	6078      	str	r0, [r7, #4]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d114      	bne.n	8000c6c <vTaskStartScheduler+0x4c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000c42:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000c46:	f383 8811 	msr	BASEPRI, r3
 8000c4a:	f3bf 8f6f 	isb	sy
 8000c4e:	f3bf 8f4f 	dsb	sy
 8000c52:	603b      	str	r3, [r7, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8000c54:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <vTaskStartScheduler+0x64>)
 8000c56:	f04f 32ff 	mov.w	r2, #4294967295
 8000c5a:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <vTaskStartScheduler+0x68>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000c62:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <vTaskStartScheduler+0x6c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8000c68:	f000 fd58 	bl	800171c <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <vTaskStartScheduler+0x70>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000120 	.word	0x20000120
 8000c7c:	080029ec 	.word	0x080029ec
 8000c80:	080013e1 	.word	0x080013e1
 8000c84:	2000011c 	.word	0x2000011c
 8000c88:	20000108 	.word	0x20000108
 8000c8c:	20000100 	.word	0x20000100
 8000c90:	20000000 	.word	0x20000000

08000c94 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000c98:	4b04      	ldr	r3, [pc, #16]	; (8000cac <vTaskSuspendAll+0x18>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	4a03      	ldr	r2, [pc, #12]	; (8000cac <vTaskSuspendAll+0x18>)
 8000ca0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000ca2:	bf00      	nop
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc80      	pop	{r7}
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	20000124 	.word	0x20000124

08000cb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8000cbe:	f000 fd4d 	bl	800175c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000cc2:	4b68      	ldr	r3, [pc, #416]	; (8000e64 <xTaskResumeAll+0x1b4>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	4a66      	ldr	r2, [pc, #408]	; (8000e64 <xTaskResumeAll+0x1b4>)
 8000cca:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000ccc:	4b65      	ldr	r3, [pc, #404]	; (8000e64 <xTaskResumeAll+0x1b4>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	f040 80c0 	bne.w	8000e56 <xTaskResumeAll+0x1a6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000cd6:	4b64      	ldr	r3, [pc, #400]	; (8000e68 <xTaskResumeAll+0x1b8>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	f000 80bb 	beq.w	8000e56 <xTaskResumeAll+0x1a6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000ce0:	e08a      	b.n	8000df8 <xTaskResumeAll+0x148>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000ce2:	4b62      	ldr	r3, [pc, #392]	; (8000e6c <xTaskResumeAll+0x1bc>)
 8000ce4:	68db      	ldr	r3, [r3, #12]
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cee:	60bb      	str	r3, [r7, #8]
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	69db      	ldr	r3, [r3, #28]
 8000cf4:	697a      	ldr	r2, [r7, #20]
 8000cf6:	6a12      	ldr	r2, [r2, #32]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	6a1b      	ldr	r3, [r3, #32]
 8000cfe:	697a      	ldr	r2, [r7, #20]
 8000d00:	69d2      	ldr	r2, [r2, #28]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	685a      	ldr	r2, [r3, #4]
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	3318      	adds	r3, #24
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d103      	bne.n	8000d18 <xTaskResumeAll+0x68>
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	6a1a      	ldr	r2, [r3, #32]
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	629a      	str	r2, [r3, #40]	; 0x28
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	1e5a      	subs	r2, r3, #1
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	695b      	ldr	r3, [r3, #20]
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	697a      	ldr	r2, [r7, #20]
 8000d34:	68d2      	ldr	r2, [r2, #12]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	697a      	ldr	r2, [r7, #20]
 8000d3e:	6892      	ldr	r2, [r2, #8]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	685a      	ldr	r2, [r3, #4]
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	3304      	adds	r3, #4
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	d103      	bne.n	8000d56 <xTaskResumeAll+0xa6>
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	68da      	ldr	r2, [r3, #12]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	615a      	str	r2, [r3, #20]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	1e5a      	subs	r2, r3, #1
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	409a      	lsls	r2, r3
 8000d6e:	4b40      	ldr	r3, [pc, #256]	; (8000e70 <xTaskResumeAll+0x1c0>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	4a3e      	ldr	r2, [pc, #248]	; (8000e70 <xTaskResumeAll+0x1c0>)
 8000d76:	6013      	str	r3, [r2, #0]
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d7c:	493d      	ldr	r1, [pc, #244]	; (8000e74 <xTaskResumeAll+0x1c4>)
 8000d7e:	4613      	mov	r3, r2
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	4413      	add	r3, r2
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	440b      	add	r3, r1
 8000d88:	3304      	adds	r3, #4
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	603b      	str	r3, [r7, #0]
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	683a      	ldr	r2, [r7, #0]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	689a      	ldr	r2, [r3, #8]
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	60da      	str	r2, [r3, #12]
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	697a      	ldr	r2, [r7, #20]
 8000da2:	3204      	adds	r2, #4
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	1d1a      	adds	r2, r3, #4
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000db2:	4613      	mov	r3, r2
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	4413      	add	r3, r2
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	4a2e      	ldr	r2, [pc, #184]	; (8000e74 <xTaskResumeAll+0x1c4>)
 8000dbc:	441a      	add	r2, r3
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	615a      	str	r2, [r3, #20]
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dc6:	492b      	ldr	r1, [pc, #172]	; (8000e74 <xTaskResumeAll+0x1c4>)
 8000dc8:	4613      	mov	r3, r2
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	4413      	add	r3, r2
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	440b      	add	r3, r1
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	1c59      	adds	r1, r3, #1
 8000dd6:	4827      	ldr	r0, [pc, #156]	; (8000e74 <xTaskResumeAll+0x1c4>)
 8000dd8:	4613      	mov	r3, r2
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	4413      	add	r3, r2
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	4403      	add	r3, r0
 8000de2:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000de8:	4b23      	ldr	r3, [pc, #140]	; (8000e78 <xTaskResumeAll+0x1c8>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d302      	bcc.n	8000df8 <xTaskResumeAll+0x148>
                    {
                        xYieldPending = pdTRUE;
 8000df2:	4b22      	ldr	r3, [pc, #136]	; (8000e7c <xTaskResumeAll+0x1cc>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000df8:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <xTaskResumeAll+0x1bc>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	f47f af70 	bne.w	8000ce2 <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <xTaskResumeAll+0x15c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8000e08:	f000 fb7e 	bl	8001508 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000e0c:	4b1c      	ldr	r3, [pc, #112]	; (8000e80 <xTaskResumeAll+0x1d0>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d010      	beq.n	8000e3a <xTaskResumeAll+0x18a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8000e18:	f000 f844 	bl	8000ea4 <xTaskIncrementTick>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d002      	beq.n	8000e28 <xTaskResumeAll+0x178>
                            {
                                xYieldPending = pdTRUE;
 8000e22:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <xTaskResumeAll+0x1cc>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d1f1      	bne.n	8000e18 <xTaskResumeAll+0x168>

                        xPendedTicks = 0;
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <xTaskResumeAll+0x1d0>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8000e3a:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <xTaskResumeAll+0x1cc>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d009      	beq.n	8000e56 <xTaskResumeAll+0x1a6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8000e42:	2301      	movs	r3, #1
 8000e44:	613b      	str	r3, [r7, #16]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8000e46:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <xTaskResumeAll+0x1d4>)
 8000e48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	f3bf 8f4f 	dsb	sy
 8000e52:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8000e56:	f000 fc99 	bl	800178c <vPortExitCritical>

    return xAlreadyYielded;
 8000e5a:	693b      	ldr	r3, [r7, #16]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3718      	adds	r7, #24
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000124 	.word	0x20000124
 8000e68:	200000fc 	.word	0x200000fc
 8000e6c:	200000bc 	.word	0x200000bc
 8000e70:	20000104 	.word	0x20000104
 8000e74:	20000028 	.word	0x20000028
 8000e78:	20000024 	.word	0x20000024
 8000e7c:	20000110 	.word	0x20000110
 8000e80:	2000010c 	.word	0x2000010c
 8000e84:	e000ed04 	.word	0xe000ed04

08000e88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8000e8e:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <xTaskGetTickCount+0x18>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8000e94:	687b      	ldr	r3, [r7, #4]
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bc80      	pop	{r7}
 8000e9e:	4770      	bx	lr
 8000ea0:	20000100 	.word	0x20000100

08000ea4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b088      	sub	sp, #32
 8000ea8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000eae:	4b79      	ldr	r3, [pc, #484]	; (8001094 <xTaskIncrementTick+0x1f0>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f040 80e2 	bne.w	800107c <xTaskIncrementTick+0x1d8>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000eb8:	4b77      	ldr	r3, [pc, #476]	; (8001098 <xTaskIncrementTick+0x1f4>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000ec0:	4a75      	ldr	r2, [pc, #468]	; (8001098 <xTaskIncrementTick+0x1f4>)
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d110      	bne.n	8000eee <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 8000ecc:	4b73      	ldr	r3, [pc, #460]	; (800109c <xTaskIncrementTick+0x1f8>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	617b      	str	r3, [r7, #20]
 8000ed2:	4b73      	ldr	r3, [pc, #460]	; (80010a0 <xTaskIncrementTick+0x1fc>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a71      	ldr	r2, [pc, #452]	; (800109c <xTaskIncrementTick+0x1f8>)
 8000ed8:	6013      	str	r3, [r2, #0]
 8000eda:	4a71      	ldr	r2, [pc, #452]	; (80010a0 <xTaskIncrementTick+0x1fc>)
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	6013      	str	r3, [r2, #0]
 8000ee0:	4b70      	ldr	r3, [pc, #448]	; (80010a4 <xTaskIncrementTick+0x200>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	4a6f      	ldr	r2, [pc, #444]	; (80010a4 <xTaskIncrementTick+0x200>)
 8000ee8:	6013      	str	r3, [r2, #0]
 8000eea:	f000 fb0d 	bl	8001508 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000eee:	4b6e      	ldr	r3, [pc, #440]	; (80010a8 <xTaskIncrementTick+0x204>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	f0c0 80a6 	bcc.w	8001046 <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000efa:	4b68      	ldr	r3, [pc, #416]	; (800109c <xTaskIncrementTick+0x1f8>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d104      	bne.n	8000f0e <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000f04:	4b68      	ldr	r3, [pc, #416]	; (80010a8 <xTaskIncrementTick+0x204>)
 8000f06:	f04f 32ff 	mov.w	r2, #4294967295
 8000f0a:	601a      	str	r2, [r3, #0]
                    break;
 8000f0c:	e09b      	b.n	8001046 <xTaskIncrementTick+0x1a2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000f0e:	4b63      	ldr	r3, [pc, #396]	; (800109c <xTaskIncrementTick+0x1f8>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	68db      	ldr	r3, [r3, #12]
 8000f16:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	429a      	cmp	r2, r3
 8000f24:	d203      	bcs.n	8000f2e <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000f26:	4a60      	ldr	r2, [pc, #384]	; (80010a8 <xTaskIncrementTick+0x204>)
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8000f2c:	e08b      	b.n	8001046 <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	695b      	ldr	r3, [r3, #20]
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	68d2      	ldr	r2, [r2, #12]
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	68db      	ldr	r3, [r3, #12]
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	6892      	ldr	r2, [r2, #8]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	685a      	ldr	r2, [r3, #4]
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	3304      	adds	r3, #4
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d103      	bne.n	8000f5c <xTaskIncrementTick+0xb8>
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	68da      	ldr	r2, [r3, #12]
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	615a      	str	r2, [r3, #20]
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	1e5a      	subs	r2, r3, #1
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d01e      	beq.n	8000fb2 <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	69db      	ldr	r3, [r3, #28]
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	6a12      	ldr	r2, [r2, #32]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	6a1b      	ldr	r3, [r3, #32]
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	69d2      	ldr	r2, [r2, #28]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	685a      	ldr	r2, [r3, #4]
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	3318      	adds	r3, #24
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d103      	bne.n	8000fa2 <xTaskIncrementTick+0xfe>
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	6a1a      	ldr	r2, [r3, #32]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	629a      	str	r2, [r3, #40]	; 0x28
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	1e5a      	subs	r2, r3, #1
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	409a      	lsls	r2, r3
 8000fba:	4b3c      	ldr	r3, [pc, #240]	; (80010ac <xTaskIncrementTick+0x208>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	4a3a      	ldr	r2, [pc, #232]	; (80010ac <xTaskIncrementTick+0x208>)
 8000fc2:	6013      	str	r3, [r2, #0]
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fc8:	4939      	ldr	r1, [pc, #228]	; (80010b0 <xTaskIncrementTick+0x20c>)
 8000fca:	4613      	mov	r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	4413      	add	r3, r2
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	440b      	add	r3, r1
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	603b      	str	r3, [r7, #0]
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	683a      	ldr	r2, [r7, #0]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	689a      	ldr	r2, [r3, #8]
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	60da      	str	r2, [r3, #12]
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	3204      	adds	r2, #4
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	1d1a      	adds	r2, r3, #4
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ffe:	4613      	mov	r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	4413      	add	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	4a2a      	ldr	r2, [pc, #168]	; (80010b0 <xTaskIncrementTick+0x20c>)
 8001008:	441a      	add	r2, r3
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	615a      	str	r2, [r3, #20]
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001012:	4927      	ldr	r1, [pc, #156]	; (80010b0 <xTaskIncrementTick+0x20c>)
 8001014:	4613      	mov	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	4413      	add	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	440b      	add	r3, r1
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	1c59      	adds	r1, r3, #1
 8001022:	4823      	ldr	r0, [pc, #140]	; (80010b0 <xTaskIncrementTick+0x20c>)
 8001024:	4613      	mov	r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	4413      	add	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	4403      	add	r3, r0
 800102e:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001034:	4b1f      	ldr	r3, [pc, #124]	; (80010b4 <xTaskIncrementTick+0x210>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103a:	429a      	cmp	r2, r3
 800103c:	f4ff af5d 	bcc.w	8000efa <xTaskIncrementTick+0x56>
                            {
                                xSwitchRequired = pdTRUE;
 8001040:	2301      	movs	r3, #1
 8001042:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001044:	e759      	b.n	8000efa <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001046:	4b1b      	ldr	r3, [pc, #108]	; (80010b4 <xTaskIncrementTick+0x210>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800104c:	4918      	ldr	r1, [pc, #96]	; (80010b0 <xTaskIncrementTick+0x20c>)
 800104e:	4613      	mov	r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4413      	add	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	440b      	add	r3, r1
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d901      	bls.n	8001062 <xTaskIncrementTick+0x1be>
                {
                    xSwitchRequired = pdTRUE;
 800105e:	2301      	movs	r3, #1
 8001060:	61fb      	str	r3, [r7, #28]

        #if ( configUSE_TICK_HOOK == 1 )
            {
                /* Guard against the tick hook being called when the pended tick
                 * count is being unwound (when the scheduler is being unlocked). */
                if( xPendedTicks == ( TickType_t ) 0 )
 8001062:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <xTaskIncrementTick+0x214>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <xTaskIncrementTick+0x1ca>
                {
                    vApplicationTickHook();
 800106a:	f001 fc3f 	bl	80028ec <vApplicationTickHook>
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800106e:	4b13      	ldr	r3, [pc, #76]	; (80010bc <xTaskIncrementTick+0x218>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d009      	beq.n	800108a <xTaskIncrementTick+0x1e6>
                {
                    xSwitchRequired = pdTRUE;
 8001076:	2301      	movs	r3, #1
 8001078:	61fb      	str	r3, [r7, #28]
 800107a:	e006      	b.n	800108a <xTaskIncrementTick+0x1e6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800107c:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <xTaskIncrementTick+0x214>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	3301      	adds	r3, #1
 8001082:	4a0d      	ldr	r2, [pc, #52]	; (80010b8 <xTaskIncrementTick+0x214>)
 8001084:	6013      	str	r3, [r2, #0]

        /* The tick hook gets called at regular intervals, even if the
         * scheduler is locked. */
        #if ( configUSE_TICK_HOOK == 1 )
            {
                vApplicationTickHook();
 8001086:	f001 fc31 	bl	80028ec <vApplicationTickHook>
            }
        #endif
    }

    return xSwitchRequired;
 800108a:	69fb      	ldr	r3, [r7, #28]
}
 800108c:	4618      	mov	r0, r3
 800108e:	3720      	adds	r7, #32
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000124 	.word	0x20000124
 8001098:	20000100 	.word	0x20000100
 800109c:	200000b4 	.word	0x200000b4
 80010a0:	200000b8 	.word	0x200000b8
 80010a4:	20000114 	.word	0x20000114
 80010a8:	2000011c 	.word	0x2000011c
 80010ac:	20000104 	.word	0x20000104
 80010b0:	20000028 	.word	0x20000028
 80010b4:	20000024 	.word	0x20000024
 80010b8:	2000010c 	.word	0x2000010c
 80010bc:	20000110 	.word	0x20000110

080010c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80010c6:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <vTaskSwitchContext+0x78>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80010ce:	4b1b      	ldr	r3, [pc, #108]	; (800113c <vTaskSwitchContext+0x7c>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80010d4:	e02a      	b.n	800112c <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 80010d6:	4b19      	ldr	r3, [pc, #100]	; (800113c <vTaskSwitchContext+0x7c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80010dc:	4b18      	ldr	r3, [pc, #96]	; (8001140 <vTaskSwitchContext+0x80>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	fab3 f383 	clz	r3, r3
 80010e8:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 80010ea:	78fb      	ldrb	r3, [r7, #3]
 80010ec:	f1c3 031f 	rsb	r3, r3, #31
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	4613      	mov	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	4413      	add	r3, r2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4a11      	ldr	r2, [pc, #68]	; (8001144 <vTaskSwitchContext+0x84>)
 80010fe:	4413      	add	r3, r2
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	685a      	ldr	r2, [r3, #4]
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	685a      	ldr	r2, [r3, #4]
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	3308      	adds	r3, #8
 8001114:	429a      	cmp	r2, r3
 8001116:	d104      	bne.n	8001122 <vTaskSwitchContext+0x62>
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	4a07      	ldr	r2, [pc, #28]	; (8001148 <vTaskSwitchContext+0x88>)
 800112a:	6013      	str	r3, [r2, #0]
}
 800112c:	bf00      	nop
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	bc80      	pop	{r7}
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	20000124 	.word	0x20000124
 800113c:	20000110 	.word	0x20000110
 8001140:	20000104 	.word	0x20000104
 8001144:	20000028 	.word	0x20000028
 8001148:	20000024 	.word	0x20000024

0800114c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001156:	4b07      	ldr	r3, [pc, #28]	; (8001174 <vTaskPlaceOnEventList+0x28>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	3318      	adds	r3, #24
 800115c:	4619      	mov	r1, r3
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff f839 	bl	80001d6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001164:	2101      	movs	r1, #1
 8001166:	6838      	ldr	r0, [r7, #0]
 8001168:	f000 f9e8 	bl	800153c <prvAddCurrentTaskToDelayedList>
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000024 	.word	0x20000024

08001178 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001178:	b480      	push	{r7}
 800117a:	b089      	sub	sp, #36	; 0x24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800118c:	617b      	str	r3, [r7, #20]
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	6a12      	ldr	r2, [r2, #32]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	6a1b      	ldr	r3, [r3, #32]
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	69d2      	ldr	r2, [r2, #28]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	685a      	ldr	r2, [r3, #4]
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	3318      	adds	r3, #24
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d103      	bne.n	80011b6 <xTaskRemoveFromEventList+0x3e>
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	6a1a      	ldr	r2, [r3, #32]
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	2200      	movs	r2, #0
 80011ba:	629a      	str	r2, [r3, #40]	; 0x28
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	1e5a      	subs	r2, r3, #1
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80011c6:	4b4a      	ldr	r3, [pc, #296]	; (80012f0 <xTaskRemoveFromEventList+0x178>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d15e      	bne.n	800128c <xTaskRemoveFromEventList+0x114>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	68d2      	ldr	r2, [r2, #12]
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	6892      	ldr	r2, [r2, #8]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	685a      	ldr	r2, [r3, #4]
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	3304      	adds	r3, #4
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d103      	bne.n	80011fc <xTaskRemoveFromEventList+0x84>
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	68da      	ldr	r2, [r3, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	2200      	movs	r2, #0
 8001200:	615a      	str	r2, [r3, #20]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	1e5a      	subs	r2, r3, #1
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001210:	2201      	movs	r2, #1
 8001212:	409a      	lsls	r2, r3
 8001214:	4b37      	ldr	r3, [pc, #220]	; (80012f4 <xTaskRemoveFromEventList+0x17c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4313      	orrs	r3, r2
 800121a:	4a36      	ldr	r2, [pc, #216]	; (80012f4 <xTaskRemoveFromEventList+0x17c>)
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001222:	4935      	ldr	r1, [pc, #212]	; (80012f8 <xTaskRemoveFromEventList+0x180>)
 8001224:	4613      	mov	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4413      	add	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	440b      	add	r3, r1
 800122e:	3304      	adds	r3, #4
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	68ba      	ldr	r2, [r7, #8]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	689a      	ldr	r2, [r3, #8]
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	3204      	adds	r2, #4
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	1d1a      	adds	r2, r3, #4
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001258:	4613      	mov	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4413      	add	r3, r2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	4a25      	ldr	r2, [pc, #148]	; (80012f8 <xTaskRemoveFromEventList+0x180>)
 8001262:	441a      	add	r2, r3
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	615a      	str	r2, [r3, #20]
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800126c:	4922      	ldr	r1, [pc, #136]	; (80012f8 <xTaskRemoveFromEventList+0x180>)
 800126e:	4613      	mov	r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	4413      	add	r3, r2
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	440b      	add	r3, r1
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	1c59      	adds	r1, r3, #1
 800127c:	481e      	ldr	r0, [pc, #120]	; (80012f8 <xTaskRemoveFromEventList+0x180>)
 800127e:	4613      	mov	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	4413      	add	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	4403      	add	r3, r0
 8001288:	6019      	str	r1, [r3, #0]
 800128a:	e01b      	b.n	80012c4 <xTaskRemoveFromEventList+0x14c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800128c:	4b1b      	ldr	r3, [pc, #108]	; (80012fc <xTaskRemoveFromEventList+0x184>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	61da      	str	r2, [r3, #28]
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	689a      	ldr	r2, [r3, #8]
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	621a      	str	r2, [r3, #32]
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	3218      	adds	r2, #24
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	f103 0218 	add.w	r2, r3, #24
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	4a11      	ldr	r2, [pc, #68]	; (80012fc <xTaskRemoveFromEventList+0x184>)
 80012b8:	629a      	str	r2, [r3, #40]	; 0x28
 80012ba:	4b10      	ldr	r3, [pc, #64]	; (80012fc <xTaskRemoveFromEventList+0x184>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	3301      	adds	r3, #1
 80012c0:	4a0e      	ldr	r2, [pc, #56]	; (80012fc <xTaskRemoveFromEventList+0x184>)
 80012c2:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012c8:	4b0d      	ldr	r3, [pc, #52]	; (8001300 <xTaskRemoveFromEventList+0x188>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d905      	bls.n	80012de <xTaskRemoveFromEventList+0x166>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80012d2:	2301      	movs	r3, #1
 80012d4:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80012d6:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <xTaskRemoveFromEventList+0x18c>)
 80012d8:	2201      	movs	r2, #1
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	e001      	b.n	80012e2 <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        xReturn = pdFALSE;
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 80012e2:	69fb      	ldr	r3, [r7, #28]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3724      	adds	r7, #36	; 0x24
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	20000124 	.word	0x20000124
 80012f4:	20000104 	.word	0x20000104
 80012f8:	20000028 	.word	0x20000028
 80012fc:	200000bc 	.word	0x200000bc
 8001300:	20000024 	.word	0x20000024
 8001304:	20000110 	.word	0x20000110

08001308 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <vTaskInternalSetTimeOutState+0x24>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <vTaskInternalSetTimeOutState+0x28>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	605a      	str	r2, [r3, #4]
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20000114 	.word	0x20000114
 8001330:	20000100 	.word	0x20000100

08001334 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
 800133e:	f000 fa0d 	bl	800175c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001342:	4b1f      	ldr	r3, [pc, #124]	; (80013c0 <xTaskCheckForTimeOut+0x8c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800135a:	d102      	bne.n	8001362 <xTaskCheckForTimeOut+0x2e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]
 8001360:	e026      	b.n	80013b0 <xTaskCheckForTimeOut+0x7c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <xTaskCheckForTimeOut+0x90>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	429a      	cmp	r2, r3
 800136c:	d00a      	beq.n	8001384 <xTaskCheckForTimeOut+0x50>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	429a      	cmp	r2, r3
 8001376:	d305      	bcc.n	8001384 <xTaskCheckForTimeOut+0x50>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001378:	2301      	movs	r3, #1
 800137a:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	e015      	b.n	80013b0 <xTaskCheckForTimeOut+0x7c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	429a      	cmp	r2, r3
 800138c:	d20b      	bcs.n	80013a6 <xTaskCheckForTimeOut+0x72>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	1ad2      	subs	r2, r2, r3
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff ffb4 	bl	8001308 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	e004      	b.n	80013b0 <xTaskCheckForTimeOut+0x7c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80013ac:	2301      	movs	r3, #1
 80013ae:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 80013b0:	f000 f9ec 	bl	800178c <vPortExitCritical>

    return xReturn;
 80013b4:	697b      	ldr	r3, [r7, #20]
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3718      	adds	r7, #24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000100 	.word	0x20000100
 80013c4:	20000114 	.word	0x20000114

080013c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80013cc:	4b03      	ldr	r3, [pc, #12]	; (80013dc <vTaskMissedYield+0x14>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	601a      	str	r2, [r3, #0]
}
 80013d2:	bf00      	nop
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	20000110 	.word	0x20000110

080013e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80013e8:	f000 f852 	bl	8001490 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <prvIdleTask+0x28>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d9f9      	bls.n	80013e8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80013f4:	4b05      	ldr	r3, [pc, #20]	; (800140c <prvIdleTask+0x2c>)
 80013f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	f3bf 8f4f 	dsb	sy
 8001400:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001404:	e7f0      	b.n	80013e8 <prvIdleTask+0x8>
 8001406:	bf00      	nop
 8001408:	20000028 	.word	0x20000028
 800140c:	e000ed04 	.word	0xe000ed04

08001410 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001416:	2300      	movs	r3, #0
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	e00c      	b.n	8001436 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	4613      	mov	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	4413      	add	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4a12      	ldr	r2, [pc, #72]	; (8001470 <prvInitialiseTaskLists+0x60>)
 8001428:	4413      	add	r3, r2
 800142a:	4618      	mov	r0, r3
 800142c:	f7fe fea8 	bl	8000180 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3301      	adds	r3, #1
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2b04      	cmp	r3, #4
 800143a:	d9ef      	bls.n	800141c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800143c:	480d      	ldr	r0, [pc, #52]	; (8001474 <prvInitialiseTaskLists+0x64>)
 800143e:	f7fe fe9f 	bl	8000180 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001442:	480d      	ldr	r0, [pc, #52]	; (8001478 <prvInitialiseTaskLists+0x68>)
 8001444:	f7fe fe9c 	bl	8000180 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001448:	480c      	ldr	r0, [pc, #48]	; (800147c <prvInitialiseTaskLists+0x6c>)
 800144a:	f7fe fe99 	bl	8000180 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800144e:	480c      	ldr	r0, [pc, #48]	; (8001480 <prvInitialiseTaskLists+0x70>)
 8001450:	f7fe fe96 	bl	8000180 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8001454:	480b      	ldr	r0, [pc, #44]	; (8001484 <prvInitialiseTaskLists+0x74>)
 8001456:	f7fe fe93 	bl	8000180 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800145a:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <prvInitialiseTaskLists+0x78>)
 800145c:	4a05      	ldr	r2, [pc, #20]	; (8001474 <prvInitialiseTaskLists+0x64>)
 800145e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001460:	4b0a      	ldr	r3, [pc, #40]	; (800148c <prvInitialiseTaskLists+0x7c>)
 8001462:	4a05      	ldr	r2, [pc, #20]	; (8001478 <prvInitialiseTaskLists+0x68>)
 8001464:	601a      	str	r2, [r3, #0]
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000028 	.word	0x20000028
 8001474:	2000008c 	.word	0x2000008c
 8001478:	200000a0 	.word	0x200000a0
 800147c:	200000bc 	.word	0x200000bc
 8001480:	200000d0 	.word	0x200000d0
 8001484:	200000e8 	.word	0x200000e8
 8001488:	200000b4 	.word	0x200000b4
 800148c:	200000b8 	.word	0x200000b8

08001490 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001496:	e019      	b.n	80014cc <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001498:	f000 f960 	bl	800175c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800149c:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <prvCheckTasksWaitingTermination+0x4c>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3304      	adds	r3, #4
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7fe fecc 	bl	8000246 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80014ae:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <prvCheckTasksWaitingTermination+0x50>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	4a0a      	ldr	r2, [pc, #40]	; (80014e0 <prvCheckTasksWaitingTermination+0x50>)
 80014b6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80014b8:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <prvCheckTasksWaitingTermination+0x54>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	3b01      	subs	r3, #1
 80014be:	4a09      	ldr	r2, [pc, #36]	; (80014e4 <prvCheckTasksWaitingTermination+0x54>)
 80014c0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80014c2:	f000 f963 	bl	800178c <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f000 f80e 	bl	80014e8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80014cc:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <prvCheckTasksWaitingTermination+0x54>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1e1      	bne.n	8001498 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
 }
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	200000d0 	.word	0x200000d0
 80014e0:	200000fc 	.word	0x200000fc
 80014e4:	200000e4 	.word	0x200000e4

080014e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f4:	4618      	mov	r0, r3
 80014f6:	f000 fa6f 	bl	80019d8 <vPortFree>
                vPortFree( pxTCB );
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 fa6c 	bl	80019d8 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <prvResetNextTaskUnblockTime+0x2c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d104      	bne.n	8001520 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001516:	4b08      	ldr	r3, [pc, #32]	; (8001538 <prvResetNextTaskUnblockTime+0x30>)
 8001518:	f04f 32ff 	mov.w	r2, #4294967295
 800151c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800151e:	e005      	b.n	800152c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001520:	4b04      	ldr	r3, [pc, #16]	; (8001534 <prvResetNextTaskUnblockTime+0x2c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a03      	ldr	r2, [pc, #12]	; (8001538 <prvResetNextTaskUnblockTime+0x30>)
 800152a:	6013      	str	r3, [r2, #0]
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr
 8001534:	200000b4 	.word	0x200000b4
 8001538:	2000011c 	.word	0x2000011c

0800153c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001546:	4b36      	ldr	r3, [pc, #216]	; (8001620 <prvAddCurrentTaskToDelayedList+0xe4>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800154c:	4b35      	ldr	r3, [pc, #212]	; (8001624 <prvAddCurrentTaskToDelayedList+0xe8>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	3304      	adds	r3, #4
 8001552:	4618      	mov	r0, r3
 8001554:	f7fe fe77 	bl	8000246 <uxListRemove>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d10b      	bne.n	8001576 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800155e:	4b31      	ldr	r3, [pc, #196]	; (8001624 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001564:	2201      	movs	r2, #1
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43da      	mvns	r2, r3
 800156c:	4b2e      	ldr	r3, [pc, #184]	; (8001628 <prvAddCurrentTaskToDelayedList+0xec>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4013      	ands	r3, r2
 8001572:	4a2d      	ldr	r2, [pc, #180]	; (8001628 <prvAddCurrentTaskToDelayedList+0xec>)
 8001574:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800157c:	d124      	bne.n	80015c8 <prvAddCurrentTaskToDelayedList+0x8c>
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d021      	beq.n	80015c8 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001584:	4b29      	ldr	r3, [pc, #164]	; (800162c <prvAddCurrentTaskToDelayedList+0xf0>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	613b      	str	r3, [r7, #16]
 800158a:	4b26      	ldr	r3, [pc, #152]	; (8001624 <prvAddCurrentTaskToDelayedList+0xe8>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	4b24      	ldr	r3, [pc, #144]	; (8001624 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	6892      	ldr	r2, [r2, #8]
 800159a:	60da      	str	r2, [r3, #12]
 800159c:	4b21      	ldr	r3, [pc, #132]	; (8001624 <prvAddCurrentTaskToDelayedList+0xe8>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	3204      	adds	r2, #4
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	4b1e      	ldr	r3, [pc, #120]	; (8001624 <prvAddCurrentTaskToDelayedList+0xe8>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	1d1a      	adds	r2, r3, #4
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	4b1c      	ldr	r3, [pc, #112]	; (8001624 <prvAddCurrentTaskToDelayedList+0xe8>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a1d      	ldr	r2, [pc, #116]	; (800162c <prvAddCurrentTaskToDelayedList+0xf0>)
 80015b8:	615a      	str	r2, [r3, #20]
 80015ba:	4b1c      	ldr	r3, [pc, #112]	; (800162c <prvAddCurrentTaskToDelayedList+0xf0>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	3301      	adds	r3, #1
 80015c0:	4a1a      	ldr	r2, [pc, #104]	; (800162c <prvAddCurrentTaskToDelayedList+0xf0>)
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80015c6:	e026      	b.n	8001616 <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80015c8:	697a      	ldr	r2, [r7, #20]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4413      	add	r3, r2
 80015ce:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80015d0:	4b14      	ldr	r3, [pc, #80]	; (8001624 <prvAddCurrentTaskToDelayedList+0xe8>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80015d8:	68fa      	ldr	r2, [r7, #12]
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d209      	bcs.n	80015f4 <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80015e0:	4b13      	ldr	r3, [pc, #76]	; (8001630 <prvAddCurrentTaskToDelayedList+0xf4>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <prvAddCurrentTaskToDelayedList+0xe8>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	3304      	adds	r3, #4
 80015ea:	4619      	mov	r1, r3
 80015ec:	4610      	mov	r0, r2
 80015ee:	f7fe fdf2 	bl	80001d6 <vListInsert>
}
 80015f2:	e010      	b.n	8001616 <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80015f4:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <prvAddCurrentTaskToDelayedList+0xf8>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <prvAddCurrentTaskToDelayedList+0xe8>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	3304      	adds	r3, #4
 80015fe:	4619      	mov	r1, r3
 8001600:	4610      	mov	r0, r2
 8001602:	f7fe fde8 	bl	80001d6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8001606:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	429a      	cmp	r2, r3
 800160e:	d202      	bcs.n	8001616 <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 8001610:	4a09      	ldr	r2, [pc, #36]	; (8001638 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	6013      	str	r3, [r2, #0]
}
 8001616:	bf00      	nop
 8001618:	3718      	adds	r7, #24
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000100 	.word	0x20000100
 8001624:	20000024 	.word	0x20000024
 8001628:	20000104 	.word	0x20000104
 800162c:	200000e8 	.word	0x200000e8
 8001630:	200000b8 	.word	0x200000b8
 8001634:	200000b4 	.word	0x200000b4
 8001638:	2000011c 	.word	0x2000011c

0800163c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	3b04      	subs	r3, #4
 800164c:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001654:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	3b04      	subs	r3, #4
 800165a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	f023 0201 	bic.w	r2, r3, #1
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	3b04      	subs	r3, #4
 800166a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800166c:	4a08      	ldr	r2, [pc, #32]	; (8001690 <pxPortInitialiseStack+0x54>)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	3b14      	subs	r3, #20
 8001676:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	3b20      	subs	r3, #32
 8001682:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001684:	68fb      	ldr	r3, [r7, #12]
}
 8001686:	4618      	mov	r0, r3
 8001688:	3714      	adds	r7, #20
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr
 8001690:	08001695 	.word	0x08001695

08001694 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800169a:	2300      	movs	r3, #0
 800169c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800169e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80016a2:	f383 8811 	msr	BASEPRI, r3
 80016a6:	f3bf 8f6f 	isb	sy
 80016aa:	f3bf 8f4f 	dsb	sy
 80016ae:	607b      	str	r3, [r7, #4]
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80016b0:	bf00      	nop
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d0fc      	beq.n	80016b2 <prvTaskExitError+0x1e>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr
	...

080016d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80016d0:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <pxCurrentTCBConst2>)
 80016d2:	6819      	ldr	r1, [r3, #0]
 80016d4:	6808      	ldr	r0, [r1, #0]
 80016d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80016da:	f380 8809 	msr	PSP, r0
 80016de:	f3bf 8f6f 	isb	sy
 80016e2:	f04f 0000 	mov.w	r0, #0
 80016e6:	f380 8811 	msr	BASEPRI, r0
 80016ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80016ee:	4770      	bx	lr

080016f0 <pxCurrentTCBConst2>:
 80016f0:	20000024 	.word	0x20000024
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80016f4:	bf00      	nop
 80016f6:	bf00      	nop

080016f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 80016f8:	4806      	ldr	r0, [pc, #24]	; (8001714 <prvPortStartFirstTask+0x1c>)
 80016fa:	6800      	ldr	r0, [r0, #0]
 80016fc:	6800      	ldr	r0, [r0, #0]
 80016fe:	f380 8808 	msr	MSP, r0
 8001702:	b662      	cpsie	i
 8001704:	b661      	cpsie	f
 8001706:	f3bf 8f4f 	dsb	sy
 800170a:	f3bf 8f6f 	isb	sy
 800170e:	df00      	svc	0
 8001710:	bf00      	nop
 8001712:	0000      	.short	0x0000
 8001714:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001718:	bf00      	nop
 800171a:	bf00      	nop

0800171c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
            *pucFirstUserPriorityRegister = ulOriginalPriority;
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8001720:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <xPortStartScheduler+0x38>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a0b      	ldr	r2, [pc, #44]	; (8001754 <xPortStartScheduler+0x38>)
 8001726:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800172a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800172c:	4b09      	ldr	r3, [pc, #36]	; (8001754 <xPortStartScheduler+0x38>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a08      	ldr	r2, [pc, #32]	; (8001754 <xPortStartScheduler+0x38>)
 8001732:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001736:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001738:	f000 f886 	bl	8001848 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <xPortStartScheduler+0x3c>)
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8001742:	f7ff ffd9 	bl	80016f8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001746:	f7ff fcbb 	bl	80010c0 <vTaskSwitchContext>
    prvTaskExitError();
 800174a:	f7ff ffa3 	bl	8001694 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	bd80      	pop	{r7, pc}
 8001754:	e000ed20 	.word	0xe000ed20
 8001758:	20000004 	.word	0x20000004

0800175c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001766:	f383 8811 	msr	BASEPRI, r3
 800176a:	f3bf 8f6f 	isb	sy
 800176e:	f3bf 8f4f 	dsb	sy
 8001772:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8001774:	4b04      	ldr	r3, [pc, #16]	; (8001788 <vPortEnterCritical+0x2c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	3301      	adds	r3, #1
 800177a:	4a03      	ldr	r2, [pc, #12]	; (8001788 <vPortEnterCritical+0x2c>)
 800177c:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr
 8001788:	20000004 	.word	0x20000004

0800178c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <vPortExitCritical+0x2c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	3b01      	subs	r3, #1
 8001798:	4a07      	ldr	r2, [pc, #28]	; (80017b8 <vPortExitCritical+0x2c>)
 800179a:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <vPortExitCritical+0x2c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d104      	bne.n	80017ae <vPortExitCritical+0x22>
 80017a4:	2300      	movs	r3, #0
 80017a6:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr
 80017b8:	20000004 	.word	0x20000004
 80017bc:	00000000 	.word	0x00000000

080017c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80017c0:	f3ef 8009 	mrs	r0, PSP
 80017c4:	f3bf 8f6f 	isb	sy
 80017c8:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <pxCurrentTCBConst>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80017d0:	6010      	str	r0, [r2, #0]
 80017d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80017d6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 80017da:	f380 8811 	msr	BASEPRI, r0
 80017de:	f7ff fc6f 	bl	80010c0 <vTaskSwitchContext>
 80017e2:	f04f 0000 	mov.w	r0, #0
 80017e6:	f380 8811 	msr	BASEPRI, r0
 80017ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80017ee:	6819      	ldr	r1, [r3, #0]
 80017f0:	6808      	ldr	r0, [r1, #0]
 80017f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80017f6:	f380 8809 	msr	PSP, r0
 80017fa:	f3bf 8f6f 	isb	sy
 80017fe:	4770      	bx	lr

08001800 <pxCurrentTCBConst>:
 8001800:	20000024 	.word	0x20000024
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001804:	bf00      	nop
 8001806:	bf00      	nop

08001808 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
        __asm volatile
 800180e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001812:	f383 8811 	msr	BASEPRI, r3
 8001816:	f3bf 8f6f 	isb	sy
 800181a:	f3bf 8f4f 	dsb	sy
 800181e:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001820:	f7ff fb40 	bl	8000ea4 <xTaskIncrementTick>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800182a:	4b06      	ldr	r3, [pc, #24]	; (8001844 <SysTick_Handler+0x3c>)
 800182c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	2300      	movs	r3, #0
 8001834:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 800183c:	bf00      	nop
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	e000ed04 	.word	0xe000ed04

08001848 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800184c:	4b07      	ldr	r3, [pc, #28]	; (800186c <vPortSetupTimerInterrupt+0x24>)
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001852:	4b07      	ldr	r3, [pc, #28]	; (8001870 <vPortSetupTimerInterrupt+0x28>)
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001858:	4b06      	ldr	r3, [pc, #24]	; (8001874 <vPortSetupTimerInterrupt+0x2c>)
 800185a:	4a07      	ldr	r2, [pc, #28]	; (8001878 <vPortSetupTimerInterrupt+0x30>)
 800185c:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800185e:	4b03      	ldr	r3, [pc, #12]	; (800186c <vPortSetupTimerInterrupt+0x24>)
 8001860:	2207      	movs	r2, #7
 8001862:	601a      	str	r2, [r3, #0]
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr
 800186c:	e000e010 	.word	0xe000e010
 8001870:	e000e018 	.word	0xe000e018
 8001874:	e000e014 	.word	0xe000e014
 8001878:	0001193f 	.word	0x0001193f

0800187c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]

    vTaskSuspendAll();
 8001888:	f7ff fa04 	bl	8000c94 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800188c:	4b4c      	ldr	r3, [pc, #304]	; (80019c0 <pvPortMalloc+0x144>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d101      	bne.n	8001898 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8001894:	f000 f8e0 	bl	8001a58 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001898:	4b4a      	ldr	r3, [pc, #296]	; (80019c4 <pvPortMalloc+0x148>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4013      	ands	r3, r2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f040 8086 	bne.w	80019b2 <pvPortMalloc+0x136>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d01e      	beq.n	80018ea <pvPortMalloc+0x6e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80018ac:	2208      	movs	r2, #8
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d218      	bcs.n	80018ea <pvPortMalloc+0x6e>
            {
                xWantedSize += xHeapStructSize;
 80018b8:	2208      	movs	r2, #8
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4413      	add	r3, r2
 80018be:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d011      	beq.n	80018ee <pvPortMalloc+0x72>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f023 0307 	bic.w	r3, r3, #7
 80018d0:	3308      	adds	r3, #8
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d205      	bcs.n	80018e4 <pvPortMalloc+0x68>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f023 0307 	bic.w	r3, r3, #7
 80018de:	3308      	adds	r3, #8
 80018e0:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80018e2:	e004      	b.n	80018ee <pvPortMalloc+0x72>
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
                    }
                    else
                    {
                        xWantedSize = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80018e8:	e001      	b.n	80018ee <pvPortMalloc+0x72>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	607b      	str	r3, [r7, #4]
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d05e      	beq.n	80019b2 <pvPortMalloc+0x136>
 80018f4:	4b34      	ldr	r3, [pc, #208]	; (80019c8 <pvPortMalloc+0x14c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d859      	bhi.n	80019b2 <pvPortMalloc+0x136>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80018fe:	4b33      	ldr	r3, [pc, #204]	; (80019cc <pvPortMalloc+0x150>)
 8001900:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 8001902:	4b32      	ldr	r3, [pc, #200]	; (80019cc <pvPortMalloc+0x150>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001908:	e004      	b.n	8001914 <pvPortMalloc+0x98>
                {
                    pxPreviousBlock = pxBlock;
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	429a      	cmp	r2, r3
 800191c:	d903      	bls.n	8001926 <pvPortMalloc+0xaa>
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f1      	bne.n	800190a <pvPortMalloc+0x8e>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8001926:	4b26      	ldr	r3, [pc, #152]	; (80019c0 <pvPortMalloc+0x144>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	697a      	ldr	r2, [r7, #20]
 800192c:	429a      	cmp	r2, r3
 800192e:	d040      	beq.n	80019b2 <pvPortMalloc+0x136>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2208      	movs	r2, #8
 8001936:	4413      	add	r3, r2
 8001938:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	1ad2      	subs	r2, r2, r3
 800194a:	2308      	movs	r3, #8
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	429a      	cmp	r2, r3
 8001950:	d90f      	bls.n	8001972 <pvPortMalloc+0xf6>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001952:	697a      	ldr	r2, [r7, #20]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4413      	add	r3, r2
 8001958:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	685a      	ldr	r2, [r3, #4]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	1ad2      	subs	r2, r2, r3
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800196c:	68b8      	ldr	r0, [r7, #8]
 800196e:	f000 f8d5 	bl	8001b1c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001972:	4b15      	ldr	r3, [pc, #84]	; (80019c8 <pvPortMalloc+0x14c>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	4a12      	ldr	r2, [pc, #72]	; (80019c8 <pvPortMalloc+0x14c>)
 800197e:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001980:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <pvPortMalloc+0x14c>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <pvPortMalloc+0x154>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	429a      	cmp	r2, r3
 800198a:	d203      	bcs.n	8001994 <pvPortMalloc+0x118>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800198c:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <pvPortMalloc+0x14c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a0f      	ldr	r2, [pc, #60]	; (80019d0 <pvPortMalloc+0x154>)
 8001992:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <pvPortMalloc+0x148>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	431a      	orrs	r2, r3
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80019a8:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <pvPortMalloc+0x158>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	3301      	adds	r3, #1
 80019ae:	4a09      	ldr	r2, [pc, #36]	; (80019d4 <pvPortMalloc+0x158>)
 80019b0:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80019b2:	f7ff f97d 	bl	8000cb0 <xTaskResumeAll>
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
 80019b6:	68fb      	ldr	r3, [r7, #12]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3718      	adds	r7, #24
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20001530 	.word	0x20001530
 80019c4:	20001544 	.word	0x20001544
 80019c8:	20001534 	.word	0x20001534
 80019cc:	20001528 	.word	0x20001528
 80019d0:	20001538 	.word	0x20001538
 80019d4:	2000153c 	.word	0x2000153c

080019d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d02c      	beq.n	8001a44 <vPortFree+0x6c>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80019ea:	2308      	movs	r3, #8
 80019ec:	425b      	negs	r3, r3
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	4413      	add	r3, r2
 80019f2:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	685a      	ldr	r2, [r3, #4]
 80019fc:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <vPortFree+0x74>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4013      	ands	r3, r2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d01e      	beq.n	8001a44 <vPortFree+0x6c>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d11a      	bne.n	8001a44 <vPortFree+0x6c>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	685a      	ldr	r2, [r3, #4]
 8001a12:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <vPortFree+0x74>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	43db      	mvns	r3, r3
 8001a18:	401a      	ands	r2, r3
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8001a1e:	f7ff f939 	bl	8000c94 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	685a      	ldr	r2, [r3, #4]
 8001a26:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <vPortFree+0x78>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	4a08      	ldr	r2, [pc, #32]	; (8001a50 <vPortFree+0x78>)
 8001a2e:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001a30:	68b8      	ldr	r0, [r7, #8]
 8001a32:	f000 f873 	bl	8001b1c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8001a36:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <vPortFree+0x7c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	4a05      	ldr	r2, [pc, #20]	; (8001a54 <vPortFree+0x7c>)
 8001a3e:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8001a40:	f7ff f936 	bl	8000cb0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8001a44:	bf00      	nop
 8001a46:	3710      	adds	r7, #16
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20001544 	.word	0x20001544
 8001a50:	20001534 	.word	0x20001534
 8001a54:	20001540 	.word	0x20001540

08001a58 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001a5e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a62:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8001a64:	4b27      	ldr	r3, [pc, #156]	; (8001b04 <prvHeapInit+0xac>)
 8001a66:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00c      	beq.n	8001a8c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	3307      	adds	r3, #7
 8001a76:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f023 0307 	bic.w	r3, r3, #7
 8001a7e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001a80:	68ba      	ldr	r2, [r7, #8]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	4a1f      	ldr	r2, [pc, #124]	; (8001b04 <prvHeapInit+0xac>)
 8001a88:	4413      	add	r3, r2
 8001a8a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001a90:	4a1d      	ldr	r2, [pc, #116]	; (8001b08 <prvHeapInit+0xb0>)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8001a96:	4b1c      	ldr	r3, [pc, #112]	; (8001b08 <prvHeapInit+0xb0>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8001aa4:	2208      	movs	r2, #8
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	1a9b      	subs	r3, r3, r2
 8001aaa:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f023 0307 	bic.w	r3, r3, #7
 8001ab2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	4a15      	ldr	r2, [pc, #84]	; (8001b0c <prvHeapInit+0xb4>)
 8001ab8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8001aba:	4b14      	ldr	r3, [pc, #80]	; (8001b0c <prvHeapInit+0xb4>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8001ac2:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <prvHeapInit+0xb4>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	1ad2      	subs	r2, r2, r3
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001ad8:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <prvHeapInit+0xb4>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	4a0a      	ldr	r2, [pc, #40]	; (8001b10 <prvHeapInit+0xb8>)
 8001ae6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	4a09      	ldr	r2, [pc, #36]	; (8001b14 <prvHeapInit+0xbc>)
 8001aee:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001af0:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <prvHeapInit+0xc0>)
 8001af2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001af6:	601a      	str	r2, [r3, #0]
}
 8001af8:	bf00      	nop
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	20000128 	.word	0x20000128
 8001b08:	20001528 	.word	0x20001528
 8001b0c:	20001530 	.word	0x20001530
 8001b10:	20001538 	.word	0x20001538
 8001b14:	20001534 	.word	0x20001534
 8001b18:	20001544 	.word	0x20001544

08001b1c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001b24:	4b27      	ldr	r3, [pc, #156]	; (8001bc4 <prvInsertBlockIntoFreeList+0xa8>)
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	e002      	b.n	8001b30 <prvInsertBlockIntoFreeList+0x14>
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d8f7      	bhi.n	8001b2a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	68ba      	ldr	r2, [r7, #8]
 8001b44:	4413      	add	r3, r2
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d108      	bne.n	8001b5e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	685a      	ldr	r2, [r3, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	441a      	add	r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	68ba      	ldr	r2, [r7, #8]
 8001b68:	441a      	add	r2, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d118      	bne.n	8001ba4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <prvInsertBlockIntoFreeList+0xac>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d00d      	beq.n	8001b9a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	441a      	add	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	e008      	b.n	8001bac <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001b9a:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <prvInsertBlockIntoFreeList+0xac>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	e003      	b.n	8001bac <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d002      	beq.n	8001bba <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001bba:	bf00      	nop
 8001bbc:	3714      	adds	r7, #20
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr
 8001bc4:	20001528 	.word	0x20001528
 8001bc8:	20001530 	.word	0x20001530

08001bcc <EXTI0_IRQHandler>:

/*==========================================================*/
/* ISR FUNCTIONS */
/*==========================================================*/
void EXTI0_IRQHandler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<0);
 8001bd0:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <EXTI0_IRQHandler+0x1c>)
 8001bd2:	695b      	ldr	r3, [r3, #20]
 8001bd4:	4a04      	ldr	r2, [pc, #16]	; (8001be8 <EXTI0_IRQHandler+0x1c>)
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[0]();
 8001bdc:	4b03      	ldr	r3, [pc, #12]	; (8001bec <EXTI0_IRQHandler+0x20>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4798      	blx	r3

}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40010400 	.word	0x40010400
 8001bec:	2000155c 	.word	0x2000155c

08001bf0 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<1);
 8001bf4:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <EXTI1_IRQHandler+0x1c>)
 8001bf6:	695b      	ldr	r3, [r3, #20]
 8001bf8:	4a04      	ldr	r2, [pc, #16]	; (8001c0c <EXTI1_IRQHandler+0x1c>)
 8001bfa:	f043 0302 	orr.w	r3, r3, #2
 8001bfe:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[1]();
 8001c00:	4b03      	ldr	r3, [pc, #12]	; (8001c10 <EXTI1_IRQHandler+0x20>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	4798      	blx	r3

}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40010400 	.word	0x40010400
 8001c10:	2000155c 	.word	0x2000155c

08001c14 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<2);
 8001c18:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <EXTI2_IRQHandler+0x1c>)
 8001c1a:	695b      	ldr	r3, [r3, #20]
 8001c1c:	4a04      	ldr	r2, [pc, #16]	; (8001c30 <EXTI2_IRQHandler+0x1c>)
 8001c1e:	f043 0304 	orr.w	r3, r3, #4
 8001c22:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[2]();
 8001c24:	4b03      	ldr	r3, [pc, #12]	; (8001c34 <EXTI2_IRQHandler+0x20>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	4798      	blx	r3
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40010400 	.word	0x40010400
 8001c34:	2000155c 	.word	0x2000155c

08001c38 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<3);
 8001c3c:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <EXTI3_IRQHandler+0x1c>)
 8001c3e:	695b      	ldr	r3, [r3, #20]
 8001c40:	4a04      	ldr	r2, [pc, #16]	; (8001c54 <EXTI3_IRQHandler+0x1c>)
 8001c42:	f043 0308 	orr.w	r3, r3, #8
 8001c46:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[3]();
 8001c48:	4b03      	ldr	r3, [pc, #12]	; (8001c58 <EXTI3_IRQHandler+0x20>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	4798      	blx	r3
}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40010400 	.word	0x40010400
 8001c58:	2000155c 	.word	0x2000155c

08001c5c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<4);
 8001c60:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <EXTI4_IRQHandler+0x1c>)
 8001c62:	695b      	ldr	r3, [r3, #20]
 8001c64:	4a04      	ldr	r2, [pc, #16]	; (8001c78 <EXTI4_IRQHandler+0x1c>)
 8001c66:	f043 0310 	orr.w	r3, r3, #16
 8001c6a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[4]();
 8001c6c:	4b03      	ldr	r3, [pc, #12]	; (8001c7c <EXTI4_IRQHandler+0x20>)
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	4798      	blx	r3
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40010400 	.word	0x40010400
 8001c7c:	2000155c 	.word	0x2000155c

08001c80 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	if(EXTI->PR & 1<<5) { EXTI->PR |=(1<<5) ; GP_IRQ_CALLBACK[5](); }
 8001c84:	4b26      	ldr	r3, [pc, #152]	; (8001d20 <EXTI9_5_IRQHandler+0xa0>)
 8001c86:	695b      	ldr	r3, [r3, #20]
 8001c88:	f003 0320 	and.w	r3, r3, #32
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d008      	beq.n	8001ca2 <EXTI9_5_IRQHandler+0x22>
 8001c90:	4b23      	ldr	r3, [pc, #140]	; (8001d20 <EXTI9_5_IRQHandler+0xa0>)
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	4a22      	ldr	r2, [pc, #136]	; (8001d20 <EXTI9_5_IRQHandler+0xa0>)
 8001c96:	f043 0320 	orr.w	r3, r3, #32
 8001c9a:	6153      	str	r3, [r2, #20]
 8001c9c:	4b21      	ldr	r3, [pc, #132]	; (8001d24 <EXTI9_5_IRQHandler+0xa4>)
 8001c9e:	695b      	ldr	r3, [r3, #20]
 8001ca0:	4798      	blx	r3
	if(EXTI->PR & 1<<6) { EXTI->PR |=(1<<6) ; GP_IRQ_CALLBACK[6](); }
 8001ca2:	4b1f      	ldr	r3, [pc, #124]	; (8001d20 <EXTI9_5_IRQHandler+0xa0>)
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d008      	beq.n	8001cc0 <EXTI9_5_IRQHandler+0x40>
 8001cae:	4b1c      	ldr	r3, [pc, #112]	; (8001d20 <EXTI9_5_IRQHandler+0xa0>)
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	4a1b      	ldr	r2, [pc, #108]	; (8001d20 <EXTI9_5_IRQHandler+0xa0>)
 8001cb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cb8:	6153      	str	r3, [r2, #20]
 8001cba:	4b1a      	ldr	r3, [pc, #104]	; (8001d24 <EXTI9_5_IRQHandler+0xa4>)
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	4798      	blx	r3
	if(EXTI->PR & 1<<7) { EXTI->PR |=(1<<7) ; GP_IRQ_CALLBACK[7](); }
 8001cc0:	4b17      	ldr	r3, [pc, #92]	; (8001d20 <EXTI9_5_IRQHandler+0xa0>)
 8001cc2:	695b      	ldr	r3, [r3, #20]
 8001cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d008      	beq.n	8001cde <EXTI9_5_IRQHandler+0x5e>
 8001ccc:	4b14      	ldr	r3, [pc, #80]	; (8001d20 <EXTI9_5_IRQHandler+0xa0>)
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	4a13      	ldr	r2, [pc, #76]	; (8001d20 <EXTI9_5_IRQHandler+0xa0>)
 8001cd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cd6:	6153      	str	r3, [r2, #20]
 8001cd8:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <EXTI9_5_IRQHandler+0xa4>)
 8001cda:	69db      	ldr	r3, [r3, #28]
 8001cdc:	4798      	blx	r3
	if(EXTI->PR & 1<<8) { EXTI->PR |=(1<<8) ; GP_IRQ_CALLBACK[8](); }
 8001cde:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <EXTI9_5_IRQHandler+0xa0>)
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d008      	beq.n	8001cfc <EXTI9_5_IRQHandler+0x7c>
 8001cea:	4b0d      	ldr	r3, [pc, #52]	; (8001d20 <EXTI9_5_IRQHandler+0xa0>)
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	4a0c      	ldr	r2, [pc, #48]	; (8001d20 <EXTI9_5_IRQHandler+0xa0>)
 8001cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf4:	6153      	str	r3, [r2, #20]
 8001cf6:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <EXTI9_5_IRQHandler+0xa4>)
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	4798      	blx	r3
	if(EXTI->PR & 1<<9) { EXTI->PR |=(1<<9) ; GP_IRQ_CALLBACK[9](); }
 8001cfc:	4b08      	ldr	r3, [pc, #32]	; (8001d20 <EXTI9_5_IRQHandler+0xa0>)
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d008      	beq.n	8001d1a <EXTI9_5_IRQHandler+0x9a>
 8001d08:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <EXTI9_5_IRQHandler+0xa0>)
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	4a04      	ldr	r2, [pc, #16]	; (8001d20 <EXTI9_5_IRQHandler+0xa0>)
 8001d0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d12:	6153      	str	r3, [r2, #20]
 8001d14:	4b03      	ldr	r3, [pc, #12]	; (8001d24 <EXTI9_5_IRQHandler+0xa4>)
 8001d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d18:	4798      	blx	r3

}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40010400 	.word	0x40010400
 8001d24:	2000155c 	.word	0x2000155c

08001d28 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<0);
 8001d2c:	4b04      	ldr	r3, [pc, #16]	; (8001d40 <EXTI15_10_IRQHandler+0x18>)
 8001d2e:	695b      	ldr	r3, [r3, #20]
 8001d30:	4a03      	ldr	r2, [pc, #12]	; (8001d40 <EXTI15_10_IRQHandler+0x18>)
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	6153      	str	r3, [r2, #20]

}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr
 8001d40:	40010400 	.word	0x40010400

08001d44 <MCAL_UART_INIT>:
 * note -                   -none
 *
 */
/**================================================================= */
void MCAL_UART_INIT(USART_TypeDef* USARTx,USART_Config * UART_Config)
{
 8001d44:	b5b0      	push	{r4, r5, r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]

	uint32_t pclk ,BRR;


	//Enable Clock For Given USART Peripheral
	if(USARTx == USART1)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a68      	ldr	r2, [pc, #416]	; (8001ef4 <MCAL_UART_INIT+0x1b0>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d10e      	bne.n	8001d74 <MCAL_UART_INIT+0x30>
	{
		RCC_USART1_CLOCK_EN();
 8001d56:	4b68      	ldr	r3, [pc, #416]	; (8001ef8 <MCAL_UART_INIT+0x1b4>)
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	4a67      	ldr	r2, [pc, #412]	; (8001ef8 <MCAL_UART_INIT+0x1b4>)
 8001d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d60:	6193      	str	r3, [r2, #24]
		Global_UART_Config[0] = *UART_Config;
 8001d62:	4a66      	ldr	r2, [pc, #408]	; (8001efc <MCAL_UART_INIT+0x1b8>)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	4614      	mov	r4, r2
 8001d68:	461d      	mov	r5, r3
 8001d6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d6e:	682b      	ldr	r3, [r5, #0]
 8001d70:	6023      	str	r3, [r4, #0]
 8001d72:	e026      	b.n	8001dc2 <MCAL_UART_INIT+0x7e>
	}
	else if(USARTx == USART2)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a62      	ldr	r2, [pc, #392]	; (8001f00 <MCAL_UART_INIT+0x1bc>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d10f      	bne.n	8001d9c <MCAL_UART_INIT+0x58>
	{
		RCC_USART2_CLOCK_EN();
 8001d7c:	4b5e      	ldr	r3, [pc, #376]	; (8001ef8 <MCAL_UART_INIT+0x1b4>)
 8001d7e:	69db      	ldr	r3, [r3, #28]
 8001d80:	4a5d      	ldr	r2, [pc, #372]	; (8001ef8 <MCAL_UART_INIT+0x1b4>)
 8001d82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d86:	61d3      	str	r3, [r2, #28]
		Global_UART_Config[1] = *UART_Config;
 8001d88:	4b5c      	ldr	r3, [pc, #368]	; (8001efc <MCAL_UART_INIT+0x1b8>)
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	f103 0414 	add.w	r4, r3, #20
 8001d90:	4615      	mov	r5, r2
 8001d92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d96:	682b      	ldr	r3, [r5, #0]
 8001d98:	6023      	str	r3, [r4, #0]
 8001d9a:	e012      	b.n	8001dc2 <MCAL_UART_INIT+0x7e>
	}
	else if(USARTx == USART3)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a59      	ldr	r2, [pc, #356]	; (8001f04 <MCAL_UART_INIT+0x1c0>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d10e      	bne.n	8001dc2 <MCAL_UART_INIT+0x7e>
	{
		RCC_USART3_CLOCK_EN();
 8001da4:	4b54      	ldr	r3, [pc, #336]	; (8001ef8 <MCAL_UART_INIT+0x1b4>)
 8001da6:	69db      	ldr	r3, [r3, #28]
 8001da8:	4a53      	ldr	r2, [pc, #332]	; (8001ef8 <MCAL_UART_INIT+0x1b4>)
 8001daa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dae:	61d3      	str	r3, [r2, #28]
		Global_UART_Config[2] = *UART_Config;
 8001db0:	4b52      	ldr	r3, [pc, #328]	; (8001efc <MCAL_UART_INIT+0x1b8>)
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8001db8:	4615      	mov	r5, r2
 8001dba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dbe:	682b      	ldr	r3, [r5, #0]
 8001dc0:	6023      	str	r3, [r4, #0]
	}

	//Enable UART Module Bit 13 UE: USART enable
	USARTx->CR1 |=(1<<13);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	60da      	str	r2, [r3, #12]

	//Enable TX RX according to the USART_MODE configuration item
	USARTx->CR1 |= UART_Config->USART_MODE;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	7812      	ldrb	r2, [r2, #0]
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	60da      	str	r2, [r3, #12]

	//PayLoad Length
	USARTx->CR1 |=UART_Config->PayLoad_Length;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	7a12      	ldrb	r2, [r2, #8]
 8001de4:	431a      	orrs	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	60da      	str	r2, [r3, #12]

	//Baud Rate
	USARTx->CR1 |=UART_Config->BaudRate;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68da      	ldr	r2, [r3, #12]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	431a      	orrs	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	60da      	str	r2, [r3, #12]

	//Parity
	USARTx->CR1 |=UART_Config->Parity;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	7a52      	ldrb	r2, [r2, #9]
 8001e00:	431a      	orrs	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	60da      	str	r2, [r3, #12]

	//StopBits
	USARTx->CR1 |=UART_Config->StopBits;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	683a      	ldr	r2, [r7, #0]
 8001e0c:	7a92      	ldrb	r2, [r2, #10]
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	60da      	str	r2, [r3, #12]

	//HW_FlowCtrl
	USARTx->CR1 |=UART_Config->HW_FlowCtrl;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	7ad2      	ldrb	r2, [r2, #11]
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	60da      	str	r2, [r3, #12]

	//IRQ_Enable
	USARTx->CR1 |=UART_Config->IRQ_Enable;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	7b12      	ldrb	r2, [r2, #12]
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	60da      	str	r2, [r3, #12]

	/*Configuration of BRR(BaudRate Register)*/
	//PCLK1 for USART2,3
	//PCLK2 for USART1
	if(USARTx == USART1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a30      	ldr	r2, [pc, #192]	; (8001ef4 <MCAL_UART_INIT+0x1b0>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d103      	bne.n	8001e40 <MCAL_UART_INIT+0xfc>
	{
		pclk=MCAL_RCC_Get_PCLK2_Freq();
 8001e38:	f000 faee 	bl	8002418 <MCAL_RCC_Get_PCLK2_Freq>
 8001e3c:	60f8      	str	r0, [r7, #12]
 8001e3e:	e002      	b.n	8001e46 <MCAL_UART_INIT+0x102>
	}
	else
	{
		pclk=MCAL_RCC_Get_PCLK1_Freq();
 8001e40:	f000 fad6 	bl	80023f0 <MCAL_RCC_Get_PCLK1_Freq>
 8001e44:	60f8      	str	r0, [r7, #12]
	}

	BRR = USART_BRR_REGISTER(pclk,UART_Config->BaudRate);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	011b      	lsls	r3, r3, #4
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e52:	0119      	lsls	r1, r3, #4
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	4613      	mov	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	009a      	lsls	r2, r3, #2
 8001e5e:	441a      	add	r2, r3
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	011b      	lsls	r3, r3, #4
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e76:	2064      	movs	r0, #100	; 0x64
 8001e78:	fb00 f303 	mul.w	r3, r0, r3
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	011b      	lsls	r3, r3, #4
 8001e80:	4a21      	ldr	r2, [pc, #132]	; (8001f08 <MCAL_UART_INIT+0x1c4>)
 8001e82:	fba2 2303 	umull	r2, r3, r2, r3
 8001e86:	095b      	lsrs	r3, r3, #5
 8001e88:	f003 030f 	and.w	r3, r3, #15
 8001e8c:	430b      	orrs	r3, r1
 8001e8e:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	609a      	str	r2, [r3, #8]

	/*Enable/Disable interrupt*/
	//USART_CR1
	if( UART_Config->IRQ_Enable != USART_IRQ_Enable_NONE ) //this mean user enable interrupt
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	7b1b      	ldrb	r3, [r3, #12]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d026      	beq.n	8001eec <MCAL_UART_INIT+0x1a8>
	{
		USARTx->CR1 |= UART_Config->IRQ_Enable;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	7b12      	ldrb	r2, [r2, #12]
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	60da      	str	r2, [r3, #12]

		//Enable interrupt for NVIC for USARTx IRQ
		if(USARTx == USART1)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a11      	ldr	r2, [pc, #68]	; (8001ef4 <MCAL_UART_INIT+0x1b0>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d106      	bne.n	8001ec2 <MCAL_UART_INIT+0x17e>
		{
			NVIC_IRQ37_USART1_ENABLE();
 8001eb4:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <MCAL_UART_INIT+0x1c8>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a14      	ldr	r2, [pc, #80]	; (8001f0c <MCAL_UART_INIT+0x1c8>)
 8001eba:	f043 0320 	orr.w	r3, r3, #32
 8001ebe:	6013      	str	r3, [r2, #0]
			NVIC_IRQ39_USART3_ENABLE();
		}

	}

}
 8001ec0:	e014      	b.n	8001eec <MCAL_UART_INIT+0x1a8>
		else if(USARTx == USART2)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a0e      	ldr	r2, [pc, #56]	; (8001f00 <MCAL_UART_INIT+0x1bc>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d106      	bne.n	8001ed8 <MCAL_UART_INIT+0x194>
			NVIC_IRQ38_USART2_ENABLE();
 8001eca:	4b10      	ldr	r3, [pc, #64]	; (8001f0c <MCAL_UART_INIT+0x1c8>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a0f      	ldr	r2, [pc, #60]	; (8001f0c <MCAL_UART_INIT+0x1c8>)
 8001ed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ed4:	6013      	str	r3, [r2, #0]
}
 8001ed6:	e009      	b.n	8001eec <MCAL_UART_INIT+0x1a8>
		else if(USARTx == USART3)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a0a      	ldr	r2, [pc, #40]	; (8001f04 <MCAL_UART_INIT+0x1c0>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d105      	bne.n	8001eec <MCAL_UART_INIT+0x1a8>
			NVIC_IRQ39_USART3_ENABLE();
 8001ee0:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <MCAL_UART_INIT+0x1c8>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a09      	ldr	r2, [pc, #36]	; (8001f0c <MCAL_UART_INIT+0x1c8>)
 8001ee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eea:	6013      	str	r3, [r2, #0]
}
 8001eec:	bf00      	nop
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ef4:	40013800 	.word	0x40013800
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	20001598 	.word	0x20001598
 8001f00:	40004400 	.word	0x40004400
 8001f04:	40004800 	.word	0x40004800
 8001f08:	51eb851f 	.word	0x51eb851f
 8001f0c:	e000e104 	.word	0xe000e104

08001f10 <Which_UART>:
}

/*
 * This functions is used by uart driver to get the index of the global array for the used instance
 * */
static uint8_t Which_UART(USART_TypeDef* USARTx){
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
	if(USARTx == USART1)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a0b      	ldr	r2, [pc, #44]	; (8001f48 <Which_UART+0x38>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d101      	bne.n	8001f24 <Which_UART+0x14>
	{
		return 0;
 8001f20:	2300      	movs	r3, #0
 8001f22:	e00c      	b.n	8001f3e <Which_UART+0x2e>
	}
	else if(USARTx == USART2)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a09      	ldr	r2, [pc, #36]	; (8001f4c <Which_UART+0x3c>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d101      	bne.n	8001f30 <Which_UART+0x20>
	{
		return 1;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e006      	b.n	8001f3e <Which_UART+0x2e>
	}
	else if(USARTx == USART3)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a07      	ldr	r2, [pc, #28]	; (8001f50 <Which_UART+0x40>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d101      	bne.n	8001f3c <Which_UART+0x2c>
	{
		return 3;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e000      	b.n	8001f3e <Which_UART+0x2e>
	}
	return 4;		//will cause error for user when he uses wrong address for USARTx
 8001f3c:	2304      	movs	r3, #4
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bc80      	pop	{r7}
 8001f46:	4770      	bx	lr
 8001f48:	40013800 	.word	0x40013800
 8001f4c:	40004400 	.word	0x40004400
 8001f50:	40004800 	.word	0x40004800

08001f54 <MCAL_UART_SEND_DATA>:
void MCAL_UART_SEND_DATA(USART_TypeDef* USARTx,uint16_t* pTXBuffer,enum PoLLing_Mechnism PollengEn)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	71fb      	strb	r3, [r7, #7]

	//Wait until TXE flag is set in SR
	if(PollengEn == enable)
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d106      	bne.n	8001f76 <MCAL_UART_SEND_DATA+0x22>
	{
		while(! (USARTx->SR & (1<<7)) );
 8001f68:	bf00      	nop
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0f9      	beq.n	8001f6a <MCAL_UART_SEND_DATA+0x16>
	}

	uint8_t Gindex=Which_UART(USARTx);
 8001f76:	68f8      	ldr	r0, [r7, #12]
 8001f78:	f7ff ffca 	bl	8001f10 <Which_UART>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	75fb      	strb	r3, [r7, #23]
		USARTx->DR = (*pTXBuffer & (uint16_t)0x01FF);
	}
	else
	{
		//If 8Bit
		USARTx->DR = (*pTXBuffer & (uint8_t)0xFF);
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	881b      	ldrh	r3, [r3, #0]
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	605a      	str	r2, [r3, #4]
	}



}
 8001f8a:	bf00      	nop
 8001f8c:	3718      	adds	r7, #24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
	...

08001f94 <MCAL_UART_GPIO_Set_Pins>:


}

void MCAL_UART_GPIO_Set_Pins(USART_TypeDef* USARTx)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
	GPIO_Pin_Configure_t PinCfg;
	if( USARTx == USART1 )
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a67      	ldr	r2, [pc, #412]	; (800213c <MCAL_UART_GPIO_Set_Pins+0x1a8>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d13f      	bne.n	8002024 <MCAL_UART_GPIO_Set_Pins+0x90>
		 * PA11 ->CTS
		 * PA12 ->RTS
		 */

		//TX
		PinCfg.GPIO_Pin_Number=GPIO_PIN_9;
 8001fa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fa8:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_AF_PP;
 8001faa:	2306      	movs	r3, #6
 8001fac:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED=GPIO_SPEED_10M;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8001fb2:	f107 030c 	add.w	r3, r7, #12
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4861      	ldr	r0, [pc, #388]	; (8002140 <MCAL_UART_GPIO_Set_Pins+0x1ac>)
 8001fba:	f000 f94c 	bl	8002256 <MCAL_GPIO_Init>

		//RX
		PinCfg.GPIO_Pin_Number=GPIO_PIN_10;
 8001fbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fc2:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE=GPIO_MODE_AF_INPUT;
 8001fc4:	2308      	movs	r3, #8
 8001fc6:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8001fc8:	f107 030c 	add.w	r3, r7, #12
 8001fcc:	4619      	mov	r1, r3
 8001fce:	485c      	ldr	r0, [pc, #368]	; (8002140 <MCAL_UART_GPIO_Set_Pins+0x1ac>)
 8001fd0:	f000 f941 	bl	8002256 <MCAL_GPIO_Init>

		if (Global_UART_Config[0].HW_FlowCtrl == USART_HW_FlowCtrl_CTS 				||
 8001fd4:	4b5b      	ldr	r3, [pc, #364]	; (8002144 <MCAL_UART_GPIO_Set_Pins+0x1b0>)
 8001fd6:	7adb      	ldrb	r3, [r3, #11]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d003      	beq.n	8001fe4 <MCAL_UART_GPIO_Set_Pins+0x50>
				Global_UART_Config[0].HW_FlowCtrl == USART_HW_FlowCtrl_CTS_AND_RTS 		)
 8001fdc:	4b59      	ldr	r3, [pc, #356]	; (8002144 <MCAL_UART_GPIO_Set_Pins+0x1b0>)
 8001fde:	7adb      	ldrb	r3, [r3, #11]
		if (Global_UART_Config[0].HW_FlowCtrl == USART_HW_FlowCtrl_CTS 				||
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d10a      	bne.n	8001ffa <MCAL_UART_GPIO_Set_Pins+0x66>
		{
			PinCfg.GPIO_Pin_Number=GPIO_PIN_11;
 8001fe4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fe8:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE=GPIO_MODE_INPUT_FLO;
 8001fea:	2301      	movs	r3, #1
 8001fec:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8001fee:	f107 030c 	add.w	r3, r7, #12
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4852      	ldr	r0, [pc, #328]	; (8002140 <MCAL_UART_GPIO_Set_Pins+0x1ac>)
 8001ff6:	f000 f92e 	bl	8002256 <MCAL_GPIO_Init>
		}

		if (Global_UART_Config[0].HW_FlowCtrl == USART_HW_FlowCtrl_RTS 				||
 8001ffa:	4b52      	ldr	r3, [pc, #328]	; (8002144 <MCAL_UART_GPIO_Set_Pins+0x1b0>)
 8001ffc:	7adb      	ldrb	r3, [r3, #11]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <MCAL_UART_GPIO_Set_Pins+0x76>
				Global_UART_Config[0].HW_FlowCtrl == USART_HW_FlowCtrl_CTS_AND_RTS 		)
 8002002:	4b50      	ldr	r3, [pc, #320]	; (8002144 <MCAL_UART_GPIO_Set_Pins+0x1b0>)
 8002004:	7adb      	ldrb	r3, [r3, #11]
		if (Global_UART_Config[0].HW_FlowCtrl == USART_HW_FlowCtrl_RTS 				||
 8002006:	2b00      	cmp	r3, #0
 8002008:	d10c      	bne.n	8002024 <MCAL_UART_GPIO_Set_Pins+0x90>
		{
			PinCfg.GPIO_Pin_Number=GPIO_PIN_12;
 800200a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800200e:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_AF_PP;
 8002010:	2306      	movs	r3, #6
 8002012:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_OUTPUT_SPEED=GPIO_SPEED_10M;
 8002014:	2301      	movs	r3, #1
 8002016:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8002018:	f107 030c 	add.w	r3, r7, #12
 800201c:	4619      	mov	r1, r3
 800201e:	4848      	ldr	r0, [pc, #288]	; (8002140 <MCAL_UART_GPIO_Set_Pins+0x1ac>)
 8002020:	f000 f919 	bl	8002256 <MCAL_GPIO_Init>
		}

	}
	if( USARTx == USART2 )
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a48      	ldr	r2, [pc, #288]	; (8002148 <MCAL_UART_GPIO_Set_Pins+0x1b4>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d13b      	bne.n	80020a4 <MCAL_UART_GPIO_Set_Pins+0x110>
		 * PA0 ->CTS
		 * PA1 ->RTS
		 */

		//TX
		PinCfg.GPIO_Pin_Number=GPIO_PIN_2;
 800202c:	2304      	movs	r3, #4
 800202e:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_AF_PP;
 8002030:	2306      	movs	r3, #6
 8002032:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED=GPIO_SPEED_10M;
 8002034:	2301      	movs	r3, #1
 8002036:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8002038:	f107 030c 	add.w	r3, r7, #12
 800203c:	4619      	mov	r1, r3
 800203e:	4840      	ldr	r0, [pc, #256]	; (8002140 <MCAL_UART_GPIO_Set_Pins+0x1ac>)
 8002040:	f000 f909 	bl	8002256 <MCAL_GPIO_Init>

		//RX
		PinCfg.GPIO_Pin_Number=GPIO_PIN_3;
 8002044:	2308      	movs	r3, #8
 8002046:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE=GPIO_MODE_AF_INPUT;
 8002048:	2308      	movs	r3, #8
 800204a:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 800204c:	f107 030c 	add.w	r3, r7, #12
 8002050:	4619      	mov	r1, r3
 8002052:	483b      	ldr	r0, [pc, #236]	; (8002140 <MCAL_UART_GPIO_Set_Pins+0x1ac>)
 8002054:	f000 f8ff 	bl	8002256 <MCAL_GPIO_Init>

		if (Global_UART_Config[1].HW_FlowCtrl == USART_HW_FlowCtrl_CTS 					||
 8002058:	4b3a      	ldr	r3, [pc, #232]	; (8002144 <MCAL_UART_GPIO_Set_Pins+0x1b0>)
 800205a:	7fdb      	ldrb	r3, [r3, #31]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d003      	beq.n	8002068 <MCAL_UART_GPIO_Set_Pins+0xd4>
				Global_UART_Config[1].HW_FlowCtrl == USART_HW_FlowCtrl_CTS_AND_RTS 			)
 8002060:	4b38      	ldr	r3, [pc, #224]	; (8002144 <MCAL_UART_GPIO_Set_Pins+0x1b0>)
 8002062:	7fdb      	ldrb	r3, [r3, #31]
		if (Global_UART_Config[1].HW_FlowCtrl == USART_HW_FlowCtrl_CTS 					||
 8002064:	2b00      	cmp	r3, #0
 8002066:	d109      	bne.n	800207c <MCAL_UART_GPIO_Set_Pins+0xe8>
		{
			PinCfg.GPIO_Pin_Number=GPIO_PIN_0;
 8002068:	2301      	movs	r3, #1
 800206a:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE=GPIO_MODE_INPUT_FLO;
 800206c:	2301      	movs	r3, #1
 800206e:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8002070:	f107 030c 	add.w	r3, r7, #12
 8002074:	4619      	mov	r1, r3
 8002076:	4832      	ldr	r0, [pc, #200]	; (8002140 <MCAL_UART_GPIO_Set_Pins+0x1ac>)
 8002078:	f000 f8ed 	bl	8002256 <MCAL_GPIO_Init>
		}

		if (Global_UART_Config[1].HW_FlowCtrl == USART_HW_FlowCtrl_RTS 					||
 800207c:	4b31      	ldr	r3, [pc, #196]	; (8002144 <MCAL_UART_GPIO_Set_Pins+0x1b0>)
 800207e:	7fdb      	ldrb	r3, [r3, #31]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d003      	beq.n	800208c <MCAL_UART_GPIO_Set_Pins+0xf8>
				Global_UART_Config[1].HW_FlowCtrl == USART_HW_FlowCtrl_CTS_AND_RTS 		)
 8002084:	4b2f      	ldr	r3, [pc, #188]	; (8002144 <MCAL_UART_GPIO_Set_Pins+0x1b0>)
 8002086:	7fdb      	ldrb	r3, [r3, #31]
		if (Global_UART_Config[1].HW_FlowCtrl == USART_HW_FlowCtrl_RTS 					||
 8002088:	2b00      	cmp	r3, #0
 800208a:	d10b      	bne.n	80020a4 <MCAL_UART_GPIO_Set_Pins+0x110>
		{
			PinCfg.GPIO_Pin_Number=GPIO_PIN_1;
 800208c:	2302      	movs	r3, #2
 800208e:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_AF_PP;
 8002090:	2306      	movs	r3, #6
 8002092:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_OUTPUT_SPEED=GPIO_SPEED_10M;
 8002094:	2301      	movs	r3, #1
 8002096:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8002098:	f107 030c 	add.w	r3, r7, #12
 800209c:	4619      	mov	r1, r3
 800209e:	4828      	ldr	r0, [pc, #160]	; (8002140 <MCAL_UART_GPIO_Set_Pins+0x1ac>)
 80020a0:	f000 f8d9 	bl	8002256 <MCAL_GPIO_Init>
		}

	}
	if( USARTx == USART3 )
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a29      	ldr	r2, [pc, #164]	; (800214c <MCAL_UART_GPIO_Set_Pins+0x1b8>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d143      	bne.n	8002134 <MCAL_UART_GPIO_Set_Pins+0x1a0>
		 * PB13 ->CTS
		 * PB14 ->RTS
		 */

		//TX
		PinCfg.GPIO_Pin_Number=GPIO_PIN_10;
 80020ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020b0:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_AF_PP;
 80020b2:	2306      	movs	r3, #6
 80020b4:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED=GPIO_SPEED_10M;
 80020b6:	2301      	movs	r3, #1
 80020b8:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 80020ba:	f107 030c 	add.w	r3, r7, #12
 80020be:	4619      	mov	r1, r3
 80020c0:	4823      	ldr	r0, [pc, #140]	; (8002150 <MCAL_UART_GPIO_Set_Pins+0x1bc>)
 80020c2:	f000 f8c8 	bl	8002256 <MCAL_GPIO_Init>

		//RX
		PinCfg.GPIO_Pin_Number=GPIO_PIN_11;
 80020c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020ca:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE=GPIO_MODE_AF_INPUT;
 80020cc:	2308      	movs	r3, #8
 80020ce:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 80020d0:	f107 030c 	add.w	r3, r7, #12
 80020d4:	4619      	mov	r1, r3
 80020d6:	481e      	ldr	r0, [pc, #120]	; (8002150 <MCAL_UART_GPIO_Set_Pins+0x1bc>)
 80020d8:	f000 f8bd 	bl	8002256 <MCAL_GPIO_Init>


		if (Global_UART_Config[2].HW_FlowCtrl == USART_HW_FlowCtrl_CTS 					||
 80020dc:	4b19      	ldr	r3, [pc, #100]	; (8002144 <MCAL_UART_GPIO_Set_Pins+0x1b0>)
 80020de:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d004      	beq.n	80020f0 <MCAL_UART_GPIO_Set_Pins+0x15c>
				Global_UART_Config[2].HW_FlowCtrl == USART_HW_FlowCtrl_CTS_AND_RTS 		)
 80020e6:	4b17      	ldr	r3, [pc, #92]	; (8002144 <MCAL_UART_GPIO_Set_Pins+0x1b0>)
 80020e8:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
		if (Global_UART_Config[2].HW_FlowCtrl == USART_HW_FlowCtrl_CTS 					||
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d10a      	bne.n	8002106 <MCAL_UART_GPIO_Set_Pins+0x172>
		{
			PinCfg.GPIO_Pin_Number=GPIO_PIN_13;
 80020f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020f4:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE =GPIO_MODE_INPUT_FLO;
 80020f6:	2301      	movs	r3, #1
 80020f8:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 80020fa:	f107 030c 	add.w	r3, r7, #12
 80020fe:	4619      	mov	r1, r3
 8002100:	4813      	ldr	r0, [pc, #76]	; (8002150 <MCAL_UART_GPIO_Set_Pins+0x1bc>)
 8002102:	f000 f8a8 	bl	8002256 <MCAL_GPIO_Init>
		}

		if (Global_UART_Config[2].HW_FlowCtrl == USART_HW_FlowCtrl_RTS 					||
 8002106:	4b0f      	ldr	r3, [pc, #60]	; (8002144 <MCAL_UART_GPIO_Set_Pins+0x1b0>)
 8002108:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800210c:	2b00      	cmp	r3, #0
 800210e:	d004      	beq.n	800211a <MCAL_UART_GPIO_Set_Pins+0x186>
				Global_UART_Config[2].HW_FlowCtrl == USART_HW_FlowCtrl_CTS_AND_RTS 			)
 8002110:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <MCAL_UART_GPIO_Set_Pins+0x1b0>)
 8002112:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
		if (Global_UART_Config[2].HW_FlowCtrl == USART_HW_FlowCtrl_RTS 					||
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10c      	bne.n	8002134 <MCAL_UART_GPIO_Set_Pins+0x1a0>
		{
			PinCfg.GPIO_Pin_Number=GPIO_PIN_14;
 800211a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800211e:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_AF_PP;
 8002120:	2306      	movs	r3, #6
 8002122:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_OUTPUT_SPEED=GPIO_SPEED_10M;
 8002124:	2301      	movs	r3, #1
 8002126:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 8002128:	f107 030c 	add.w	r3, r7, #12
 800212c:	4619      	mov	r1, r3
 800212e:	4808      	ldr	r0, [pc, #32]	; (8002150 <MCAL_UART_GPIO_Set_Pins+0x1bc>)
 8002130:	f000 f891 	bl	8002256 <MCAL_GPIO_Init>
		}

	}
}
 8002134:	bf00      	nop
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40013800 	.word	0x40013800
 8002140:	40010800 	.word	0x40010800
 8002144:	20001598 	.word	0x20001598
 8002148:	40004400 	.word	0x40004400
 800214c:	40004800 	.word	0x40004800
 8002150:	40010c00 	.word	0x40010c00

08002154 <USART1_IRQHandler>:



//ISR
void USART1_IRQHandler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
	Global_UART_Config[0].P_IRQ_Call_Back ();
 8002158:	4b02      	ldr	r3, [pc, #8]	; (8002164 <USART1_IRQHandler+0x10>)
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	4798      	blx	r3

}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20001598 	.word	0x20001598

08002168 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
	Global_UART_Config[1].P_IRQ_Call_Back ();
 800216c:	4b02      	ldr	r3, [pc, #8]	; (8002178 <USART2_IRQHandler+0x10>)
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	4798      	blx	r3

}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20001598 	.word	0x20001598

0800217c <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
	Global_UART_Config[2].P_IRQ_Call_Back ();
 8002180:	4b02      	ldr	r3, [pc, #8]	; (800218c <USART3_IRQHandler+0x10>)
 8002182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002184:	4798      	blx	r3

}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20001598 	.word	0x20001598

08002190 <Get_CRLH_Postion>:

#include "STM32F103C6_GPIO_DRIVERS.h"


uint8_t Get_CRLH_Postion(uint16_t PinNumber)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 800219a:	88fb      	ldrh	r3, [r7, #6]
 800219c:	2b80      	cmp	r3, #128	; 0x80
 800219e:	d042      	beq.n	8002226 <Get_CRLH_Postion+0x96>
 80021a0:	2b80      	cmp	r3, #128	; 0x80
 80021a2:	dc11      	bgt.n	80021c8 <Get_CRLH_Postion+0x38>
 80021a4:	2b08      	cmp	r3, #8
 80021a6:	d036      	beq.n	8002216 <Get_CRLH_Postion+0x86>
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	dc06      	bgt.n	80021ba <Get_CRLH_Postion+0x2a>
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d02e      	beq.n	800220e <Get_CRLH_Postion+0x7e>
 80021b0:	2b04      	cmp	r3, #4
 80021b2:	d02e      	beq.n	8002212 <Get_CRLH_Postion+0x82>
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d028      	beq.n	800220a <Get_CRLH_Postion+0x7a>
 80021b8:	e047      	b.n	800224a <Get_CRLH_Postion+0xba>
 80021ba:	2b20      	cmp	r3, #32
 80021bc:	d02f      	beq.n	800221e <Get_CRLH_Postion+0x8e>
 80021be:	2b40      	cmp	r3, #64	; 0x40
 80021c0:	d02f      	beq.n	8002222 <Get_CRLH_Postion+0x92>
 80021c2:	2b10      	cmp	r3, #16
 80021c4:	d029      	beq.n	800221a <Get_CRLH_Postion+0x8a>
 80021c6:	e040      	b.n	800224a <Get_CRLH_Postion+0xba>
 80021c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021cc:	d033      	beq.n	8002236 <Get_CRLH_Postion+0xa6>
 80021ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021d2:	dc09      	bgt.n	80021e8 <Get_CRLH_Postion+0x58>
 80021d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021d8:	d029      	beq.n	800222e <Get_CRLH_Postion+0x9e>
 80021da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021de:	d028      	beq.n	8002232 <Get_CRLH_Postion+0xa2>
 80021e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021e4:	d021      	beq.n	800222a <Get_CRLH_Postion+0x9a>
 80021e6:	e030      	b.n	800224a <Get_CRLH_Postion+0xba>
 80021e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021ec:	d027      	beq.n	800223e <Get_CRLH_Postion+0xae>
 80021ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021f2:	dc03      	bgt.n	80021fc <Get_CRLH_Postion+0x6c>
 80021f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021f8:	d01f      	beq.n	800223a <Get_CRLH_Postion+0xaa>
 80021fa:	e026      	b.n	800224a <Get_CRLH_Postion+0xba>
 80021fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002200:	d01f      	beq.n	8002242 <Get_CRLH_Postion+0xb2>
 8002202:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002206:	d01e      	beq.n	8002246 <Get_CRLH_Postion+0xb6>
 8002208:	e01f      	b.n	800224a <Get_CRLH_Postion+0xba>
	{
	case GPIO_PIN_0:
		return 0;
 800220a:	2300      	movs	r3, #0
 800220c:	e01e      	b.n	800224c <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_1:
		return 4;
 800220e:	2304      	movs	r3, #4
 8002210:	e01c      	b.n	800224c <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_2:
		return 8;
 8002212:	2308      	movs	r3, #8
 8002214:	e01a      	b.n	800224c <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_3:
		return 12;
 8002216:	230c      	movs	r3, #12
 8002218:	e018      	b.n	800224c <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_4:
		return 16;
 800221a:	2310      	movs	r3, #16
 800221c:	e016      	b.n	800224c <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_5:
		return 20;
 800221e:	2314      	movs	r3, #20
 8002220:	e014      	b.n	800224c <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_6:
		return 24;
 8002222:	2318      	movs	r3, #24
 8002224:	e012      	b.n	800224c <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_7:
		return 28;
 8002226:	231c      	movs	r3, #28
 8002228:	e010      	b.n	800224c <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_8:
		return 0;
 800222a:	2300      	movs	r3, #0
 800222c:	e00e      	b.n	800224c <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_9:
		return 4;
 800222e:	2304      	movs	r3, #4
 8002230:	e00c      	b.n	800224c <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_10:
		return 8;
 8002232:	2308      	movs	r3, #8
 8002234:	e00a      	b.n	800224c <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_11:
		return 12;
 8002236:	230c      	movs	r3, #12
 8002238:	e008      	b.n	800224c <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_12:
		return 16;
 800223a:	2310      	movs	r3, #16
 800223c:	e006      	b.n	800224c <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_13:
		return 20;
 800223e:	2314      	movs	r3, #20
 8002240:	e004      	b.n	800224c <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_14:
		return 24;
 8002242:	2318      	movs	r3, #24
 8002244:	e002      	b.n	800224c <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_15:
		return 28;
 8002246:	231c      	movs	r3, #28
 8002248:	e000      	b.n	800224c <Get_CRLH_Postion+0xbc>
		break;
	default:
		return 0;
 800224a:	2300      	movs	r3, #0
		break;

	}
}
 800224c:	4618      	mov	r0, r3
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	bc80      	pop	{r7}
 8002254:	4770      	bx	lr

08002256 <MCAL_GPIO_Init>:
 * note -                   -stmf103c6 MCU has GPIO A,B,C,D,E Modules
 *                           but LQFP48 Package has only GPIO A,B, Part of C/D exported external pins
 */
/**================================================================= */
void MCAL_GPIO_Init( GPIO_TypeDef *GPIOx , GPIO_Pin_Configure_t *Pin_Config )
{
 8002256:	b590      	push	{r4, r7, lr}
 8002258:	b085      	sub	sp, #20
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
 800225e:	6039      	str	r1, [r7, #0]

	//To Init Any Pins Must Write On Port configuration register low (GPIOx_CRL) 0>>>7
	//Or register low (GPIOx_CRH) 8>>>15
	//We Determine The Position Should Write On It In  configuration register By Determine First Position Pin

	volatile uint32_t *ConfigureRegister = NULL;
 8002260:	2300      	movs	r3, #0
 8002262:	60bb      	str	r3, [r7, #8]
	uint8_t   ConfigurePin=0;     //In This Variable We Store The Configure Pin
 8002264:	2300      	movs	r3, #0
 8002266:	73fb      	strb	r3, [r7, #15]

	ConfigureRegister = (Pin_Config->GPIO_Pin_Number < GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH ;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	2bff      	cmp	r3, #255	; 0xff
 800226e:	d801      	bhi.n	8002274 <MCAL_GPIO_Init+0x1e>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	e001      	b.n	8002278 <MCAL_GPIO_Init+0x22>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3304      	adds	r3, #4
 8002278:	60bb      	str	r3, [r7, #8]
	//Clear CNF & MODE
	*(ConfigureRegister) &=~(0xf<<Get_CRLH_Postion(Pin_Config->GPIO_Pin_Number));
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	881b      	ldrh	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff ff86 	bl	8002190 <Get_CRLH_Postion>
 8002284:	4603      	mov	r3, r0
 8002286:	461a      	mov	r2, r3
 8002288:	230f      	movs	r3, #15
 800228a:	4093      	lsls	r3, r2
 800228c:	43da      	mvns	r2, r3
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	401a      	ands	r2, r3
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	601a      	str	r2, [r3, #0]

	if (Pin_Config->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD || Pin_Config->GPIO_MODE ==GPIO_MODE_OUTPUT_AF_PP || Pin_Config->GPIO_MODE ==GPIO_MODE_OUTPUT_OD || Pin_Config->GPIO_MODE ==GPIO_MODE_OUTPUT_PP)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	789b      	ldrb	r3, [r3, #2]
 800229c:	2b07      	cmp	r3, #7
 800229e:	d00b      	beq.n	80022b8 <MCAL_GPIO_Init+0x62>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	789b      	ldrb	r3, [r3, #2]
 80022a4:	2b06      	cmp	r3, #6
 80022a6:	d007      	beq.n	80022b8 <MCAL_GPIO_Init+0x62>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	789b      	ldrb	r3, [r3, #2]
 80022ac:	2b05      	cmp	r3, #5
 80022ae:	d003      	beq.n	80022b8 <MCAL_GPIO_Init+0x62>
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	789b      	ldrb	r3, [r3, #2]
 80022b4:	2b04      	cmp	r3, #4
 80022b6:	d10e      	bne.n	80022d6 <MCAL_GPIO_Init+0x80>
	{

		//I sure The User Want Make The Pin As Output & in Case Output Should Configure Mode(Speed) & CNF(State)
		ConfigurePin = ((( (Pin_Config->GPIO_MODE - 4)<<2) |(Pin_Config->GPIO_OUTPUT_SPEED)) & 0x0f); //Shift 2 to Set The CNF Bits
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	789b      	ldrb	r3, [r3, #2]
 80022bc:	3b04      	subs	r3, #4
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	b25a      	sxtb	r2, r3
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	78db      	ldrb	r3, [r3, #3]
 80022c6:	b25b      	sxtb	r3, r3
 80022c8:	4313      	orrs	r3, r2
 80022ca:	b25b      	sxtb	r3, r3
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	73fb      	strb	r3, [r7, #15]
 80022d4:	e028      	b.n	8002328 <MCAL_GPIO_Init+0xd2>

	}

	else  //I sure The User Want Make The Pin As Input & in Case input Should Configure Mode(Speed)=00 & CNF(State)
	{
		if(Pin_Config->GPIO_MODE == GPIO_MODE_INPUT_FLO || GPIO_MODE_Analog)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	789b      	ldrb	r3, [r3, #2]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d107      	bne.n	80022ee <MCAL_GPIO_Init+0x98>
		{
			ConfigurePin = (( ( (Pin_Config->GPIO_MODE) <<2) | 0x0) & 0x0F);      //Shift 2 to Set The CNF Bits
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	789b      	ldrb	r3, [r3, #2]
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	73fb      	strb	r3, [r7, #15]
 80022ec:	e01c      	b.n	8002328 <MCAL_GPIO_Init+0xd2>
		}

		else if(Pin_Config->GPIO_MODE == GPIO_MODE_AF_INPUT)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	789b      	ldrb	r3, [r3, #2]
 80022f2:	2b08      	cmp	r3, #8
 80022f4:	d102      	bne.n	80022fc <MCAL_GPIO_Init+0xa6>
		{
			ConfigurePin = (( ( (GPIO_MODE_INPUT_FLO) <<2) | 0x0) & 0x0f);      //Shift 2 to Set The CNF Bits
 80022f6:	2304      	movs	r3, #4
 80022f8:	73fb      	strb	r3, [r7, #15]
 80022fa:	e015      	b.n	8002328 <MCAL_GPIO_Init+0xd2>
		}
		else  //PullUp Or PullDown
		{
			ConfigurePin = ( (((GPIO_MODE_INPUT_PU)<<2  ) |  0x0) & 0x0f);
 80022fc:	2308      	movs	r3, #8
 80022fe:	73fb      	strb	r3, [r7, #15]
			// 20. Port bit configuration table
			/*In Case GPIO_MODE_INPUT_PU OR GPIO_MODE_INPUT_PD We Put The Same Value 10 In CNF
			And Go To ODR IF GPIO_MODE_INPUT_PU Put 1 And If GPIO_MODE_INPUT_PD Put In ODR 0 Shifting By Bin Number*/
			if(Pin_Config->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	789b      	ldrb	r3, [r3, #2]
 8002304:	2b02      	cmp	r3, #2
 8002306:	d107      	bne.n	8002318 <MCAL_GPIO_Init+0xc2>
			{
				GPIOx->ODR |=(Pin_Config->GPIO_Pin_Number); //Not Making Shifting because The Pin Number Already Shifted in Header
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	8812      	ldrh	r2, [r2, #0]
 8002310:	431a      	orrs	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	60da      	str	r2, [r3, #12]
 8002316:	e007      	b.n	8002328 <MCAL_GPIO_Init+0xd2>
			}
			else //GPIO_MODE_INPUT_PD
			{
				GPIOx->ODR &=~(Pin_Config->GPIO_Pin_Number);//Not Making Shifting because The Pin Number Already Shifted in Header
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	8812      	ldrh	r2, [r2, #0]
 8002320:	43d2      	mvns	r2, r2
 8002322:	401a      	ands	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	60da      	str	r2, [r3, #12]
			}
		}
	}
	//Write On CRH Or CLH
	*(ConfigureRegister) |=( ConfigurePin << Get_CRLH_Postion(Pin_Config->GPIO_Pin_Number) );
 8002328:	7bfc      	ldrb	r4, [r7, #15]
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	881b      	ldrh	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff ff2e 	bl	8002190 <Get_CRLH_Postion>
 8002334:	4603      	mov	r3, r0
 8002336:	fa04 f203 	lsl.w	r2, r4, r3
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	431a      	orrs	r2, r3
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	601a      	str	r2, [r3, #0]
}
 8002344:	bf00      	nop
 8002346:	3714      	adds	r7, #20
 8002348:	46bd      	mov	sp, r7
 800234a:	bd90      	pop	{r4, r7, pc}

0800234c <MCAL_GPIO_WritePin>:
 * @retval -                -the input pin value (tow values based on @ref GPIO_PIN_State)
 * note -                   -none
 */
/**================================================================= */
void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx , uint16_t Pin_Number , uint8_t Value)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	807b      	strh	r3, [r7, #2]
 8002358:	4613      	mov	r3, r2
 800235a:	707b      	strb	r3, [r7, #1]
	if(Value != GPIO_PIN_FALSE )
 800235c:	787b      	ldrb	r3, [r7, #1]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d006      	beq.n	8002370 <MCAL_GPIO_WritePin+0x24>
	{
		GPIOx->ODR |=(uint32_t) (Pin_Number);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	887b      	ldrh	r3, [r7, #2]
 8002368:	431a      	orrs	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	60da      	str	r2, [r3, #12]
	}
	else
	{
		GPIOx->ODR &=~(uint32_t)(Pin_Number);
	}
}
 800236e:	e006      	b.n	800237e <MCAL_GPIO_WritePin+0x32>
		GPIOx->ODR &=~(uint32_t)(Pin_Number);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68da      	ldr	r2, [r3, #12]
 8002374:	887b      	ldrh	r3, [r7, #2]
 8002376:	43db      	mvns	r3, r3
 8002378:	401a      	ands	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	60da      	str	r2, [r3, #12]
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr

08002388 <MCAL_RCC_Get_SYS_CLKFreq>:
	1111: SYSCLK divided by 512*/
const uint8_t AHBPrescTable[16] = {0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8};


uint32_t MCAL_RCC_Get_SYS_CLKFreq(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
	00: HSI selected as system clock
	01: HSE selected as system clock
	10: PLL selected as system clock
	11: not allowed*/

	switch( (RCC->CFGR >>2) & 0b11 )
 800238c:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <MCAL_RCC_Get_SYS_CLKFreq+0x34>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	089b      	lsrs	r3, r3, #2
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	2b01      	cmp	r3, #1
 8002398:	d00a      	beq.n	80023b0 <MCAL_RCC_Get_SYS_CLKFreq+0x28>
 800239a:	2b01      	cmp	r3, #1
 800239c:	d302      	bcc.n	80023a4 <MCAL_RCC_Get_SYS_CLKFreq+0x1c>
 800239e:	2b0a      	cmp	r3, #10
 80023a0:	d002      	beq.n	80023a8 <MCAL_RCC_Get_SYS_CLKFreq+0x20>
 80023a2:	e003      	b.n	80023ac <MCAL_RCC_Get_SYS_CLKFreq+0x24>
	{

	case 00:
		return HSI_RC_CLK;
 80023a4:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <MCAL_RCC_Get_SYS_CLKFreq+0x38>)
 80023a6:	e005      	b.n	80023b4 <MCAL_RCC_Get_SYS_CLKFreq+0x2c>
		//return HSE_CLK;
		break;

	case 10:
		//to do calc it HSE PLLCLK & PLLMULL & PLL source Mux
		return 16000000;
 80023a8:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <MCAL_RCC_Get_SYS_CLKFreq+0x3c>)
 80023aa:	e003      	b.n	80023b4 <MCAL_RCC_Get_SYS_CLKFreq+0x2c>
		break;

	default:
		return 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	e001      	b.n	80023b4 <MCAL_RCC_Get_SYS_CLKFreq+0x2c>
		break;
 80023b0:	bf00      	nop
		break;

	}
	return 0;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr
 80023bc:	40021000 	.word	0x40021000
 80023c0:	007a1200 	.word	0x007a1200
 80023c4:	00f42400 	.word	0x00f42400

080023c8 <MCAL_RCC_Get_HCLK_Freq>:


uint32_t MCAL_RCC_Get_HCLK_Freq(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
	1011: SYSCLK divided by 16
	1100: SYSCLK divided by 64
	1101: SYSCLK divided by 128
	1110: SYSCLK divided by 256
	1111: SYSCLK divided by 512*/
	return MCAL_RCC_Get_SYS_CLKFreq() >> AHBPrescTable[( (RCC->CFGR >> 7) & 0b1111) ];/*(( RCC->CFGR >>8) & 0b1111) This Is
 80023cc:	f7ff ffdc 	bl	8002388 <MCAL_RCC_Get_SYS_CLKFreq>
 80023d0:	4601      	mov	r1, r0
 80023d2:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <MCAL_RCC_Get_HCLK_Freq+0x20>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	09db      	lsrs	r3, r3, #7
 80023d8:	f003 030f 	and.w	r3, r3, #15
 80023dc:	4a03      	ldr	r2, [pc, #12]	; (80023ec <MCAL_RCC_Get_HCLK_Freq+0x24>)
 80023de:	5cd3      	ldrb	r3, [r2, r3]
 80023e0:	fa21 f303 	lsr.w	r3, r1, r3
	                                                      Read Value of AHB  prescaler To Determine index On 2d Upper Array */


}
 80023e4:	4618      	mov	r0, r3
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40021000 	.word	0x40021000
 80023ec:	08002a6c 	.word	0x08002a6c

080023f0 <MCAL_RCC_Get_PCLK1_Freq>:



uint32_t MCAL_RCC_Get_PCLK1_Freq(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
	100: HCLK divided by 2
	101: HCLK divided by 4
	110: HCLK divided by 8
	111: HCLK divided by 16*/

	return ( MCAL_RCC_Get_HCLK_Freq() >> APBPrescTable[ (( RCC->CFGR >>8) & 0b111) ] ); /*(( RCC->CFGR >>8) & 0b111) This Is
 80023f4:	f7ff ffe8 	bl	80023c8 <MCAL_RCC_Get_HCLK_Freq>
 80023f8:	4601      	mov	r1, r0
 80023fa:	4b05      	ldr	r3, [pc, #20]	; (8002410 <MCAL_RCC_Get_PCLK1_Freq+0x20>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	0a1b      	lsrs	r3, r3, #8
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	4a03      	ldr	r2, [pc, #12]	; (8002414 <MCAL_RCC_Get_PCLK1_Freq+0x24>)
 8002406:	5cd3      	ldrb	r3, [r2, r3]
 8002408:	fa21 f303 	lsr.w	r3, r1, r3
	                                                      Read Value of  PPRE1 prescaler To Determine index On Upper Array */

}
 800240c:	4618      	mov	r0, r3
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40021000 	.word	0x40021000
 8002414:	08002a64 	.word	0x08002a64

08002418 <MCAL_RCC_Get_PCLK2_Freq>:


uint32_t MCAL_RCC_Get_PCLK2_Freq(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
	100: HCLK divided by 2
	101: HCLK divided by 4
	110: HCLK divided by 8
	111: HCLK divided by 16*/

	return (MCAL_RCC_Get_HCLK_Freq() >> (APBPrescTable[( (RCC->CFGR >>11) & 0b111 )])); /*(( RCC->CFGR >>11) & 0b111) This Is
 800241c:	f7ff ffd4 	bl	80023c8 <MCAL_RCC_Get_HCLK_Freq>
 8002420:	4601      	mov	r1, r0
 8002422:	4b05      	ldr	r3, [pc, #20]	; (8002438 <MCAL_RCC_Get_PCLK2_Freq+0x20>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	0adb      	lsrs	r3, r3, #11
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	4a03      	ldr	r2, [pc, #12]	; (800243c <MCAL_RCC_Get_PCLK2_Freq+0x24>)
 800242e:	5cd3      	ldrb	r3, [r2, r3]
 8002430:	fa21 f303 	lsr.w	r3, r1, r3
	                                                      Read Value of  PPRE2 prescaler To Determine index On Upper Array */

}
 8002434:	4618      	mov	r0, r3
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40021000 	.word	0x40021000
 800243c:	08002a64 	.word	0x08002a64

08002440 <main>:
void vTask3_Handler(void* params);



int main(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af02      	add	r7, sp, #8

	FunGPIOConfig();
 8002446:	f000 f87b 	bl	8002540 <FunGPIOConfig>
	FunUARTConfig();
 800244a:	f000 f859 	bl	8002500 <FunUARTConfig>


    /*===============Tasks Creation===============*/
	xTaskCreate(vTask1_Handler, "task1", 128, NULL, 1, xTask1_Handle);
 800244e:	4b21      	ldr	r3, [pc, #132]	; (80024d4 <main+0x94>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	9301      	str	r3, [sp, #4]
 8002454:	2301      	movs	r3, #1
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	2300      	movs	r3, #0
 800245a:	2280      	movs	r2, #128	; 0x80
 800245c:	491e      	ldr	r1, [pc, #120]	; (80024d8 <main+0x98>)
 800245e:	481f      	ldr	r0, [pc, #124]	; (80024dc <main+0x9c>)
 8002460:	f7fe fa1c 	bl	800089c <xTaskCreate>

	xTaskCreate(vTask2_Handler, "task2", 128, NULL, 2, xTask2_Handle);
 8002464:	4b1e      	ldr	r3, [pc, #120]	; (80024e0 <main+0xa0>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	9301      	str	r3, [sp, #4]
 800246a:	2302      	movs	r3, #2
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	2300      	movs	r3, #0
 8002470:	2280      	movs	r2, #128	; 0x80
 8002472:	491c      	ldr	r1, [pc, #112]	; (80024e4 <main+0xa4>)
 8002474:	481c      	ldr	r0, [pc, #112]	; (80024e8 <main+0xa8>)
 8002476:	f7fe fa11 	bl	800089c <xTaskCreate>

	xTaskCreate(vTask3_Handler, "task3", 128, NULL, 3, xTask3_Handle);
 800247a:	4b1c      	ldr	r3, [pc, #112]	; (80024ec <main+0xac>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	9301      	str	r3, [sp, #4]
 8002480:	2303      	movs	r3, #3
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	2300      	movs	r3, #0
 8002486:	2280      	movs	r2, #128	; 0x80
 8002488:	4919      	ldr	r1, [pc, #100]	; (80024f0 <main+0xb0>)
 800248a:	481a      	ldr	r0, [pc, #104]	; (80024f4 <main+0xb4>)
 800248c:	f7fe fa06 	bl	800089c <xTaskCreate>


	//Semaphore Create
	xSemaphore1 = xSemaphoreCreateBinary();
 8002490:	2203      	movs	r2, #3
 8002492:	2100      	movs	r1, #0
 8002494:	2001      	movs	r0, #1
 8002496:	f7fd ff79 	bl	800038c <xQueueGenericCreate>
 800249a:	4602      	mov	r2, r0
 800249c:	4b16      	ldr	r3, [pc, #88]	; (80024f8 <main+0xb8>)
 800249e:	601a      	str	r2, [r3, #0]
	xSemaphore2 = xSemaphoreCreateBinary();
 80024a0:	2203      	movs	r2, #3
 80024a2:	2100      	movs	r1, #0
 80024a4:	2001      	movs	r0, #1
 80024a6:	f7fd ff71 	bl	800038c <xQueueGenericCreate>
 80024aa:	4602      	mov	r2, r0
 80024ac:	4b13      	ldr	r3, [pc, #76]	; (80024fc <main+0xbc>)
 80024ae:	601a      	str	r2, [r3, #0]

	xSemaphoreGive(xSemaphore1);
 80024b0:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <main+0xb8>)
 80024b2:	6818      	ldr	r0, [r3, #0]
 80024b4:	2300      	movs	r3, #0
 80024b6:	2200      	movs	r2, #0
 80024b8:	2100      	movs	r1, #0
 80024ba:	f7fd ffcb 	bl	8000454 <xQueueGenericSend>
	xSemaphoreGive(xSemaphore2);
 80024be:	4b0f      	ldr	r3, [pc, #60]	; (80024fc <main+0xbc>)
 80024c0:	6818      	ldr	r0, [r3, #0]
 80024c2:	2300      	movs	r3, #0
 80024c4:	2200      	movs	r2, #0
 80024c6:	2100      	movs	r1, #0
 80024c8:	f7fd ffc4 	bl	8000454 <xQueueGenericSend>



	//Scheduler Start
	vTaskStartScheduler();
 80024cc:	f7fe fba8 	bl	8000c20 <vTaskStartScheduler>

	while(1)
 80024d0:	e7fe      	b.n	80024d0 <main+0x90>
 80024d2:	bf00      	nop
 80024d4:	20001548 	.word	0x20001548
 80024d8:	080029f4 	.word	0x080029f4
 80024dc:	0800270d 	.word	0x0800270d
 80024e0:	2000154c 	.word	0x2000154c
 80024e4:	080029fc 	.word	0x080029fc
 80024e8:	080027dd 	.word	0x080027dd
 80024ec:	20001550 	.word	0x20001550
 80024f0:	08002a04 	.word	0x08002a04
 80024f4:	08002825 	.word	0x08002825
 80024f8:	20001554 	.word	0x20001554
 80024fc:	20001558 	.word	0x20001558

08002500 <FunUARTConfig>:
	return 0;
}


void FunUARTConfig(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
		/* PA2  ->TX
		 * PA3 ->RX
		 * PA0 ->CTS
		 * PA1 ->RTS*/
		USART_Config uartCFG;
		uartCFG.BaudRate = USART_BaudRate_115200;
 8002506:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800250a:	60bb      	str	r3, [r7, #8]
		uartCFG.HW_FlowCtrl = USART_HW_FlowCtrl_NONE;
 800250c:	2300      	movs	r3, #0
 800250e:	73fb      	strb	r3, [r7, #15]
		uartCFG.IRQ_Enable = USART_IRQ_Enable_RXNE;
 8002510:	2320      	movs	r3, #32
 8002512:	743b      	strb	r3, [r7, #16]
		uartCFG.Parity = USART_Parity_NONE;
 8002514:	2300      	movs	r3, #0
 8002516:	737b      	strb	r3, [r7, #13]
		uartCFG.PayLoad_Length = USART_PayLoad_Length_8B;
 8002518:	2300      	movs	r3, #0
 800251a:	733b      	strb	r3, [r7, #12]
		uartCFG.StopBits = USART_StopBits_1;
 800251c:	2300      	movs	r3, #0
 800251e:	73bb      	strb	r3, [r7, #14]
		uartCFG.USART_MODE = USART_MODE_RX_AND_TX;
 8002520:	230c      	movs	r3, #12
 8002522:	713b      	strb	r3, [r7, #4]
		MCAL_UART_INIT(USART2, &uartCFG);
 8002524:	1d3b      	adds	r3, r7, #4
 8002526:	4619      	mov	r1, r3
 8002528:	4804      	ldr	r0, [pc, #16]	; (800253c <FunUARTConfig+0x3c>)
 800252a:	f7ff fc0b 	bl	8001d44 <MCAL_UART_INIT>
		MCAL_UART_GPIO_Set_Pins(USART2);
 800252e:	4803      	ldr	r0, [pc, #12]	; (800253c <FunUARTConfig+0x3c>)
 8002530:	f7ff fd30 	bl	8001f94 <MCAL_UART_GPIO_Set_Pins>
		//================================================================//
}
 8002534:	bf00      	nop
 8002536:	3718      	adds	r7, #24
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40004400 	.word	0x40004400

08002540 <FunGPIOConfig>:

void FunGPIOConfig(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
	    RCC_GPIOC_CLOCK_EN();
 8002546:	4b2d      	ldr	r3, [pc, #180]	; (80025fc <FunGPIOConfig+0xbc>)
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	4a2c      	ldr	r2, [pc, #176]	; (80025fc <FunGPIOConfig+0xbc>)
 800254c:	f043 0310 	orr.w	r3, r3, #16
 8002550:	6193      	str	r3, [r2, #24]
		RCC_GPIOA_CLOCK_EN();
 8002552:	4b2a      	ldr	r3, [pc, #168]	; (80025fc <FunGPIOConfig+0xbc>)
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	4a29      	ldr	r2, [pc, #164]	; (80025fc <FunGPIOConfig+0xbc>)
 8002558:	f043 0304 	orr.w	r3, r3, #4
 800255c:	6193      	str	r3, [r2, #24]

		GPIO_Pin_Configure_t PIn13_CFG;
		PIn13_CFG.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800255e:	2304      	movs	r3, #4
 8002560:	73bb      	strb	r3, [r7, #14]
		PIn13_CFG.GPIO_OUTPUT_SPEED=GPIO_SPEED_10M;
 8002562:	2301      	movs	r3, #1
 8002564:	73fb      	strb	r3, [r7, #15]
		PIn13_CFG.GPIO_Pin_Number=GPIO_PIN_13;
 8002566:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800256a:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_Init(GPIOC,&PIn13_CFG);
 800256c:	f107 030c 	add.w	r3, r7, #12
 8002570:	4619      	mov	r1, r3
 8002572:	4823      	ldr	r0, [pc, #140]	; (8002600 <FunGPIOConfig+0xc0>)
 8002574:	f7ff fe6f 	bl	8002256 <MCAL_GPIO_Init>
		MCAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8002578:	2200      	movs	r2, #0
 800257a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800257e:	4820      	ldr	r0, [pc, #128]	; (8002600 <FunGPIOConfig+0xc0>)
 8002580:	f7ff fee4 	bl	800234c <MCAL_GPIO_WritePin>

		GPIO_Pin_Configure_t PIn12_CFG;
		PIn12_CFG.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8002584:	2304      	movs	r3, #4
 8002586:	72bb      	strb	r3, [r7, #10]
		PIn12_CFG.GPIO_OUTPUT_SPEED=GPIO_SPEED_10M;
 8002588:	2301      	movs	r3, #1
 800258a:	72fb      	strb	r3, [r7, #11]
		PIn12_CFG.GPIO_Pin_Number=GPIO_PIN_12;
 800258c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002590:	813b      	strh	r3, [r7, #8]
		MCAL_GPIO_Init(GPIOA,&PIn12_CFG);
 8002592:	f107 0308 	add.w	r3, r7, #8
 8002596:	4619      	mov	r1, r3
 8002598:	481a      	ldr	r0, [pc, #104]	; (8002604 <FunGPIOConfig+0xc4>)
 800259a:	f7ff fe5c 	bl	8002256 <MCAL_GPIO_Init>
		MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
 800259e:	2200      	movs	r2, #0
 80025a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025a4:	4817      	ldr	r0, [pc, #92]	; (8002604 <FunGPIOConfig+0xc4>)
 80025a6:	f7ff fed1 	bl	800234c <MCAL_GPIO_WritePin>

		GPIO_Pin_Configure_t PIn11_CFG;
		PIn11_CFG.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80025aa:	2304      	movs	r3, #4
 80025ac:	71bb      	strb	r3, [r7, #6]
		PIn11_CFG.GPIO_OUTPUT_SPEED=GPIO_SPEED_10M;
 80025ae:	2301      	movs	r3, #1
 80025b0:	71fb      	strb	r3, [r7, #7]
		PIn11_CFG.GPIO_Pin_Number=GPIO_PIN_11;
 80025b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025b6:	80bb      	strh	r3, [r7, #4]
		MCAL_GPIO_Init(GPIOA,&PIn11_CFG);
 80025b8:	1d3b      	adds	r3, r7, #4
 80025ba:	4619      	mov	r1, r3
 80025bc:	4811      	ldr	r0, [pc, #68]	; (8002604 <FunGPIOConfig+0xc4>)
 80025be:	f7ff fe4a 	bl	8002256 <MCAL_GPIO_Init>
		MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 80025c2:	2200      	movs	r2, #0
 80025c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025c8:	480e      	ldr	r0, [pc, #56]	; (8002604 <FunGPIOConfig+0xc4>)
 80025ca:	f7ff febf 	bl	800234c <MCAL_GPIO_WritePin>

		GPIO_Pin_Configure_t PIn10_CFG_For_Tick;
		PIn10_CFG_For_Tick.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80025ce:	2304      	movs	r3, #4
 80025d0:	70bb      	strb	r3, [r7, #2]
		PIn10_CFG_For_Tick.GPIO_OUTPUT_SPEED=GPIO_SPEED_10M;
 80025d2:	2301      	movs	r3, #1
 80025d4:	70fb      	strb	r3, [r7, #3]
		PIn10_CFG_For_Tick.GPIO_Pin_Number=GPIO_PIN_10;
 80025d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025da:	803b      	strh	r3, [r7, #0]
		MCAL_GPIO_Init(GPIOA,&PIn10_CFG_For_Tick);
 80025dc:	463b      	mov	r3, r7
 80025de:	4619      	mov	r1, r3
 80025e0:	4808      	ldr	r0, [pc, #32]	; (8002604 <FunGPIOConfig+0xc4>)
 80025e2:	f7ff fe38 	bl	8002256 <MCAL_GPIO_Init>
		MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 80025e6:	2200      	movs	r2, #0
 80025e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025ec:	4805      	ldr	r0, [pc, #20]	; (8002604 <FunGPIOConfig+0xc4>)
 80025ee:	f7ff fead 	bl	800234c <MCAL_GPIO_WritePin>
}
 80025f2:	bf00      	nop
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40021000 	.word	0x40021000
 8002600:	40011000 	.word	0x40011000
 8002604:	40010800 	.word	0x40010800

08002608 <FunPrintSemaphoreState>:

void FunPrintSemaphoreState(char tasknum,char semphrNum ,char semphrstate)
{
 8002608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	71fb      	strb	r3, [r7, #7]
 8002612:	460b      	mov	r3, r1
 8002614:	71bb      	strb	r3, [r7, #6]
 8002616:	4613      	mov	r3, r2
 8002618:	717b      	strb	r3, [r7, #5]

	int counter = 0;
 800261a:	2300      	movs	r3, #0
 800261c:	60fb      	str	r3, [r7, #12]
	if(semphrstate == taken)
 800261e:	797b      	ldrb	r3, [r7, #5]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d132      	bne.n	800268a <FunPrintSemaphoreState+0x82>
	{
		strcpy(UART_MESSAGE,"\nTASK :The Semaphore  Was Taken By Me<-\n");
 8002624:	4b35      	ldr	r3, [pc, #212]	; (80026fc <FunPrintSemaphoreState+0xf4>)
 8002626:	4a36      	ldr	r2, [pc, #216]	; (8002700 <FunPrintSemaphoreState+0xf8>)
 8002628:	4614      	mov	r4, r2
 800262a:	469c      	mov	ip, r3
 800262c:	f104 0e20 	add.w	lr, r4, #32
 8002630:	4665      	mov	r5, ip
 8002632:	4626      	mov	r6, r4
 8002634:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002636:	6028      	str	r0, [r5, #0]
 8002638:	6069      	str	r1, [r5, #4]
 800263a:	60aa      	str	r2, [r5, #8]
 800263c:	60eb      	str	r3, [r5, #12]
 800263e:	3410      	adds	r4, #16
 8002640:	f10c 0c10 	add.w	ip, ip, #16
 8002644:	4574      	cmp	r4, lr
 8002646:	d1f3      	bne.n	8002630 <FunPrintSemaphoreState+0x28>
 8002648:	4662      	mov	r2, ip
 800264a:	4623      	mov	r3, r4
 800264c:	cb03      	ldmia	r3!, {r0, r1}
 800264e:	6010      	str	r0, [r2, #0]
 8002650:	6051      	str	r1, [r2, #4]
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	7213      	strb	r3, [r2, #8]
		UART_MESSAGE[5]=tasknum;
 8002656:	4a29      	ldr	r2, [pc, #164]	; (80026fc <FunPrintSemaphoreState+0xf4>)
 8002658:	79fb      	ldrb	r3, [r7, #7]
 800265a:	7153      	strb	r3, [r2, #5]
		UART_MESSAGE[20]=semphrNum;
 800265c:	4a27      	ldr	r2, [pc, #156]	; (80026fc <FunPrintSemaphoreState+0xf4>)
 800265e:	79bb      	ldrb	r3, [r7, #6]
 8002660:	7513      	strb	r3, [r2, #20]
		for(counter==0;counter<strlen(UART_MESSAGE);counter++)
 8002662:	e00a      	b.n	800267a <FunPrintSemaphoreState+0x72>
		{
			MCAL_UART_SEND_DATA(USART2, (UART_MESSAGE+counter), enable);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4a25      	ldr	r2, [pc, #148]	; (80026fc <FunPrintSemaphoreState+0xf4>)
 8002668:	4413      	add	r3, r2
 800266a:	2200      	movs	r2, #0
 800266c:	4619      	mov	r1, r3
 800266e:	4825      	ldr	r0, [pc, #148]	; (8002704 <FunPrintSemaphoreState+0xfc>)
 8002670:	f7ff fc70 	bl	8001f54 <MCAL_UART_SEND_DATA>
		for(counter==0;counter<strlen(UART_MESSAGE);counter++)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	3301      	adds	r3, #1
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	4820      	ldr	r0, [pc, #128]	; (80026fc <FunPrintSemaphoreState+0xf4>)
 800267c:	f7fd fd78 	bl	8000170 <strlen>
 8002680:	4602      	mov	r2, r0
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	429a      	cmp	r2, r3
 8002686:	d8ed      	bhi.n	8002664 <FunPrintSemaphoreState+0x5c>
		for(counter==0;counter<strlen(UART_MESSAGE);counter++)
		{
			MCAL_UART_SEND_DATA(USART2, (UART_MESSAGE+counter), enable);
		}
	}
}
 8002688:	e034      	b.n	80026f4 <FunPrintSemaphoreState+0xec>
	else if(semphrstate == given)
 800268a:	797b      	ldrb	r3, [r7, #5]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d131      	bne.n	80026f4 <FunPrintSemaphoreState+0xec>
		strcpy(UART_MESSAGE,"\nTASK :The Semaphore  Was given By Me->\n");
 8002690:	4b1a      	ldr	r3, [pc, #104]	; (80026fc <FunPrintSemaphoreState+0xf4>)
 8002692:	4a1d      	ldr	r2, [pc, #116]	; (8002708 <FunPrintSemaphoreState+0x100>)
 8002694:	4614      	mov	r4, r2
 8002696:	469c      	mov	ip, r3
 8002698:	f104 0e20 	add.w	lr, r4, #32
 800269c:	4665      	mov	r5, ip
 800269e:	4626      	mov	r6, r4
 80026a0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80026a2:	6028      	str	r0, [r5, #0]
 80026a4:	6069      	str	r1, [r5, #4]
 80026a6:	60aa      	str	r2, [r5, #8]
 80026a8:	60eb      	str	r3, [r5, #12]
 80026aa:	3410      	adds	r4, #16
 80026ac:	f10c 0c10 	add.w	ip, ip, #16
 80026b0:	4574      	cmp	r4, lr
 80026b2:	d1f3      	bne.n	800269c <FunPrintSemaphoreState+0x94>
 80026b4:	4662      	mov	r2, ip
 80026b6:	4623      	mov	r3, r4
 80026b8:	cb03      	ldmia	r3!, {r0, r1}
 80026ba:	6010      	str	r0, [r2, #0]
 80026bc:	6051      	str	r1, [r2, #4]
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	7213      	strb	r3, [r2, #8]
		UART_MESSAGE[5]=tasknum;
 80026c2:	4a0e      	ldr	r2, [pc, #56]	; (80026fc <FunPrintSemaphoreState+0xf4>)
 80026c4:	79fb      	ldrb	r3, [r7, #7]
 80026c6:	7153      	strb	r3, [r2, #5]
		UART_MESSAGE[20]=semphrNum;
 80026c8:	4a0c      	ldr	r2, [pc, #48]	; (80026fc <FunPrintSemaphoreState+0xf4>)
 80026ca:	79bb      	ldrb	r3, [r7, #6]
 80026cc:	7513      	strb	r3, [r2, #20]
		for(counter==0;counter<strlen(UART_MESSAGE);counter++)
 80026ce:	e00a      	b.n	80026e6 <FunPrintSemaphoreState+0xde>
			MCAL_UART_SEND_DATA(USART2, (UART_MESSAGE+counter), enable);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4a0a      	ldr	r2, [pc, #40]	; (80026fc <FunPrintSemaphoreState+0xf4>)
 80026d4:	4413      	add	r3, r2
 80026d6:	2200      	movs	r2, #0
 80026d8:	4619      	mov	r1, r3
 80026da:	480a      	ldr	r0, [pc, #40]	; (8002704 <FunPrintSemaphoreState+0xfc>)
 80026dc:	f7ff fc3a 	bl	8001f54 <MCAL_UART_SEND_DATA>
		for(counter==0;counter<strlen(UART_MESSAGE);counter++)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	3301      	adds	r3, #1
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	4805      	ldr	r0, [pc, #20]	; (80026fc <FunPrintSemaphoreState+0xf4>)
 80026e8:	f7fd fd42 	bl	8000170 <strlen>
 80026ec:	4602      	mov	r2, r0
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d8ed      	bhi.n	80026d0 <FunPrintSemaphoreState+0xc8>
}
 80026f4:	bf00      	nop
 80026f6:	3714      	adds	r7, #20
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026fc:	200015d4 	.word	0x200015d4
 8002700:	08002a0c 	.word	0x08002a0c
 8002704:	40004400 	.word	0x40004400
 8002708:	08002a38 	.word	0x08002a38

0800270c <vTask1_Handler>:



/*======================System Tasks========================*/
void vTask1_Handler(void* params)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]

	int i =0,j=0;
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]
 8002718:	2300      	movs	r3, #0
 800271a:	613b      	str	r3, [r7, #16]
	int xLastWakeTime = xTaskGetTickCount();
 800271c:	f7fe fbb4 	bl	8000e88 <xTaskGetTickCount>
 8002720:	4603      	mov	r3, r0
 8002722:	60fb      	str	r3, [r7, #12]

		while(1)
		{
			if(xSemaphoreTake(xSemaphore1 , portMAX_DELAY)==1)
 8002724:	4b2a      	ldr	r3, [pc, #168]	; (80027d0 <vTask1_Handler+0xc4>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f04f 31ff 	mov.w	r1, #4294967295
 800272c:	4618      	mov	r0, r3
 800272e:	f7fd ff3b 	bl	80005a8 <xQueueSemaphoreTake>
 8002732:	4603      	mov	r3, r0
 8002734:	2b01      	cmp	r3, #1
 8002736:	d104      	bne.n	8002742 <vTask1_Handler+0x36>
			{
				FunPrintSemaphoreState('1','1',taken);
 8002738:	2200      	movs	r2, #0
 800273a:	2131      	movs	r1, #49	; 0x31
 800273c:	2031      	movs	r0, #49	; 0x31
 800273e:	f7ff ff63 	bl	8002608 <FunPrintSemaphoreState>
			}
			if(xSemaphoreTake(xSemaphore2,portMAX_DELAY)==1)
 8002742:	4b24      	ldr	r3, [pc, #144]	; (80027d4 <vTask1_Handler+0xc8>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f04f 31ff 	mov.w	r1, #4294967295
 800274a:	4618      	mov	r0, r3
 800274c:	f7fd ff2c 	bl	80005a8 <xQueueSemaphoreTake>
 8002750:	4603      	mov	r3, r0
 8002752:	2b01      	cmp	r3, #1
 8002754:	d104      	bne.n	8002760 <vTask1_Handler+0x54>
			{
				FunPrintSemaphoreState('1','2',taken);
 8002756:	2200      	movs	r2, #0
 8002758:	2132      	movs	r1, #50	; 0x32
 800275a:	2031      	movs	r0, #49	; 0x31
 800275c:	f7ff ff54 	bl	8002608 <FunPrintSemaphoreState>

				}

			}*/

			MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
 8002760:	2200      	movs	r2, #0
 8002762:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002766:	481c      	ldr	r0, [pc, #112]	; (80027d8 <vTask1_Handler+0xcc>)
 8002768:	f7ff fdf0 	bl	800234c <MCAL_GPIO_WritePin>
			vTaskDelay(10);
 800276c:	200a      	movs	r0, #10
 800276e:	f7fe fa33 	bl	8000bd8 <vTaskDelay>
			MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);
 8002772:	2201      	movs	r2, #1
 8002774:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002778:	4817      	ldr	r0, [pc, #92]	; (80027d8 <vTask1_Handler+0xcc>)
 800277a:	f7ff fde7 	bl	800234c <MCAL_GPIO_WritePin>
			vTaskDelay(10);
 800277e:	200a      	movs	r0, #10
 8002780:	f7fe fa2a 	bl	8000bd8 <vTaskDelay>

			if(xSemaphoreGive(xSemaphore1)==1)
 8002784:	4b12      	ldr	r3, [pc, #72]	; (80027d0 <vTask1_Handler+0xc4>)
 8002786:	6818      	ldr	r0, [r3, #0]
 8002788:	2300      	movs	r3, #0
 800278a:	2200      	movs	r2, #0
 800278c:	2100      	movs	r1, #0
 800278e:	f7fd fe61 	bl	8000454 <xQueueGenericSend>
 8002792:	4603      	mov	r3, r0
 8002794:	2b01      	cmp	r3, #1
 8002796:	d104      	bne.n	80027a2 <vTask1_Handler+0x96>
			{
				FunPrintSemaphoreState('1','1',given);
 8002798:	2201      	movs	r2, #1
 800279a:	2131      	movs	r1, #49	; 0x31
 800279c:	2031      	movs	r0, #49	; 0x31
 800279e:	f7ff ff33 	bl	8002608 <FunPrintSemaphoreState>
			}

			if(xSemaphoreGive(xSemaphore2)==1)
 80027a2:	4b0c      	ldr	r3, [pc, #48]	; (80027d4 <vTask1_Handler+0xc8>)
 80027a4:	6818      	ldr	r0, [r3, #0]
 80027a6:	2300      	movs	r3, #0
 80027a8:	2200      	movs	r2, #0
 80027aa:	2100      	movs	r1, #0
 80027ac:	f7fd fe52 	bl	8000454 <xQueueGenericSend>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d104      	bne.n	80027c0 <vTask1_Handler+0xb4>
			{
				FunPrintSemaphoreState('1','2',given);
 80027b6:	2201      	movs	r2, #1
 80027b8:	2132      	movs	r1, #50	; 0x32
 80027ba:	2031      	movs	r0, #49	; 0x31
 80027bc:	f7ff ff24 	bl	8002608 <FunPrintSemaphoreState>
			}

			vTaskDelayUntil(&xLastWakeTime , 120);
 80027c0:	f107 030c 	add.w	r3, r7, #12
 80027c4:	2178      	movs	r1, #120	; 0x78
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7fe f9b4 	bl	8000b34 <xTaskDelayUntil>
			if(xSemaphoreTake(xSemaphore1 , portMAX_DELAY)==1)
 80027cc:	e7aa      	b.n	8002724 <vTask1_Handler+0x18>
 80027ce:	bf00      	nop
 80027d0:	20001554 	.word	0x20001554
 80027d4:	20001558 	.word	0x20001558
 80027d8:	40010800 	.word	0x40010800

080027dc <vTask2_Handler>:




void vTask2_Handler(void* params)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]

	int xLastWakeTime = xTaskGetTickCount();
 80027e4:	f7fe fb50 	bl	8000e88 <xTaskGetTickCount>
 80027e8:	4603      	mov	r3, r0
 80027ea:	60fb      	str	r3, [r7, #12]

			while(1)
			{
				MCAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80027ec:	2200      	movs	r2, #0
 80027ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027f2:	480b      	ldr	r0, [pc, #44]	; (8002820 <vTask2_Handler+0x44>)
 80027f4:	f7ff fdaa 	bl	800234c <MCAL_GPIO_WritePin>
				vTaskDelay(10);
 80027f8:	200a      	movs	r0, #10
 80027fa:	f7fe f9ed 	bl	8000bd8 <vTaskDelay>
				MCAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80027fe:	2201      	movs	r2, #1
 8002800:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002804:	4806      	ldr	r0, [pc, #24]	; (8002820 <vTask2_Handler+0x44>)
 8002806:	f7ff fda1 	bl	800234c <MCAL_GPIO_WritePin>
				vTaskDelay(10);
 800280a:	200a      	movs	r0, #10
 800280c:	f7fe f9e4 	bl	8000bd8 <vTaskDelay>

				vTaskDelayUntil(&xLastWakeTime , 120);
 8002810:	f107 030c 	add.w	r3, r7, #12
 8002814:	2178      	movs	r1, #120	; 0x78
 8002816:	4618      	mov	r0, r3
 8002818:	f7fe f98c 	bl	8000b34 <xTaskDelayUntil>
				MCAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 800281c:	e7e6      	b.n	80027ec <vTask2_Handler+0x10>
 800281e:	bf00      	nop
 8002820:	40011000 	.word	0x40011000

08002824 <vTask3_Handler>:
			}
}


void vTask3_Handler(void* params)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
	  int xLastWakeTime = xTaskGetTickCount();
 800282c:	f7fe fb2c 	bl	8000e88 <xTaskGetTickCount>
 8002830:	4603      	mov	r3, r0
 8002832:	60fb      	str	r3, [r7, #12]
			{
				//take sem2


				//take sem1
				if(xSemaphoreTake(xSemaphore1,portMAX_DELAY)==1)
 8002834:	4b2a      	ldr	r3, [pc, #168]	; (80028e0 <vTask3_Handler+0xbc>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f04f 31ff 	mov.w	r1, #4294967295
 800283c:	4618      	mov	r0, r3
 800283e:	f7fd feb3 	bl	80005a8 <xQueueSemaphoreTake>
 8002842:	4603      	mov	r3, r0
 8002844:	2b01      	cmp	r3, #1
 8002846:	d104      	bne.n	8002852 <vTask3_Handler+0x2e>
				{
					FunPrintSemaphoreState('3','1', taken);
 8002848:	2200      	movs	r2, #0
 800284a:	2131      	movs	r1, #49	; 0x31
 800284c:	2033      	movs	r0, #51	; 0x33
 800284e:	f7ff fedb 	bl	8002608 <FunPrintSemaphoreState>
				}
				if(xSemaphoreTake(xSemaphore2,portMAX_DELAY)==1)
 8002852:	4b24      	ldr	r3, [pc, #144]	; (80028e4 <vTask3_Handler+0xc0>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f04f 31ff 	mov.w	r1, #4294967295
 800285a:	4618      	mov	r0, r3
 800285c:	f7fd fea4 	bl	80005a8 <xQueueSemaphoreTake>
 8002860:	4603      	mov	r3, r0
 8002862:	2b01      	cmp	r3, #1
 8002864:	d104      	bne.n	8002870 <vTask3_Handler+0x4c>
				{
					FunPrintSemaphoreState('3','2', taken);
 8002866:	2200      	movs	r2, #0
 8002868:	2132      	movs	r1, #50	; 0x32
 800286a:	2033      	movs	r0, #51	; 0x33
 800286c:	f7ff fecc 	bl	8002608 <FunPrintSemaphoreState>
				}

				//toggle p11 porta
				MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8002870:	2200      	movs	r2, #0
 8002872:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002876:	481c      	ldr	r0, [pc, #112]	; (80028e8 <vTask3_Handler+0xc4>)
 8002878:	f7ff fd68 	bl	800234c <MCAL_GPIO_WritePin>
				vTaskDelay(10);
 800287c:	200a      	movs	r0, #10
 800287e:	f7fe f9ab 	bl	8000bd8 <vTaskDelay>
				MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8002882:	2201      	movs	r2, #1
 8002884:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002888:	4817      	ldr	r0, [pc, #92]	; (80028e8 <vTask3_Handler+0xc4>)
 800288a:	f7ff fd5f 	bl	800234c <MCAL_GPIO_WritePin>
				vTaskDelay(10);
 800288e:	200a      	movs	r0, #10
 8002890:	f7fe f9a2 	bl	8000bd8 <vTaskDelay>


				//give sem2
				if(xSemaphoreGive(xSemaphore2)==1)
 8002894:	4b13      	ldr	r3, [pc, #76]	; (80028e4 <vTask3_Handler+0xc0>)
 8002896:	6818      	ldr	r0, [r3, #0]
 8002898:	2300      	movs	r3, #0
 800289a:	2200      	movs	r2, #0
 800289c:	2100      	movs	r1, #0
 800289e:	f7fd fdd9 	bl	8000454 <xQueueGenericSend>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d104      	bne.n	80028b2 <vTask3_Handler+0x8e>
				{
					FunPrintSemaphoreState('3','2', given);
 80028a8:	2201      	movs	r2, #1
 80028aa:	2132      	movs	r1, #50	; 0x32
 80028ac:	2033      	movs	r0, #51	; 0x33
 80028ae:	f7ff feab 	bl	8002608 <FunPrintSemaphoreState>
				}

				//give sem1
				if(xSemaphoreGive(xSemaphore1)==1)
 80028b2:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <vTask3_Handler+0xbc>)
 80028b4:	6818      	ldr	r0, [r3, #0]
 80028b6:	2300      	movs	r3, #0
 80028b8:	2200      	movs	r2, #0
 80028ba:	2100      	movs	r1, #0
 80028bc:	f7fd fdca 	bl	8000454 <xQueueGenericSend>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d104      	bne.n	80028d0 <vTask3_Handler+0xac>
				{
					FunPrintSemaphoreState('3','1', given);
 80028c6:	2201      	movs	r2, #1
 80028c8:	2131      	movs	r1, #49	; 0x31
 80028ca:	2033      	movs	r0, #51	; 0x33
 80028cc:	f7ff fe9c 	bl	8002608 <FunPrintSemaphoreState>
				}
				vTaskDelayUntil(&xLastWakeTime , 120);
 80028d0:	f107 030c 	add.w	r3, r7, #12
 80028d4:	2178      	movs	r1, #120	; 0x78
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fe f92c 	bl	8000b34 <xTaskDelayUntil>
				if(xSemaphoreTake(xSemaphore1,portMAX_DELAY)==1)
 80028dc:	e7aa      	b.n	8002834 <vTask3_Handler+0x10>
 80028de:	bf00      	nop
 80028e0:	20001554 	.word	0x20001554
 80028e4:	20001558 	.word	0x20001558
 80028e8:	40010800 	.word	0x40010800

080028ec <vApplicationTickHook>:
}



void vApplicationTickHook( void )
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 80028f0:	2200      	movs	r2, #0
 80028f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028f6:	4805      	ldr	r0, [pc, #20]	; (800290c <vApplicationTickHook+0x20>)
 80028f8:	f7ff fd28 	bl	800234c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 80028fc:	2201      	movs	r2, #1
 80028fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002902:	4802      	ldr	r0, [pc, #8]	; (800290c <vApplicationTickHook+0x20>)
 8002904:	f7ff fd22 	bl	800234c <MCAL_GPIO_WritePin>
}
 8002908:	bf00      	nop
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40010800 	.word	0x40010800

08002910 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002910:	480d      	ldr	r0, [pc, #52]	; (8002948 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002912:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002914:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002918:	480c      	ldr	r0, [pc, #48]	; (800294c <LoopForever+0x6>)
  ldr r1, =_edata
 800291a:	490d      	ldr	r1, [pc, #52]	; (8002950 <LoopForever+0xa>)
  ldr r2, =_sidata
 800291c:	4a0d      	ldr	r2, [pc, #52]	; (8002954 <LoopForever+0xe>)
  movs r3, #0
 800291e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002920:	e002      	b.n	8002928 <LoopCopyDataInit>

08002922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002926:	3304      	adds	r3, #4

08002928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800292a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800292c:	d3f9      	bcc.n	8002922 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800292e:	4a0a      	ldr	r2, [pc, #40]	; (8002958 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002930:	4c0a      	ldr	r4, [pc, #40]	; (800295c <LoopForever+0x16>)
  movs r3, #0
 8002932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002934:	e001      	b.n	800293a <LoopFillZerobss>

08002936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002938:	3204      	adds	r2, #4

0800293a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800293a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800293c:	d3fb      	bcc.n	8002936 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800293e:	f000 f811 	bl	8002964 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002942:	f7ff fd7d 	bl	8002440 <main>

08002946 <LoopForever>:

LoopForever:
    b LoopForever
 8002946:	e7fe      	b.n	8002946 <LoopForever>
  ldr   r0, =_estack
 8002948:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800294c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002950:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8002954:	08002a84 	.word	0x08002a84
  ldr r2, =_sbss
 8002958:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 800295c:	20001608 	.word	0x20001608

08002960 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002960:	e7fe      	b.n	8002960 <ADC1_2_IRQHandler>
	...

08002964 <__libc_init_array>:
 8002964:	b570      	push	{r4, r5, r6, lr}
 8002966:	2500      	movs	r5, #0
 8002968:	4e0c      	ldr	r6, [pc, #48]	; (800299c <__libc_init_array+0x38>)
 800296a:	4c0d      	ldr	r4, [pc, #52]	; (80029a0 <__libc_init_array+0x3c>)
 800296c:	1ba4      	subs	r4, r4, r6
 800296e:	10a4      	asrs	r4, r4, #2
 8002970:	42a5      	cmp	r5, r4
 8002972:	d109      	bne.n	8002988 <__libc_init_array+0x24>
 8002974:	f000 f82e 	bl	80029d4 <_init>
 8002978:	2500      	movs	r5, #0
 800297a:	4e0a      	ldr	r6, [pc, #40]	; (80029a4 <__libc_init_array+0x40>)
 800297c:	4c0a      	ldr	r4, [pc, #40]	; (80029a8 <__libc_init_array+0x44>)
 800297e:	1ba4      	subs	r4, r4, r6
 8002980:	10a4      	asrs	r4, r4, #2
 8002982:	42a5      	cmp	r5, r4
 8002984:	d105      	bne.n	8002992 <__libc_init_array+0x2e>
 8002986:	bd70      	pop	{r4, r5, r6, pc}
 8002988:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800298c:	4798      	blx	r3
 800298e:	3501      	adds	r5, #1
 8002990:	e7ee      	b.n	8002970 <__libc_init_array+0xc>
 8002992:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002996:	4798      	blx	r3
 8002998:	3501      	adds	r5, #1
 800299a:	e7f2      	b.n	8002982 <__libc_init_array+0x1e>
 800299c:	08002a7c 	.word	0x08002a7c
 80029a0:	08002a7c 	.word	0x08002a7c
 80029a4:	08002a7c 	.word	0x08002a7c
 80029a8:	08002a80 	.word	0x08002a80

080029ac <memcpy>:
 80029ac:	b510      	push	{r4, lr}
 80029ae:	1e43      	subs	r3, r0, #1
 80029b0:	440a      	add	r2, r1
 80029b2:	4291      	cmp	r1, r2
 80029b4:	d100      	bne.n	80029b8 <memcpy+0xc>
 80029b6:	bd10      	pop	{r4, pc}
 80029b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80029bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80029c0:	e7f7      	b.n	80029b2 <memcpy+0x6>

080029c2 <memset>:
 80029c2:	4603      	mov	r3, r0
 80029c4:	4402      	add	r2, r0
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d100      	bne.n	80029cc <memset+0xa>
 80029ca:	4770      	bx	lr
 80029cc:	f803 1b01 	strb.w	r1, [r3], #1
 80029d0:	e7f9      	b.n	80029c6 <memset+0x4>
	...

080029d4 <_init>:
 80029d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029d6:	bf00      	nop
 80029d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029da:	bc08      	pop	{r3}
 80029dc:	469e      	mov	lr, r3
 80029de:	4770      	bx	lr

080029e0 <_fini>:
 80029e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029e2:	bf00      	nop
 80029e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029e6:	bc08      	pop	{r3}
 80029e8:	469e      	mov	lr, r3
 80029ea:	4770      	bx	lr
